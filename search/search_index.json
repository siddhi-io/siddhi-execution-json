{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Siddhi Execution JSON The siddhi-execution-json extension is a Siddhi extension that provides capability to retrieve, insert, and modify JSON elements. For information on Siddhi and it's features refer Siddhi Documentation . Download Versions 2.x and above with group id io.siddhi.extension.* from here . Versions 1.x and lower with group id org.wso2.extension.siddhi.* from here . Latest API Docs Latest API Docs is 2.0.11 . Features group ( Aggregate Function ) This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. groupAsObject ( Aggregate Function ) This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. getBool ( Function ) Function retrieves the 'boolean' value specified in the given path of the JSON element. getDouble ( Function ) Function retrieves the 'double' value specified in the given path of the JSON element. getFloat ( Function ) Function retrieves the 'float' value specified in the given path of the JSON element. getInt ( Function ) Function retrieves the 'int' value specified in the given path of the JSON element. getLong ( Function ) Function retrieves the 'long' value specified in the given path of the JSON element. getObject ( Function ) Function retrieves the object specified in the given path of the JSON element. getString ( Function ) Function retrieves value specified in the given path of the JSON element as a string. isExists ( Function ) Function checks whether there is a JSON element present in the given path or not. setElement ( Function ) Function sets JSON element into a given JSON at the specific path. toObject ( Function ) Function generate JSON object from the given JSON string. toString ( Function ) Function generates a JSON string corresponding to a given JSON object. tokenize ( Stream Processor ) Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events. tokenizeAsObject ( Stream Processor ) Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events. Dependencies There are no other dependencies needed for this extension. Installation For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions . Support and Contribution We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Information"},{"location":"#siddhi-execution-json","text":"The siddhi-execution-json extension is a Siddhi extension that provides capability to retrieve, insert, and modify JSON elements. For information on Siddhi and it's features refer Siddhi Documentation .","title":"Siddhi Execution JSON"},{"location":"#download","text":"Versions 2.x and above with group id io.siddhi.extension.* from here . Versions 1.x and lower with group id org.wso2.extension.siddhi.* from here .","title":"Download"},{"location":"#latest-api-docs","text":"Latest API Docs is 2.0.11 .","title":"Latest API Docs"},{"location":"#features","text":"group ( Aggregate Function ) This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. groupAsObject ( Aggregate Function ) This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. getBool ( Function ) Function retrieves the 'boolean' value specified in the given path of the JSON element. getDouble ( Function ) Function retrieves the 'double' value specified in the given path of the JSON element. getFloat ( Function ) Function retrieves the 'float' value specified in the given path of the JSON element. getInt ( Function ) Function retrieves the 'int' value specified in the given path of the JSON element. getLong ( Function ) Function retrieves the 'long' value specified in the given path of the JSON element. getObject ( Function ) Function retrieves the object specified in the given path of the JSON element. getString ( Function ) Function retrieves value specified in the given path of the JSON element as a string. isExists ( Function ) Function checks whether there is a JSON element present in the given path or not. setElement ( Function ) Function sets JSON element into a given JSON at the specific path. toObject ( Function ) Function generate JSON object from the given JSON string. toString ( Function ) Function generates a JSON string corresponding to a given JSON object. tokenize ( Stream Processor ) Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events. tokenizeAsObject ( Stream Processor ) Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events.","title":"Features"},{"location":"#dependencies","text":"There are no other dependencies needed for this extension.","title":"Dependencies"},{"location":"#installation","text":"For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions .","title":"Installation"},{"location":"#support-and-contribution","text":"We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Support and Contribution"},{"location":"license/","text":"Copyright (c) 2019 WSO2 Inc. ( http://www.wso2.org ) All Rights Reserved. WSO2 Inc. licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ------------------------------------------------------------------------- Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. License shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. Licensor shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. Legal Entity shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, control means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. You (or Your ) shall mean an individual or Legal Entity exercising permissions granted by this License. Source form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. Object form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. Work shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). Derivative Works shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. Contribution shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, submitted means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as Not a Contribution. Contributor shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a NOTICE text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","title":"License"},{"location":"api/1.0.10/","text":"API Docs - v1.0.10 Json getBool (Function) This method returns a 'boolean' value, either 'true' or 'false', based on the valuespecified against the JSON element present in the given path.In case there is no valid boolean value found in the given path, the method still returns 'false'. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the boolean value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getBool' function fetches theboolean value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getBool(json, $.name ) as name insert into OutputStream; This returns the boolean value of the JSON input in the given path. The results are directed to the 'OutputStream' stream. getDouble (Function) This method returns the double value of the JSON element present in the given path. If there is no valid double value in the given path, the method returns 'null'. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getDouble' function fetches thedouble value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getDouble(json, $.name ) as name insert into OutputStream; This returns the double value of the given path. The results aredirected to the 'OutputStream' stream. getFloat (Function) This method returns the float value of the JSON element present in the given path.If there is no valid float value in the given path, the method returns 'null'. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getFloat' function fetches thevalue. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getFloat(json, $.name ) as name insert into OutputStream; This returns the float value of the JSON input in the given path. The results aredirected to the 'OutputStream' stream. getInt (Function) This method returns the integer value of the JSON element present in the given path. If there is no valid integer value in the given path, the method returns 'null'. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getInt' function fetches theinteger value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getInt(json, $.name ) as name insert into OutputStream; This returns the integer value of the JSON input in the given path. The resultsare directed to the 'OutputStream' stream. getLong (Function) This returns the long value of the JSON element present in the given path. Ifthere is no valid long value in the given path, the method returns 'null'. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the JSON element from which the 'getLong' functionfetches the long value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getLong(json, $.name ) as name insert into OutputStream; This returns the long value of the JSON input in the given path. The results aredirected to 'OutputStream' stream. getObject (Function) This returns the object of the JSON element present in the given path. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getObject' function fetches theobject. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getObject(json, $.name ) as name insert into OutputStream; This returns the object of the JSON input in the given path. The results are directed to the 'OutputStream' stream. getString (Function) This returns the string value of the JSON element present in the given path. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the JSON input from which the 'getString' function fetches the string value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getString(json, $.name ) as name insert into OutputStream; This returns the string value of the JSON input in the given path. The results are directed to the 'OutputStream' stream. isExists (Function) This method checks whether there is a JSON element present in the given path or not.If there is a valid JSON element in the given path, it returns 'true'. If there is no valid JSON element, it returns 'false' Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input in a given path, on which the function performs the search forJSON elements. STRING OBJECT No No path The path that contains the input JSON on which the function performs the search. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:isExists(json, $.name ) as name insert into OutputStream; This returns either true or false based on the existence of a JSON element in a given path. The results are directed to the 'OutputStream' stream. setElement (Function) This method allows to insert elements into a given JSON present in a specific path. If there is no valid path given, it returns the original JSON. Otherwise, it returns the new JSON. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT jsonelement, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input into which is this function inserts the new value. STRING OBJECT No No path The path on the JSON input which is used to insert the given element. STRING No No jsonelement The JSON element which is inserted by the function into the input JSON. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No No key The key which is used to insert the given element into the input JSON. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:setElement(json, $.name ) as name insert into OutputStream; This returns the JSON object present in the given path with the newly inserted JSONelement. The results are directed to the 'OutputStream' stream. toObject (Function) This method returns the JSON object related to a given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string from which the function generates the JSON object. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toJson(json) as jsonObject insert into OutputStream; This returns the JSON object corresponding to the given JSON string.The results aredirected to the 'OutputStream' stream. toString (Function) This method returns the JSON string corresponding to a given JSON object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object from which the function generates a JSON string. OBJECT No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toString(json) as jsonString insert into OutputStream; This returns the JSON string corresponding to a given JSON object. The results are directed to the 'OutputStream' stream. tokenize (Stream Processor) This tokenizes the given json according the path provided Syntax json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json that should be tokenized using the given path. STRING OBJECT No No path The path that is used to tokenize the given json STRING No No fail.on.missing.attribute If this parameter is set to 'true' and a json is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a json in the specified path results in the event being created with a 'null' value for the json element. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json. STRING Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenize(json, path) select jsonElement insert into OutputStream; This query performs a tokenization for the given json using the path specified. If the specified path provides a json array, it generates events for each element in that array by adding an additional attributes as the 'jsonElement' to the stream. e.g., jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" If we use the configuration in this example, it generates two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream. e.g., jsonInput - {name:\"John\",age:25}, path - \"$.age\" tokenizeAsObject (Stream Processor) This tokenizes the given JSON based on the path provided and returns the response as an object. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json that is tokenized using the given path. STRING OBJECT No No path The path of the input JSON that the function tokenizes. STRING No No fail.on.missing.attribute If this parameter is set to 'true' and a JSON is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a JSON in the specified path results in the event being created with a 'null' value for the json element. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path and the JSON. OBJECT Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select jsonElement insert into OutputStream; This query performs a tokenization for the given JSON using the path specified. If the specified path provides a JSON array, it generates events for each element in the specified json array by adding an additional attribute as the 'jsonElement' into the stream. e.g., jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" If we use the configuration in the above example, it generates two events with the attributes \"Mathematics\" and \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream e.g., jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"1.0.10"},{"location":"api/1.0.10/#api-docs-v1010","text":"","title":"API Docs - v1.0.10"},{"location":"api/1.0.10/#json","text":"","title":"Json"},{"location":"api/1.0.10/#getbool-function","text":"This method returns a 'boolean' value, either 'true' or 'false', based on the valuespecified against the JSON element present in the given path.In case there is no valid boolean value found in the given path, the method still returns 'false'. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the boolean value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getBool' function fetches theboolean value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getBool(json, $.name ) as name insert into OutputStream; This returns the boolean value of the JSON input in the given path. The results are directed to the 'OutputStream' stream.","title":"getBool (Function)"},{"location":"api/1.0.10/#getdouble-function","text":"This method returns the double value of the JSON element present in the given path. If there is no valid double value in the given path, the method returns 'null'. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getDouble' function fetches thedouble value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getDouble(json, $.name ) as name insert into OutputStream; This returns the double value of the given path. The results aredirected to the 'OutputStream' stream.","title":"getDouble (Function)"},{"location":"api/1.0.10/#getfloat-function","text":"This method returns the float value of the JSON element present in the given path.If there is no valid float value in the given path, the method returns 'null'. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getFloat' function fetches thevalue. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getFloat(json, $.name ) as name insert into OutputStream; This returns the float value of the JSON input in the given path. The results aredirected to the 'OutputStream' stream.","title":"getFloat (Function)"},{"location":"api/1.0.10/#getint-function","text":"This method returns the integer value of the JSON element present in the given path. If there is no valid integer value in the given path, the method returns 'null'. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getInt' function fetches theinteger value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getInt(json, $.name ) as name insert into OutputStream; This returns the integer value of the JSON input in the given path. The resultsare directed to the 'OutputStream' stream.","title":"getInt (Function)"},{"location":"api/1.0.10/#getlong-function","text":"This returns the long value of the JSON element present in the given path. Ifthere is no valid long value in the given path, the method returns 'null'. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the JSON element from which the 'getLong' functionfetches the long value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getLong(json, $.name ) as name insert into OutputStream; This returns the long value of the JSON input in the given path. The results aredirected to 'OutputStream' stream.","title":"getLong (Function)"},{"location":"api/1.0.10/#getobject-function","text":"This returns the object of the JSON element present in the given path. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getObject' function fetches theobject. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getObject(json, $.name ) as name insert into OutputStream; This returns the object of the JSON input in the given path. The results are directed to the 'OutputStream' stream.","title":"getObject (Function)"},{"location":"api/1.0.10/#getstring-function","text":"This returns the string value of the JSON element present in the given path. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the JSON input from which the 'getString' function fetches the string value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getString(json, $.name ) as name insert into OutputStream; This returns the string value of the JSON input in the given path. The results are directed to the 'OutputStream' stream.","title":"getString (Function)"},{"location":"api/1.0.10/#isexists-function","text":"This method checks whether there is a JSON element present in the given path or not.If there is a valid JSON element in the given path, it returns 'true'. If there is no valid JSON element, it returns 'false' Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input in a given path, on which the function performs the search forJSON elements. STRING OBJECT No No path The path that contains the input JSON on which the function performs the search. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:isExists(json, $.name ) as name insert into OutputStream; This returns either true or false based on the existence of a JSON element in a given path. The results are directed to the 'OutputStream' stream.","title":"isExists (Function)"},{"location":"api/1.0.10/#setelement-function","text":"This method allows to insert elements into a given JSON present in a specific path. If there is no valid path given, it returns the original JSON. Otherwise, it returns the new JSON. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT jsonelement, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input into which is this function inserts the new value. STRING OBJECT No No path The path on the JSON input which is used to insert the given element. STRING No No jsonelement The JSON element which is inserted by the function into the input JSON. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No No key The key which is used to insert the given element into the input JSON. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:setElement(json, $.name ) as name insert into OutputStream; This returns the JSON object present in the given path with the newly inserted JSONelement. The results are directed to the 'OutputStream' stream.","title":"setElement (Function)"},{"location":"api/1.0.10/#toobject-function","text":"This method returns the JSON object related to a given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string from which the function generates the JSON object. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toJson(json) as jsonObject insert into OutputStream; This returns the JSON object corresponding to the given JSON string.The results aredirected to the 'OutputStream' stream.","title":"toObject (Function)"},{"location":"api/1.0.10/#tostring-function","text":"This method returns the JSON string corresponding to a given JSON object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object from which the function generates a JSON string. OBJECT No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toString(json) as jsonString insert into OutputStream; This returns the JSON string corresponding to a given JSON object. The results are directed to the 'OutputStream' stream.","title":"toString (Function)"},{"location":"api/1.0.10/#tokenize-stream-processor","text":"This tokenizes the given json according the path provided Syntax json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json that should be tokenized using the given path. STRING OBJECT No No path The path that is used to tokenize the given json STRING No No fail.on.missing.attribute If this parameter is set to 'true' and a json is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a json in the specified path results in the event being created with a 'null' value for the json element. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json. STRING Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenize(json, path) select jsonElement insert into OutputStream; This query performs a tokenization for the given json using the path specified. If the specified path provides a json array, it generates events for each element in that array by adding an additional attributes as the 'jsonElement' to the stream. e.g., jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" If we use the configuration in this example, it generates two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream. e.g., jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"tokenize (Stream Processor)"},{"location":"api/1.0.10/#tokenizeasobject-stream-processor","text":"This tokenizes the given JSON based on the path provided and returns the response as an object. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json that is tokenized using the given path. STRING OBJECT No No path The path of the input JSON that the function tokenizes. STRING No No fail.on.missing.attribute If this parameter is set to 'true' and a JSON is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a JSON in the specified path results in the event being created with a 'null' value for the json element. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path and the JSON. OBJECT Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select jsonElement insert into OutputStream; This query performs a tokenization for the given JSON using the path specified. If the specified path provides a JSON array, it generates events for each element in the specified json array by adding an additional attribute as the 'jsonElement' into the stream. e.g., jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" If we use the configuration in the above example, it generates two events with the attributes \"Mathematics\" and \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream e.g., jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"tokenizeAsObject (Stream Processor)"},{"location":"api/1.0.11/","text":"API Docs - v1.0.11 Json getBool (Function) This method returns a 'boolean' value, either 'true' or 'false', based on the valuespecified against the JSON element present in the given path.In case there is no valid boolean value found in the given path, the method still returns 'false'. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the boolean value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getBool' function fetches theboolean value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getBool(json, $.name ) as name insert into OutputStream; This returns the boolean value of the JSON input in the given path. The results are directed to the 'OutputStream' stream. getDouble (Function) This method returns the double value of the JSON element present in the given path. If there is no valid double value in the given path, the method returns 'null'. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getDouble' function fetches thedouble value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getDouble(json, $.name ) as name insert into OutputStream; This returns the double value of the given path. The results aredirected to the 'OutputStream' stream. getFloat (Function) This method returns the float value of the JSON element present in the given path.If there is no valid float value in the given path, the method returns 'null'. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getFloat' function fetches thevalue. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getFloat(json, $.name ) as name insert into OutputStream; This returns the float value of the JSON input in the given path. The results aredirected to the 'OutputStream' stream. getInt (Function) This method returns the integer value of the JSON element present in the given path. If there is no valid integer value in the given path, the method returns 'null'. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getInt' function fetches theinteger value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getInt(json, $.name ) as name insert into OutputStream; This returns the integer value of the JSON input in the given path. The resultsare directed to the 'OutputStream' stream. getLong (Function) This returns the long value of the JSON element present in the given path. Ifthere is no valid long value in the given path, the method returns 'null'. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the JSON element from which the 'getLong' functionfetches the long value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getLong(json, $.name ) as name insert into OutputStream; This returns the long value of the JSON input in the given path. The results aredirected to 'OutputStream' stream. getObject (Function) This returns the object of the JSON element present in the given path. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getObject' function fetches theobject. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getObject(json, $.name ) as name insert into OutputStream; This returns the object of the JSON input in the given path. The results are directed to the 'OutputStream' stream. getString (Function) This returns the string value of the JSON element present in the given path. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the JSON input from which the 'getString' function fetches the string value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getString(json, $.name ) as name insert into OutputStream; This returns the string value of the JSON input in the given path. The results are directed to the 'OutputStream' stream. isExists (Function) This method checks whether there is a JSON element present in the given path or not.If there is a valid JSON element in the given path, it returns 'true'. If there is no valid JSON element, it returns 'false' Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input in a given path, on which the function performs the search forJSON elements. STRING OBJECT No No path The path that contains the input JSON on which the function performs the search. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:isExists(json, $.name ) as name insert into OutputStream; This returns either true or false based on the existence of a JSON element in a given path. The results are directed to the 'OutputStream' stream. setElement (Function) This method allows to insert elements into a given JSON present in a specific path. If there is no valid path given, it returns the original JSON. Otherwise, it returns the new JSON. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT jsonelement, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input into which is this function inserts the new value. STRING OBJECT No No path The path on the JSON input which is used to insert the given element. STRING No No jsonelement The JSON element which is inserted by the function into the input JSON. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No No key The key which is used to insert the given element into the input JSON. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:setElement(json, $.name ) as name insert into OutputStream; This returns the JSON object present in the given path with the newly inserted JSONelement. The results are directed to the 'OutputStream' stream. toObject (Function) This method returns the JSON object related to a given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string from which the function generates the JSON object. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toJson(json) as jsonObject insert into OutputStream; This returns the JSON object corresponding to the given JSON string.The results aredirected to the 'OutputStream' stream. toString (Function) This method returns the JSON string corresponding to a given JSON object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object from which the function generates a JSON string. OBJECT No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toString(json) as jsonString insert into OutputStream; This returns the JSON string corresponding to a given JSON object. The results are directed to the 'OutputStream' stream. tokenize (Stream Processor) This tokenizes the given json according the path provided Syntax json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json that should be tokenized using the given path. STRING OBJECT No No path The path that is used to tokenize the given json STRING No No fail.on.missing.attribute If this parameter is set to 'true' and a json is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a json in the specified path results in the event being created with a 'null' value for the json element. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json. STRING Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenize(json, path) select jsonElement insert into OutputStream; This query performs a tokenization for the given json using the path specified. If the specified path provides a json array, it generates events for each element in that array by adding an additional attributes as the 'jsonElement' to the stream. e.g., jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" If we use the configuration in this example, it generates two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream. e.g., jsonInput - {name:\"John\",age:25}, path - \"$.age\" tokenizeAsObject (Stream Processor) This tokenizes the given JSON based on the path provided and returns the response as an object. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json that is tokenized using the given path. STRING OBJECT No No path The path of the input JSON that the function tokenizes. STRING No No fail.on.missing.attribute If this parameter is set to 'true' and a JSON is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a JSON in the specified path results in the event being created with a 'null' value for the json element. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path and the JSON. OBJECT Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select jsonElement insert into OutputStream; This query performs a tokenization for the given JSON using the path specified. If the specified path provides a JSON array, it generates events for each element in the specified json array by adding an additional attribute as the 'jsonElement' into the stream. e.g., jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" If we use the configuration in the above example, it generates two events with the attributes \"Mathematics\" and \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream e.g., jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"1.0.11"},{"location":"api/1.0.11/#api-docs-v1011","text":"","title":"API Docs - v1.0.11"},{"location":"api/1.0.11/#json","text":"","title":"Json"},{"location":"api/1.0.11/#getbool-function","text":"This method returns a 'boolean' value, either 'true' or 'false', based on the valuespecified against the JSON element present in the given path.In case there is no valid boolean value found in the given path, the method still returns 'false'. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the boolean value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getBool' function fetches theboolean value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getBool(json, $.name ) as name insert into OutputStream; This returns the boolean value of the JSON input in the given path. The results are directed to the 'OutputStream' stream.","title":"getBool (Function)"},{"location":"api/1.0.11/#getdouble-function","text":"This method returns the double value of the JSON element present in the given path. If there is no valid double value in the given path, the method returns 'null'. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getDouble' function fetches thedouble value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getDouble(json, $.name ) as name insert into OutputStream; This returns the double value of the given path. The results aredirected to the 'OutputStream' stream.","title":"getDouble (Function)"},{"location":"api/1.0.11/#getfloat-function","text":"This method returns the float value of the JSON element present in the given path.If there is no valid float value in the given path, the method returns 'null'. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getFloat' function fetches thevalue. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getFloat(json, $.name ) as name insert into OutputStream; This returns the float value of the JSON input in the given path. The results aredirected to the 'OutputStream' stream.","title":"getFloat (Function)"},{"location":"api/1.0.11/#getint-function","text":"This method returns the integer value of the JSON element present in the given path. If there is no valid integer value in the given path, the method returns 'null'. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getInt' function fetches theinteger value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getInt(json, $.name ) as name insert into OutputStream; This returns the integer value of the JSON input in the given path. The resultsare directed to the 'OutputStream' stream.","title":"getInt (Function)"},{"location":"api/1.0.11/#getlong-function","text":"This returns the long value of the JSON element present in the given path. Ifthere is no valid long value in the given path, the method returns 'null'. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the JSON element from which the 'getLong' functionfetches the long value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getLong(json, $.name ) as name insert into OutputStream; This returns the long value of the JSON input in the given path. The results aredirected to 'OutputStream' stream.","title":"getLong (Function)"},{"location":"api/1.0.11/#getobject-function","text":"This returns the object of the JSON element present in the given path. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getObject' function fetches theobject. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getObject(json, $.name ) as name insert into OutputStream; This returns the object of the JSON input in the given path. The results are directed to the 'OutputStream' stream.","title":"getObject (Function)"},{"location":"api/1.0.11/#getstring-function","text":"This returns the string value of the JSON element present in the given path. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the JSON input from which the 'getString' function fetches the string value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getString(json, $.name ) as name insert into OutputStream; This returns the string value of the JSON input in the given path. The results are directed to the 'OutputStream' stream.","title":"getString (Function)"},{"location":"api/1.0.11/#isexists-function","text":"This method checks whether there is a JSON element present in the given path or not.If there is a valid JSON element in the given path, it returns 'true'. If there is no valid JSON element, it returns 'false' Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input in a given path, on which the function performs the search forJSON elements. STRING OBJECT No No path The path that contains the input JSON on which the function performs the search. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:isExists(json, $.name ) as name insert into OutputStream; This returns either true or false based on the existence of a JSON element in a given path. The results are directed to the 'OutputStream' stream.","title":"isExists (Function)"},{"location":"api/1.0.11/#setelement-function","text":"This method allows to insert elements into a given JSON present in a specific path. If there is no valid path given, it returns the original JSON. Otherwise, it returns the new JSON. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT jsonelement, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input into which is this function inserts the new value. STRING OBJECT No No path The path on the JSON input which is used to insert the given element. STRING No No jsonelement The JSON element which is inserted by the function into the input JSON. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No No key The key which is used to insert the given element into the input JSON. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:setElement(json, $.name ) as name insert into OutputStream; This returns the JSON object present in the given path with the newly inserted JSONelement. The results are directed to the 'OutputStream' stream.","title":"setElement (Function)"},{"location":"api/1.0.11/#toobject-function","text":"This method returns the JSON object related to a given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string from which the function generates the JSON object. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toJson(json) as jsonObject insert into OutputStream; This returns the JSON object corresponding to the given JSON string.The results aredirected to the 'OutputStream' stream.","title":"toObject (Function)"},{"location":"api/1.0.11/#tostring-function","text":"This method returns the JSON string corresponding to a given JSON object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object from which the function generates a JSON string. OBJECT No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toString(json) as jsonString insert into OutputStream; This returns the JSON string corresponding to a given JSON object. The results are directed to the 'OutputStream' stream.","title":"toString (Function)"},{"location":"api/1.0.11/#tokenize-stream-processor","text":"This tokenizes the given json according the path provided Syntax json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json that should be tokenized using the given path. STRING OBJECT No No path The path that is used to tokenize the given json STRING No No fail.on.missing.attribute If this parameter is set to 'true' and a json is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a json in the specified path results in the event being created with a 'null' value for the json element. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json. STRING Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenize(json, path) select jsonElement insert into OutputStream; This query performs a tokenization for the given json using the path specified. If the specified path provides a json array, it generates events for each element in that array by adding an additional attributes as the 'jsonElement' to the stream. e.g., jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" If we use the configuration in this example, it generates two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream. e.g., jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"tokenize (Stream Processor)"},{"location":"api/1.0.11/#tokenizeasobject-stream-processor","text":"This tokenizes the given JSON based on the path provided and returns the response as an object. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json that is tokenized using the given path. STRING OBJECT No No path The path of the input JSON that the function tokenizes. STRING No No fail.on.missing.attribute If this parameter is set to 'true' and a JSON is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a JSON in the specified path results in the event being created with a 'null' value for the json element. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path and the JSON. OBJECT Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select jsonElement insert into OutputStream; This query performs a tokenization for the given JSON using the path specified. If the specified path provides a JSON array, it generates events for each element in the specified json array by adding an additional attribute as the 'jsonElement' into the stream. e.g., jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" If we use the configuration in the above example, it generates two events with the attributes \"Mathematics\" and \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream e.g., jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"tokenizeAsObject (Stream Processor)"},{"location":"api/1.0.3/","text":"API Docs - v1.0.3 Json getBool (Function) This method will return the Boolean value of Json element corresponding to the given path. If there is no valid Boolean value at the given path, the method will return 'false' Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getBool(json, $.name ) as name insert into OutputStream; This will return the corresponding Boolean value to the given path getDouble (Function) This method will return the double value of Json element corresponding to the given path. If there is no valid Double value at the given path, the method will return 'null' Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getDouble(json, $.name ) as name insert into OutputStream; This will return the corresponding double value to the given path getFloat (Function) This method will return the Float value of the Json element corresponding to the given path. If there is no valid Float value at the given path, the method will return 'null' Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getFloat(json, $.name ) as name insert into OutputStream; This will return the corresponding Float value based on the given path getInt (Function) This method will return the Integer value of Json element corresponding to the given path. If there is no valid Integer value at the given path, the method will return 'null' Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getInt(json, $.name ) as name insert into OutputStream; This will return the corresponding integer value based on the given path getLong (Function) This method will return the Long value of the Json element corresponding to the given path. Ifthere is no valid Long value at the given path, the method will return 'null' Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getLong(json, $.name ) as name insert into OutputStream; This will return the corresponding Long value based on the given path getObject (Function) This method will return the object of Json element corresponding to the given path. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the object from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getObject(json, $.name ) as name insert into OutputStream; This will return the corresponding object to the given path getString (Function) This method will return the string value of Json element corresponding to the given path. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getString(json, $.name ) as name insert into OutputStream; This will return the corresponding string value to the given path isExists (Function) This method allows to check whether there is any json element in the given path or not. If there is a valid json element in the given path, it will return true. If there is no valid json element, it will return false Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used to search the element with the given path STRING OBJECT No No path The path which is used to search in the given input json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:isExists(json, $.name ) as name insert into OutputStream; This will return the true/false based existence of the given path setElement (Function) This method allows to insert elements to the given json based on the specified path. If there is no valid path given, it will return the original json. Otherwise it will return the new json Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT jsonelement, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used to insert the given value STRING OBJECT No No path The path which is used to insert the given element to the input json STRING No No jsonelement The json element which is inserted into the given input json STRING BOOL DOUBLE FLOAT INT LONG OBJECT No No key The key which is used to insert the given element to the input json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:setElement(json, $.name ) as name insert into OutputStream; This will return the corresponding json object based on the given path and json element toObject (Function) This method will return the json object related to given json string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid json string which is used to generate the returned json object STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toJson(json) as jsonObject insert into OutputStream; This will return the json object related to given json string toString (Function) This method will return the json string related to given json object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid json object which is used to generate the json string OBJECT No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:toString(json) as jsonString insert into OutputStream; This will return a json string related to given json object tokenize (Stream Processor) This will tokenize the given json according the path provided Syntax json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json which should be tokenized using the given path. STRING OBJECT No No path The path which is used to tokenize the given json STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json STRING Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenize(json, path) select jsonElement insert into OutputStream; This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",age:25}, path - \"$.age\" tokenizeAsObject (Stream Processor) This will tokenize the given json according the path provided and return the response as object Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json which should be tokenized using the given path. STRING OBJECT No No path The path which is used to tokenize the given json STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json OBJECT Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select jsonElement insert into OutputStream; This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"1.0.3"},{"location":"api/1.0.3/#api-docs-v103","text":"","title":"API Docs - v1.0.3"},{"location":"api/1.0.3/#json","text":"","title":"Json"},{"location":"api/1.0.3/#getbool-function","text":"This method will return the Boolean value of Json element corresponding to the given path. If there is no valid Boolean value at the given path, the method will return 'false' Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getBool(json, $.name ) as name insert into OutputStream; This will return the corresponding Boolean value to the given path","title":"getBool (Function)"},{"location":"api/1.0.3/#getdouble-function","text":"This method will return the double value of Json element corresponding to the given path. If there is no valid Double value at the given path, the method will return 'null' Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getDouble(json, $.name ) as name insert into OutputStream; This will return the corresponding double value to the given path","title":"getDouble (Function)"},{"location":"api/1.0.3/#getfloat-function","text":"This method will return the Float value of the Json element corresponding to the given path. If there is no valid Float value at the given path, the method will return 'null' Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getFloat(json, $.name ) as name insert into OutputStream; This will return the corresponding Float value based on the given path","title":"getFloat (Function)"},{"location":"api/1.0.3/#getint-function","text":"This method will return the Integer value of Json element corresponding to the given path. If there is no valid Integer value at the given path, the method will return 'null' Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getInt(json, $.name ) as name insert into OutputStream; This will return the corresponding integer value based on the given path","title":"getInt (Function)"},{"location":"api/1.0.3/#getlong-function","text":"This method will return the Long value of the Json element corresponding to the given path. Ifthere is no valid Long value at the given path, the method will return 'null' Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getLong(json, $.name ) as name insert into OutputStream; This will return the corresponding Long value based on the given path","title":"getLong (Function)"},{"location":"api/1.0.3/#getobject-function","text":"This method will return the object of Json element corresponding to the given path. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the object from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getObject(json, $.name ) as name insert into OutputStream; This will return the corresponding object to the given path","title":"getObject (Function)"},{"location":"api/1.0.3/#getstring-function","text":"This method will return the string value of Json element corresponding to the given path. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getString(json, $.name ) as name insert into OutputStream; This will return the corresponding string value to the given path","title":"getString (Function)"},{"location":"api/1.0.3/#isexists-function","text":"This method allows to check whether there is any json element in the given path or not. If there is a valid json element in the given path, it will return true. If there is no valid json element, it will return false Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used to search the element with the given path STRING OBJECT No No path The path which is used to search in the given input json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:isExists(json, $.name ) as name insert into OutputStream; This will return the true/false based existence of the given path","title":"isExists (Function)"},{"location":"api/1.0.3/#setelement-function","text":"This method allows to insert elements to the given json based on the specified path. If there is no valid path given, it will return the original json. Otherwise it will return the new json Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT jsonelement, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used to insert the given value STRING OBJECT No No path The path which is used to insert the given element to the input json STRING No No jsonelement The json element which is inserted into the given input json STRING BOOL DOUBLE FLOAT INT LONG OBJECT No No key The key which is used to insert the given element to the input json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:setElement(json, $.name ) as name insert into OutputStream; This will return the corresponding json object based on the given path and json element","title":"setElement (Function)"},{"location":"api/1.0.3/#toobject-function","text":"This method will return the json object related to given json string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid json string which is used to generate the returned json object STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toJson(json) as jsonObject insert into OutputStream; This will return the json object related to given json string","title":"toObject (Function)"},{"location":"api/1.0.3/#tostring-function","text":"This method will return the json string related to given json object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid json object which is used to generate the json string OBJECT No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:toString(json) as jsonString insert into OutputStream; This will return a json string related to given json object","title":"toString (Function)"},{"location":"api/1.0.3/#tokenize-stream-processor","text":"This will tokenize the given json according the path provided Syntax json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json which should be tokenized using the given path. STRING OBJECT No No path The path which is used to tokenize the given json STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json STRING Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenize(json, path) select jsonElement insert into OutputStream; This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"tokenize (Stream Processor)"},{"location":"api/1.0.3/#tokenizeasobject-stream-processor","text":"This will tokenize the given json according the path provided and return the response as object Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json which should be tokenized using the given path. STRING OBJECT No No path The path which is used to tokenize the given json STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json OBJECT Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select jsonElement insert into OutputStream; This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"tokenizeAsObject (Stream Processor)"},{"location":"api/1.0.4/","text":"API Docs - v1.0.4 Json getBool (Function) This method will return the Boolean value of Json element corresponding to the given path. If there is no valid Boolean value at the given path, the method will return 'false' Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getBool(json, $.name ) as name insert into OutputStream; This will return the corresponding Boolean value to the given path getDouble (Function) This method will return the double value of Json element corresponding to the given path. If there is no valid Double value at the given path, the method will return 'null' Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getDouble(json, $.name ) as name insert into OutputStream; This will return the corresponding double value to the given path getFloat (Function) This method will return the Float value of the Json element corresponding to the given path. If there is no valid Float value at the given path, the method will return 'null' Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getFloat(json, $.name ) as name insert into OutputStream; This will return the corresponding Float value based on the given path getInt (Function) This method will return the Integer value of Json element corresponding to the given path. If there is no valid Integer value at the given path, the method will return 'null' Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getInt(json, $.name ) as name insert into OutputStream; This will return the corresponding integer value based on the given path getLong (Function) This method will return the Long value of the Json element corresponding to the given path. Ifthere is no valid Long value at the given path, the method will return 'null' Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getLong(json, $.name ) as name insert into OutputStream; This will return the corresponding Long value based on the given path getObject (Function) This method will return the object of Json element corresponding to the given path. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the object from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getObject(json, $.name ) as name insert into OutputStream; This will return the corresponding object to the given path getString (Function) This method will return the string value of Json element corresponding to the given path. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getString(json, $.name ) as name insert into OutputStream; This will return the corresponding string value to the given path isExists (Function) This method allows to check whether there is any json element in the given path or not. If there is a valid json element in the given path, it will return true. If there is no valid json element, it will return false Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used to search the element with the given path STRING OBJECT No No path The path which is used to search in the given input json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:isExists(json, $.name ) as name insert into OutputStream; This will return the true/false based existence of the given path setElement (Function) This method allows to insert elements to the given json based on the specified path. If there is no valid path given, it will return the original json. Otherwise it will return the new json Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT jsonelement, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used to insert the given value STRING OBJECT No No path The path which is used to insert the given element to the input json STRING No No jsonelement The json element which is inserted into the given input json STRING BOOL DOUBLE FLOAT INT LONG OBJECT No No key The key which is used to insert the given element to the input json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:setElement(json, $.name ) as name insert into OutputStream; This will return the corresponding json object based on the given path and json element toObject (Function) This method will return the json object related to given json string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid json string which is used to generate the returned json object STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toJson(json) as jsonObject insert into OutputStream; This will return the json object related to given json string toString (Function) This method will return the json string related to given json object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid json object which is used to generate the json string OBJECT No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:toString(json) as jsonString insert into OutputStream; This will return a json string related to given json object tokenize (Stream Processor) This will tokenize the given json according the path provided Syntax json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json which should be tokenized using the given path. STRING OBJECT No No path The path which is used to tokenize the given json STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json STRING Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenize(json, path) select jsonElement insert into OutputStream; This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",age:25}, path - \"$.age\" tokenizeAsObject (Stream Processor) This will tokenize the given json according the path provided and return the response as object Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json which should be tokenized using the given path. STRING OBJECT No No path The path which is used to tokenize the given json STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json OBJECT Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select jsonElement insert into OutputStream; This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"1.0.4"},{"location":"api/1.0.4/#api-docs-v104","text":"","title":"API Docs - v1.0.4"},{"location":"api/1.0.4/#json","text":"","title":"Json"},{"location":"api/1.0.4/#getbool-function","text":"This method will return the Boolean value of Json element corresponding to the given path. If there is no valid Boolean value at the given path, the method will return 'false' Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getBool(json, $.name ) as name insert into OutputStream; This will return the corresponding Boolean value to the given path","title":"getBool (Function)"},{"location":"api/1.0.4/#getdouble-function","text":"This method will return the double value of Json element corresponding to the given path. If there is no valid Double value at the given path, the method will return 'null' Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getDouble(json, $.name ) as name insert into OutputStream; This will return the corresponding double value to the given path","title":"getDouble (Function)"},{"location":"api/1.0.4/#getfloat-function","text":"This method will return the Float value of the Json element corresponding to the given path. If there is no valid Float value at the given path, the method will return 'null' Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getFloat(json, $.name ) as name insert into OutputStream; This will return the corresponding Float value based on the given path","title":"getFloat (Function)"},{"location":"api/1.0.4/#getint-function","text":"This method will return the Integer value of Json element corresponding to the given path. If there is no valid Integer value at the given path, the method will return 'null' Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getInt(json, $.name ) as name insert into OutputStream; This will return the corresponding integer value based on the given path","title":"getInt (Function)"},{"location":"api/1.0.4/#getlong-function","text":"This method will return the Long value of the Json element corresponding to the given path. Ifthere is no valid Long value at the given path, the method will return 'null' Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getLong(json, $.name ) as name insert into OutputStream; This will return the corresponding Long value based on the given path","title":"getLong (Function)"},{"location":"api/1.0.4/#getobject-function","text":"This method will return the object of Json element corresponding to the given path. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the object from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getObject(json, $.name ) as name insert into OutputStream; This will return the corresponding object to the given path","title":"getObject (Function)"},{"location":"api/1.0.4/#getstring-function","text":"This method will return the string value of Json element corresponding to the given path. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getString(json, $.name ) as name insert into OutputStream; This will return the corresponding string value to the given path","title":"getString (Function)"},{"location":"api/1.0.4/#isexists-function","text":"This method allows to check whether there is any json element in the given path or not. If there is a valid json element in the given path, it will return true. If there is no valid json element, it will return false Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used to search the element with the given path STRING OBJECT No No path The path which is used to search in the given input json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:isExists(json, $.name ) as name insert into OutputStream; This will return the true/false based existence of the given path","title":"isExists (Function)"},{"location":"api/1.0.4/#setelement-function","text":"This method allows to insert elements to the given json based on the specified path. If there is no valid path given, it will return the original json. Otherwise it will return the new json Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT jsonelement, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used to insert the given value STRING OBJECT No No path The path which is used to insert the given element to the input json STRING No No jsonelement The json element which is inserted into the given input json STRING BOOL DOUBLE FLOAT INT LONG OBJECT No No key The key which is used to insert the given element to the input json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:setElement(json, $.name ) as name insert into OutputStream; This will return the corresponding json object based on the given path and json element","title":"setElement (Function)"},{"location":"api/1.0.4/#toobject-function","text":"This method will return the json object related to given json string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid json string which is used to generate the returned json object STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toJson(json) as jsonObject insert into OutputStream; This will return the json object related to given json string","title":"toObject (Function)"},{"location":"api/1.0.4/#tostring-function","text":"This method will return the json string related to given json object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid json object which is used to generate the json string OBJECT No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:toString(json) as jsonString insert into OutputStream; This will return a json string related to given json object","title":"toString (Function)"},{"location":"api/1.0.4/#tokenize-stream-processor","text":"This will tokenize the given json according the path provided Syntax json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json which should be tokenized using the given path. STRING OBJECT No No path The path which is used to tokenize the given json STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json STRING Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenize(json, path) select jsonElement insert into OutputStream; This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"tokenize (Stream Processor)"},{"location":"api/1.0.4/#tokenizeasobject-stream-processor","text":"This will tokenize the given json according the path provided and return the response as object Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json which should be tokenized using the given path. STRING OBJECT No No path The path which is used to tokenize the given json STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json OBJECT Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select jsonElement insert into OutputStream; This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"tokenizeAsObject (Stream Processor)"},{"location":"api/1.0.5/","text":"API Docs - v1.0.5 Json getBool (Function) This method will return the Boolean value of Json element corresponding to the given path. If there is no valid Boolean value at the given path, the method will return 'false' Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getBool(json, $.name ) as name insert into OutputStream; This will return the corresponding Boolean value to the given path getDouble (Function) This method will return the double value of Json element corresponding to the given path. If there is no valid Double value at the given path, the method will return 'null' Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getDouble(json, $.name ) as name insert into OutputStream; This will return the corresponding double value to the given path getFloat (Function) This method will return the Float value of the Json element corresponding to the given path. If there is no valid Float value at the given path, the method will return 'null' Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getFloat(json, $.name ) as name insert into OutputStream; This will return the corresponding Float value based on the given path getInt (Function) This method will return the Integer value of Json element corresponding to the given path. If there is no valid Integer value at the given path, the method will return 'null' Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getInt(json, $.name ) as name insert into OutputStream; This will return the corresponding integer value based on the given path getLong (Function) This method will return the Long value of the Json element corresponding to the given path. Ifthere is no valid Long value at the given path, the method will return 'null' Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getLong(json, $.name ) as name insert into OutputStream; This will return the corresponding Long value based on the given path getObject (Function) This method will return the object of Json element corresponding to the given path. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the object from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getObject(json, $.name ) as name insert into OutputStream; This will return the corresponding object to the given path getString (Function) This method will return the string value of Json element corresponding to the given path. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getString(json, $.name ) as name insert into OutputStream; This will return the corresponding string value to the given path isExists (Function) This method allows to check whether there is any json element in the given path or not. If there is a valid json element in the given path, it will return true. If there is no valid json element, it will return false Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used to search the element with the given path STRING OBJECT No No path The path which is used to search in the given input json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:isExists(json, $.name ) as name insert into OutputStream; This will return the true/false based existence of the given path setElement (Function) This method allows to insert elements to the given json based on the specified path. If there is no valid path given, it will return the original json. Otherwise it will return the new json Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT jsonelement, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used to insert the given value STRING OBJECT No No path The path which is used to insert the given element to the input json STRING No No jsonelement The json element which is inserted into the given input json STRING BOOL DOUBLE FLOAT INT LONG OBJECT No No key The key which is used to insert the given element to the input json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:setElement(json, $.name ) as name insert into OutputStream; This will return the corresponding json object based on the given path and json element toObject (Function) This method will return the json object related to given json string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid json string which is used to generate the returned json object STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toJson(json) as jsonObject insert into OutputStream; This will return the json object related to given json string toString (Function) This method will return the json string related to given json object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid json object which is used to generate the json string OBJECT No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:toString(json) as jsonString insert into OutputStream; This will return a json string related to given json object tokenize (Stream Processor) This will tokenize the given json according the path provided Syntax json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json which should be tokenized using the given path. STRING OBJECT No No path The path which is used to tokenize the given json STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json STRING Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenize(json, path) select jsonElement insert into OutputStream; This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",age:25}, path - \"$.age\" tokenizeAsObject (Stream Processor) This will tokenize the given json according the path provided and return the response as object Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json which should be tokenized using the given path. STRING OBJECT No No path The path which is used to tokenize the given json STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json OBJECT Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select jsonElement insert into OutputStream; This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"1.0.5"},{"location":"api/1.0.5/#api-docs-v105","text":"","title":"API Docs - v1.0.5"},{"location":"api/1.0.5/#json","text":"","title":"Json"},{"location":"api/1.0.5/#getbool-function","text":"This method will return the Boolean value of Json element corresponding to the given path. If there is no valid Boolean value at the given path, the method will return 'false' Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getBool(json, $.name ) as name insert into OutputStream; This will return the corresponding Boolean value to the given path","title":"getBool (Function)"},{"location":"api/1.0.5/#getdouble-function","text":"This method will return the double value of Json element corresponding to the given path. If there is no valid Double value at the given path, the method will return 'null' Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getDouble(json, $.name ) as name insert into OutputStream; This will return the corresponding double value to the given path","title":"getDouble (Function)"},{"location":"api/1.0.5/#getfloat-function","text":"This method will return the Float value of the Json element corresponding to the given path. If there is no valid Float value at the given path, the method will return 'null' Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getFloat(json, $.name ) as name insert into OutputStream; This will return the corresponding Float value based on the given path","title":"getFloat (Function)"},{"location":"api/1.0.5/#getint-function","text":"This method will return the Integer value of Json element corresponding to the given path. If there is no valid Integer value at the given path, the method will return 'null' Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getInt(json, $.name ) as name insert into OutputStream; This will return the corresponding integer value based on the given path","title":"getInt (Function)"},{"location":"api/1.0.5/#getlong-function","text":"This method will return the Long value of the Json element corresponding to the given path. Ifthere is no valid Long value at the given path, the method will return 'null' Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getLong(json, $.name ) as name insert into OutputStream; This will return the corresponding Long value based on the given path","title":"getLong (Function)"},{"location":"api/1.0.5/#getobject-function","text":"This method will return the object of Json element corresponding to the given path. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the object from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getObject(json, $.name ) as name insert into OutputStream; This will return the corresponding object to the given path","title":"getObject (Function)"},{"location":"api/1.0.5/#getstring-function","text":"This method will return the string value of Json element corresponding to the given path. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getString(json, $.name ) as name insert into OutputStream; This will return the corresponding string value to the given path","title":"getString (Function)"},{"location":"api/1.0.5/#isexists-function","text":"This method allows to check whether there is any json element in the given path or not. If there is a valid json element in the given path, it will return true. If there is no valid json element, it will return false Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used to search the element with the given path STRING OBJECT No No path The path which is used to search in the given input json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:isExists(json, $.name ) as name insert into OutputStream; This will return the true/false based existence of the given path","title":"isExists (Function)"},{"location":"api/1.0.5/#setelement-function","text":"This method allows to insert elements to the given json based on the specified path. If there is no valid path given, it will return the original json. Otherwise it will return the new json Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT jsonelement, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used to insert the given value STRING OBJECT No No path The path which is used to insert the given element to the input json STRING No No jsonelement The json element which is inserted into the given input json STRING BOOL DOUBLE FLOAT INT LONG OBJECT No No key The key which is used to insert the given element to the input json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:setElement(json, $.name ) as name insert into OutputStream; This will return the corresponding json object based on the given path and json element","title":"setElement (Function)"},{"location":"api/1.0.5/#toobject-function","text":"This method will return the json object related to given json string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid json string which is used to generate the returned json object STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toJson(json) as jsonObject insert into OutputStream; This will return the json object related to given json string","title":"toObject (Function)"},{"location":"api/1.0.5/#tostring-function","text":"This method will return the json string related to given json object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid json object which is used to generate the json string OBJECT No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:toString(json) as jsonString insert into OutputStream; This will return a json string related to given json object","title":"toString (Function)"},{"location":"api/1.0.5/#tokenize-stream-processor","text":"This will tokenize the given json according the path provided Syntax json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json which should be tokenized using the given path. STRING OBJECT No No path The path which is used to tokenize the given json STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json STRING Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenize(json, path) select jsonElement insert into OutputStream; This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"tokenize (Stream Processor)"},{"location":"api/1.0.5/#tokenizeasobject-stream-processor","text":"This will tokenize the given json according the path provided and return the response as object Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json which should be tokenized using the given path. STRING OBJECT No No path The path which is used to tokenize the given json STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json OBJECT Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select jsonElement insert into OutputStream; This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"tokenizeAsObject (Stream Processor)"},{"location":"api/1.0.6/","text":"API Docs - v1.0.6 Json getBool (Function) This method will return the Boolean value of Json element corresponding to the given path. If there is no valid Boolean value at the given path, the method will return 'false' Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getBool(json, $.name ) as name insert into OutputStream; This will return the corresponding Boolean value to the given path getDouble (Function) This method will return the double value of Json element corresponding to the given path. If there is no valid Double value at the given path, the method will return 'null' Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getDouble(json, $.name ) as name insert into OutputStream; This will return the corresponding double value to the given path getFloat (Function) This method will return the Float value of the Json element corresponding to the given path. If there is no valid Float value at the given path, the method will return 'null' Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getFloat(json, $.name ) as name insert into OutputStream; This will return the corresponding Float value based on the given path getInt (Function) This method will return the Integer value of Json element corresponding to the given path. If there is no valid Integer value at the given path, the method will return 'null' Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getInt(json, $.name ) as name insert into OutputStream; This will return the corresponding integer value based on the given path getLong (Function) This method will return the Long value of the Json element corresponding to the given path. Ifthere is no valid Long value at the given path, the method will return 'null' Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getLong(json, $.name ) as name insert into OutputStream; This will return the corresponding Long value based on the given path getObject (Function) This method will return the object of Json element corresponding to the given path. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the object from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getObject(json, $.name ) as name insert into OutputStream; This will return the corresponding object to the given path getString (Function) This method will return the string value of Json element corresponding to the given path. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getString(json, $.name ) as name insert into OutputStream; This will return the corresponding string value to the given path isExists (Function) This method allows to check whether there is any json element in the given path or not. If there is a valid json element in the given path, it will return true. If there is no valid json element, it will return false Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used to search the element with the given path STRING OBJECT No No path The path which is used to search in the given input json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:isExists(json, $.name ) as name insert into OutputStream; This will return the true/false based existence of the given path setElement (Function) This method allows to insert elements to the given json based on the specified path. If there is no valid path given, it will return the original json. Otherwise it will return the new json Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT jsonelement, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used to insert the given value STRING OBJECT No No path The path which is used to insert the given element to the input json STRING No No jsonelement The json element which is inserted into the given input json STRING BOOL DOUBLE FLOAT INT LONG OBJECT No No key The key which is used to insert the given element to the input json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:setElement(json, $.name ) as name insert into OutputStream; This will return the corresponding json object based on the given path and json element toObject (Function) This method will return the json object related to given json string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid json string which is used to generate the returned json object STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toJson(json) as jsonObject insert into OutputStream; This will return the json object related to given json string toString (Function) This method will return the json string related to given json object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid json object which is used to generate the json string OBJECT No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:toString(json) as jsonString insert into OutputStream; This will return a json string related to given json object tokenize (Stream Processor) This will tokenize the given json according the path provided Syntax json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json which should be tokenized using the given path. STRING OBJECT No No path The path which is used to tokenize the given json STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json STRING Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenize(json, path) select jsonElement insert into OutputStream; This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",age:25}, path - \"$.age\" tokenizeAsObject (Stream Processor) This will tokenize the given json according the path provided and return the response as object Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json which should be tokenized using the given path. STRING OBJECT No No path The path which is used to tokenize the given json STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json OBJECT Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select jsonElement insert into OutputStream; This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"1.0.6"},{"location":"api/1.0.6/#api-docs-v106","text":"","title":"API Docs - v1.0.6"},{"location":"api/1.0.6/#json","text":"","title":"Json"},{"location":"api/1.0.6/#getbool-function","text":"This method will return the Boolean value of Json element corresponding to the given path. If there is no valid Boolean value at the given path, the method will return 'false' Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getBool(json, $.name ) as name insert into OutputStream; This will return the corresponding Boolean value to the given path","title":"getBool (Function)"},{"location":"api/1.0.6/#getdouble-function","text":"This method will return the double value of Json element corresponding to the given path. If there is no valid Double value at the given path, the method will return 'null' Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getDouble(json, $.name ) as name insert into OutputStream; This will return the corresponding double value to the given path","title":"getDouble (Function)"},{"location":"api/1.0.6/#getfloat-function","text":"This method will return the Float value of the Json element corresponding to the given path. If there is no valid Float value at the given path, the method will return 'null' Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getFloat(json, $.name ) as name insert into OutputStream; This will return the corresponding Float value based on the given path","title":"getFloat (Function)"},{"location":"api/1.0.6/#getint-function","text":"This method will return the Integer value of Json element corresponding to the given path. If there is no valid Integer value at the given path, the method will return 'null' Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getInt(json, $.name ) as name insert into OutputStream; This will return the corresponding integer value based on the given path","title":"getInt (Function)"},{"location":"api/1.0.6/#getlong-function","text":"This method will return the Long value of the Json element corresponding to the given path. Ifthere is no valid Long value at the given path, the method will return 'null' Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getLong(json, $.name ) as name insert into OutputStream; This will return the corresponding Long value based on the given path","title":"getLong (Function)"},{"location":"api/1.0.6/#getobject-function","text":"This method will return the object of Json element corresponding to the given path. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the object from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getObject(json, $.name ) as name insert into OutputStream; This will return the corresponding object to the given path","title":"getObject (Function)"},{"location":"api/1.0.6/#getstring-function","text":"This method will return the string value of Json element corresponding to the given path. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getString(json, $.name ) as name insert into OutputStream; This will return the corresponding string value to the given path","title":"getString (Function)"},{"location":"api/1.0.6/#isexists-function","text":"This method allows to check whether there is any json element in the given path or not. If there is a valid json element in the given path, it will return true. If there is no valid json element, it will return false Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used to search the element with the given path STRING OBJECT No No path The path which is used to search in the given input json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:isExists(json, $.name ) as name insert into OutputStream; This will return the true/false based existence of the given path","title":"isExists (Function)"},{"location":"api/1.0.6/#setelement-function","text":"This method allows to insert elements to the given json based on the specified path. If there is no valid path given, it will return the original json. Otherwise it will return the new json Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT jsonelement, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used to insert the given value STRING OBJECT No No path The path which is used to insert the given element to the input json STRING No No jsonelement The json element which is inserted into the given input json STRING BOOL DOUBLE FLOAT INT LONG OBJECT No No key The key which is used to insert the given element to the input json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:setElement(json, $.name ) as name insert into OutputStream; This will return the corresponding json object based on the given path and json element","title":"setElement (Function)"},{"location":"api/1.0.6/#toobject-function","text":"This method will return the json object related to given json string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid json string which is used to generate the returned json object STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toJson(json) as jsonObject insert into OutputStream; This will return the json object related to given json string","title":"toObject (Function)"},{"location":"api/1.0.6/#tostring-function","text":"This method will return the json string related to given json object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid json object which is used to generate the json string OBJECT No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:toString(json) as jsonString insert into OutputStream; This will return a json string related to given json object","title":"toString (Function)"},{"location":"api/1.0.6/#tokenize-stream-processor","text":"This will tokenize the given json according the path provided Syntax json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json which should be tokenized using the given path. STRING OBJECT No No path The path which is used to tokenize the given json STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json STRING Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenize(json, path) select jsonElement insert into OutputStream; This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"tokenize (Stream Processor)"},{"location":"api/1.0.6/#tokenizeasobject-stream-processor","text":"This will tokenize the given json according the path provided and return the response as object Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json which should be tokenized using the given path. STRING OBJECT No No path The path which is used to tokenize the given json STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json OBJECT Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select jsonElement insert into OutputStream; This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"tokenizeAsObject (Stream Processor)"},{"location":"api/1.0.7/","text":"API Docs - v1.0.7 Json getBool (Function) This method will return the Boolean value of Json element corresponding to the given path. If there is no valid Boolean value at the given path, the method will return 'false' Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getBool(json, $.name ) as name insert into OutputStream; This will return the corresponding Boolean value to the given path getDouble (Function) This method will return the double value of Json element corresponding to the given path. If there is no valid Double value at the given path, the method will return 'null' Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getDouble(json, $.name ) as name insert into OutputStream; This will return the corresponding double value to the given path getFloat (Function) This method will return the Float value of the Json element corresponding to the given path. If there is no valid Float value at the given path, the method will return 'null' Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getFloat(json, $.name ) as name insert into OutputStream; This will return the corresponding Float value based on the given path getInt (Function) This method will return the Integer value of Json element corresponding to the given path. If there is no valid Integer value at the given path, the method will return 'null' Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getInt(json, $.name ) as name insert into OutputStream; This will return the corresponding integer value based on the given path getLong (Function) This method will return the Long value of the Json element corresponding to the given path. Ifthere is no valid Long value at the given path, the method will return 'null' Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getLong(json, $.name ) as name insert into OutputStream; This will return the corresponding Long value based on the given path getObject (Function) This method will return the object of Json element corresponding to the given path. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the object from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getObject(json, $.name ) as name insert into OutputStream; This will return the corresponding object to the given path getString (Function) This method will return the string value of Json element corresponding to the given path. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getString(json, $.name ) as name insert into OutputStream; This will return the corresponding string value to the given path isExists (Function) This method allows to check whether there is any json element in the given path or not. If there is a valid json element in the given path, it will return true. If there is no valid json element, it will return false Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used to search the element with the given path STRING OBJECT No No path The path which is used to search in the given input json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:isExists(json, $.name ) as name insert into OutputStream; This will return the true/false based existence of the given path setElement (Function) This method allows to insert elements to the given json based on the specified path. If there is no valid path given, it will return the original json. Otherwise it will return the new json Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT jsonelement, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used to insert the given value STRING OBJECT No No path The path which is used to insert the given element to the input json STRING No No jsonelement The json element which is inserted into the given input json STRING BOOL DOUBLE FLOAT INT LONG OBJECT No No key The key which is used to insert the given element to the input json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:setElement(json, $.name ) as name insert into OutputStream; This will return the corresponding json object based on the given path and json element toObject (Function) This method will return the json object related to given json string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid json string which is used to generate the returned json object STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toJson(json) as jsonObject insert into OutputStream; This will return the json object related to given json string toString (Function) This method will return the json string related to given json object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid json object which is used to generate the json string OBJECT No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:toString(json) as jsonString insert into OutputStream; This will return a json string related to given json object tokenize (Stream Processor) This will tokenize the given json according the path provided Syntax json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json which should be tokenized using the given path. STRING OBJECT No No path The path which is used to tokenize the given json STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json STRING Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenize(json, path) select jsonElement insert into OutputStream; This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",age:25}, path - \"$.age\" tokenizeAsObject (Stream Processor) This will tokenize the given json according the path provided and return the response as object Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json which should be tokenized using the given path. STRING OBJECT No No path The path which is used to tokenize the given json STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json OBJECT Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select jsonElement insert into OutputStream; This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"1.0.7"},{"location":"api/1.0.7/#api-docs-v107","text":"","title":"API Docs - v1.0.7"},{"location":"api/1.0.7/#json","text":"","title":"Json"},{"location":"api/1.0.7/#getbool-function","text":"This method will return the Boolean value of Json element corresponding to the given path. If there is no valid Boolean value at the given path, the method will return 'false' Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getBool(json, $.name ) as name insert into OutputStream; This will return the corresponding Boolean value to the given path","title":"getBool (Function)"},{"location":"api/1.0.7/#getdouble-function","text":"This method will return the double value of Json element corresponding to the given path. If there is no valid Double value at the given path, the method will return 'null' Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getDouble(json, $.name ) as name insert into OutputStream; This will return the corresponding double value to the given path","title":"getDouble (Function)"},{"location":"api/1.0.7/#getfloat-function","text":"This method will return the Float value of the Json element corresponding to the given path. If there is no valid Float value at the given path, the method will return 'null' Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getFloat(json, $.name ) as name insert into OutputStream; This will return the corresponding Float value based on the given path","title":"getFloat (Function)"},{"location":"api/1.0.7/#getint-function","text":"This method will return the Integer value of Json element corresponding to the given path. If there is no valid Integer value at the given path, the method will return 'null' Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getInt(json, $.name ) as name insert into OutputStream; This will return the corresponding integer value based on the given path","title":"getInt (Function)"},{"location":"api/1.0.7/#getlong-function","text":"This method will return the Long value of the Json element corresponding to the given path. Ifthere is no valid Long value at the given path, the method will return 'null' Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getLong(json, $.name ) as name insert into OutputStream; This will return the corresponding Long value based on the given path","title":"getLong (Function)"},{"location":"api/1.0.7/#getobject-function","text":"This method will return the object of Json element corresponding to the given path. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the object from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getObject(json, $.name ) as name insert into OutputStream; This will return the corresponding object to the given path","title":"getObject (Function)"},{"location":"api/1.0.7/#getstring-function","text":"This method will return the string value of Json element corresponding to the given path. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getString(json, $.name ) as name insert into OutputStream; This will return the corresponding string value to the given path","title":"getString (Function)"},{"location":"api/1.0.7/#isexists-function","text":"This method allows to check whether there is any json element in the given path or not. If there is a valid json element in the given path, it will return true. If there is no valid json element, it will return false Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used to search the element with the given path STRING OBJECT No No path The path which is used to search in the given input json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:isExists(json, $.name ) as name insert into OutputStream; This will return the true/false based existence of the given path","title":"isExists (Function)"},{"location":"api/1.0.7/#setelement-function","text":"This method allows to insert elements to the given json based on the specified path. If there is no valid path given, it will return the original json. Otherwise it will return the new json Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT jsonelement, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used to insert the given value STRING OBJECT No No path The path which is used to insert the given element to the input json STRING No No jsonelement The json element which is inserted into the given input json STRING BOOL DOUBLE FLOAT INT LONG OBJECT No No key The key which is used to insert the given element to the input json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:setElement(json, $.name ) as name insert into OutputStream; This will return the corresponding json object based on the given path and json element","title":"setElement (Function)"},{"location":"api/1.0.7/#toobject-function","text":"This method will return the json object related to given json string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid json string which is used to generate the returned json object STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toJson(json) as jsonObject insert into OutputStream; This will return the json object related to given json string","title":"toObject (Function)"},{"location":"api/1.0.7/#tostring-function","text":"This method will return the json string related to given json object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid json object which is used to generate the json string OBJECT No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:toString(json) as jsonString insert into OutputStream; This will return a json string related to given json object","title":"toString (Function)"},{"location":"api/1.0.7/#tokenize-stream-processor","text":"This will tokenize the given json according the path provided Syntax json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json which should be tokenized using the given path. STRING OBJECT No No path The path which is used to tokenize the given json STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json STRING Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenize(json, path) select jsonElement insert into OutputStream; This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"tokenize (Stream Processor)"},{"location":"api/1.0.7/#tokenizeasobject-stream-processor","text":"This will tokenize the given json according the path provided and return the response as object Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json which should be tokenized using the given path. STRING OBJECT No No path The path which is used to tokenize the given json STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json OBJECT Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select jsonElement insert into OutputStream; This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"tokenizeAsObject (Stream Processor)"},{"location":"api/1.0.8/","text":"API Docs - v1.0.8 Json getBool (Function) This method will return the Boolean value of Json element corresponding to the given path. If there is no valid Boolean value at the given path, the method will return 'false' Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getBool(json, $.name ) as name insert into OutputStream; This will return the corresponding Boolean value to the given path getDouble (Function) This method will return the double value of Json element corresponding to the given path. If there is no valid Double value at the given path, the method will return 'null' Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getDouble(json, $.name ) as name insert into OutputStream; This will return the corresponding double value to the given path getFloat (Function) This method will return the Float value of the Json element corresponding to the given path. If there is no valid Float value at the given path, the method will return 'null' Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getFloat(json, $.name ) as name insert into OutputStream; This will return the corresponding Float value based on the given path getInt (Function) This method will return the Integer value of Json element corresponding to the given path. If there is no valid Integer value at the given path, the method will return 'null' Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getInt(json, $.name ) as name insert into OutputStream; This will return the corresponding integer value based on the given path getLong (Function) This method will return the Long value of the Json element corresponding to the given path. Ifthere is no valid Long value at the given path, the method will return 'null' Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getLong(json, $.name ) as name insert into OutputStream; This will return the corresponding Long value based on the given path getObject (Function) This method will return the object of Json element corresponding to the given path. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the object from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getObject(json, $.name ) as name insert into OutputStream; This will return the corresponding object to the given path getString (Function) This method will return the string value of Json element corresponding to the given path. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getString(json, $.name ) as name insert into OutputStream; This will return the corresponding string value to the given path isExists (Function) This method allows to check whether there is any json element in the given path or not. If there is a valid json element in the given path, it will return true. If there is no valid json element, it will return false Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used to search the element with the given path STRING OBJECT No No path The path which is used to search in the given input json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:isExists(json, $.name ) as name insert into OutputStream; This will return the true/false based existence of the given path setElement (Function) This method allows to insert elements to the given json based on the specified path. If there is no valid path given, it will return the original json. Otherwise it will return the new json Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT jsonelement, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used to insert the given value STRING OBJECT No No path The path which is used to insert the given element to the input json STRING No No jsonelement The json element which is inserted into the given input json STRING BOOL DOUBLE FLOAT INT LONG OBJECT No No key The key which is used to insert the given element to the input json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:setElement(json, $.name ) as name insert into OutputStream; This will return the corresponding json object based on the given path and json element toObject (Function) This method will return the json object related to given json string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid json string which is used to generate the returned json object STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toJson(json) as jsonObject insert into OutputStream; This will return the json object related to given json string toString (Function) This method will return the json string related to given json object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid json object which is used to generate the json string OBJECT No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:toString(json) as jsonString insert into OutputStream; This will return a json string related to given json object tokenize (Stream Processor) This will tokenize the given json according the path provided Syntax json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json which should be tokenized using the given path. STRING OBJECT No No path The path which is used to tokenize the given json STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json STRING Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenize(json, path) select jsonElement insert into OutputStream; This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",age:25}, path - \"$.age\" tokenizeAsObject (Stream Processor) This will tokenize the given json according the path provided and return the response as object Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json which should be tokenized using the given path. STRING OBJECT No No path The path which is used to tokenize the given json STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json OBJECT Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select jsonElement insert into OutputStream; This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"1.0.8"},{"location":"api/1.0.8/#api-docs-v108","text":"","title":"API Docs - v1.0.8"},{"location":"api/1.0.8/#json","text":"","title":"Json"},{"location":"api/1.0.8/#getbool-function","text":"This method will return the Boolean value of Json element corresponding to the given path. If there is no valid Boolean value at the given path, the method will return 'false' Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getBool(json, $.name ) as name insert into OutputStream; This will return the corresponding Boolean value to the given path","title":"getBool (Function)"},{"location":"api/1.0.8/#getdouble-function","text":"This method will return the double value of Json element corresponding to the given path. If there is no valid Double value at the given path, the method will return 'null' Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getDouble(json, $.name ) as name insert into OutputStream; This will return the corresponding double value to the given path","title":"getDouble (Function)"},{"location":"api/1.0.8/#getfloat-function","text":"This method will return the Float value of the Json element corresponding to the given path. If there is no valid Float value at the given path, the method will return 'null' Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getFloat(json, $.name ) as name insert into OutputStream; This will return the corresponding Float value based on the given path","title":"getFloat (Function)"},{"location":"api/1.0.8/#getint-function","text":"This method will return the Integer value of Json element corresponding to the given path. If there is no valid Integer value at the given path, the method will return 'null' Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getInt(json, $.name ) as name insert into OutputStream; This will return the corresponding integer value based on the given path","title":"getInt (Function)"},{"location":"api/1.0.8/#getlong-function","text":"This method will return the Long value of the Json element corresponding to the given path. Ifthere is no valid Long value at the given path, the method will return 'null' Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getLong(json, $.name ) as name insert into OutputStream; This will return the corresponding Long value based on the given path","title":"getLong (Function)"},{"location":"api/1.0.8/#getobject-function","text":"This method will return the object of Json element corresponding to the given path. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the object from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getObject(json, $.name ) as name insert into OutputStream; This will return the corresponding object to the given path","title":"getObject (Function)"},{"location":"api/1.0.8/#getstring-function","text":"This method will return the string value of Json element corresponding to the given path. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getString(json, $.name ) as name insert into OutputStream; This will return the corresponding string value to the given path","title":"getString (Function)"},{"location":"api/1.0.8/#isexists-function","text":"This method allows to check whether there is any json element in the given path or not. If there is a valid json element in the given path, it will return true. If there is no valid json element, it will return false Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used to search the element with the given path STRING OBJECT No No path The path which is used to search in the given input json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:isExists(json, $.name ) as name insert into OutputStream; This will return the true/false based existence of the given path","title":"isExists (Function)"},{"location":"api/1.0.8/#setelement-function","text":"This method allows to insert elements to the given json based on the specified path. If there is no valid path given, it will return the original json. Otherwise it will return the new json Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT jsonelement, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used to insert the given value STRING OBJECT No No path The path which is used to insert the given element to the input json STRING No No jsonelement The json element which is inserted into the given input json STRING BOOL DOUBLE FLOAT INT LONG OBJECT No No key The key which is used to insert the given element to the input json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:setElement(json, $.name ) as name insert into OutputStream; This will return the corresponding json object based on the given path and json element","title":"setElement (Function)"},{"location":"api/1.0.8/#toobject-function","text":"This method will return the json object related to given json string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid json string which is used to generate the returned json object STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toJson(json) as jsonObject insert into OutputStream; This will return the json object related to given json string","title":"toObject (Function)"},{"location":"api/1.0.8/#tostring-function","text":"This method will return the json string related to given json object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid json object which is used to generate the json string OBJECT No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:toString(json) as jsonString insert into OutputStream; This will return a json string related to given json object","title":"toString (Function)"},{"location":"api/1.0.8/#tokenize-stream-processor","text":"This will tokenize the given json according the path provided Syntax json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json which should be tokenized using the given path. STRING OBJECT No No path The path which is used to tokenize the given json STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json STRING Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenize(json, path) select jsonElement insert into OutputStream; This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"tokenize (Stream Processor)"},{"location":"api/1.0.8/#tokenizeasobject-stream-processor","text":"This will tokenize the given json according the path provided and return the response as object Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json which should be tokenized using the given path. STRING OBJECT No No path The path which is used to tokenize the given json STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json OBJECT Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select jsonElement insert into OutputStream; This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream Eg:- jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"tokenizeAsObject (Stream Processor)"},{"location":"api/1.0.9/","text":"API Docs - v1.0.9 Json getBool (Function) This method will return the Boolean value of Json element corresponding to the given path. If there is no valid Boolean value at the given path, the method will return 'false' Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getBool(json, $.name ) as name insert into OutputStream; This will return the corresponding Boolean value to the given path getDouble (Function) This method will return the double value of Json element corresponding to the given path. If there is no valid Double value at the given path, the method will return 'null' Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getDouble(json, $.name ) as name insert into OutputStream; This will return the corresponding double value to the given path getFloat (Function) This method will return the Float value of the Json element corresponding to the given path. If there is no valid Float value at the given path, the method will return 'null' Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getFloat(json, $.name ) as name insert into OutputStream; This will return the corresponding Float value based on the given path getInt (Function) This method will return the Integer value of Json element corresponding to the given path. If there is no valid Integer value at the given path, the method will return 'null' Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getInt(json, $.name ) as name insert into OutputStream; This will return the corresponding integer value based on the given path getLong (Function) This method will return the Long value of the Json element corresponding to the given path. Ifthere is no valid Long value at the given path, the method will return 'null' Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getLong(json, $.name ) as name insert into OutputStream; This will return the corresponding Long value based on the given path getObject (Function) This method will return the object of Json element corresponding to the given path. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the object from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getObject(json, $.name ) as name insert into OutputStream; This will return the corresponding object to the given path getString (Function) This method will return the string value of Json element corresponding to the given path. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getString(json, $.name ) as name insert into OutputStream; This will return the corresponding string value to the given path isExists (Function) This method allows to check whether there is any json element in the given path or not. If there is a valid json element in the given path, it will return true. If there is no valid json element, it will return false Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used to search the element with the given path STRING OBJECT No No path The path which is used to search in the given input json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:isExists(json, $.name ) as name insert into OutputStream; This will return the true/false based existence of the given path setElement (Function) This method allows to insert elements to the given json based on the specified path. If there is no valid path given, it will return the original json. Otherwise it will return the new json Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT jsonelement, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used to insert the given value STRING OBJECT No No path The path which is used to insert the given element to the input json STRING No No jsonelement The json element which is inserted into the given input json STRING BOOL DOUBLE FLOAT INT LONG OBJECT No No key The key which is used to insert the given element to the input json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:setElement(json, $.name ) as name insert into OutputStream; This will return the corresponding json object based on the given path and json element toObject (Function) This method will return the json object related to given json string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid json string which is used to generate the returned json object STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toJson(json) as jsonObject insert into OutputStream; This will return the json object related to given json string toString (Function) This method will return the json string related to given json object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid json object which is used to generate the json string OBJECT No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:toString(json) as jsonString insert into OutputStream; This will return a json string related to given json object tokenize (Stream Processor) This tokenizes the given json according the path provided Syntax json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json that should be tokenized using the given path. STRING OBJECT No No path The path that is used to tokenize the given json STRING No No fail.on.missing.attribute If this parameter is set to 'true' and a json is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a json in the specified path results in the event being created with a 'null' value for the json element. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json. STRING Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenize(json, path) select jsonElement insert into OutputStream; This query performs a tokenization for the given json using the path specified. If the specified path provides a json array, it generates events for each element in that array by adding an additional attributes as the 'jsonElement' to the stream e.g., jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" If we use the configuration in this example, it generates two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream e.g., jsonInput - {name:\"John\",age:25}, path - \"$.age\" tokenizeAsObject (Stream Processor) This tokenizes the given json based on the path provided and returns the response as an object. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json that should be tokenized using the given path. STRING OBJECT No No path The path that is used to tokenize the given json STRING No No fail.on.missing.attribute If this parameter is set to 'true' and a json is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a json in the specified path results in the event being created with a 'null' value for the json element. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json. OBJECT Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select jsonElement insert into OutputStream; This query performs a tokenization for the given json using the path specified. If the specified path provides a json array, it generates events for each element in the specified json array by adding an additional attribute as the 'jsonElement' into the stream e.g., jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" If we use the configuration in the above example, it generates two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream e.g., jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"1.0.9"},{"location":"api/1.0.9/#api-docs-v109","text":"","title":"API Docs - v1.0.9"},{"location":"api/1.0.9/#json","text":"","title":"Json"},{"location":"api/1.0.9/#getbool-function","text":"This method will return the Boolean value of Json element corresponding to the given path. If there is no valid Boolean value at the given path, the method will return 'false' Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getBool(json, $.name ) as name insert into OutputStream; This will return the corresponding Boolean value to the given path","title":"getBool (Function)"},{"location":"api/1.0.9/#getdouble-function","text":"This method will return the double value of Json element corresponding to the given path. If there is no valid Double value at the given path, the method will return 'null' Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getDouble(json, $.name ) as name insert into OutputStream; This will return the corresponding double value to the given path","title":"getDouble (Function)"},{"location":"api/1.0.9/#getfloat-function","text":"This method will return the Float value of the Json element corresponding to the given path. If there is no valid Float value at the given path, the method will return 'null' Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getFloat(json, $.name ) as name insert into OutputStream; This will return the corresponding Float value based on the given path","title":"getFloat (Function)"},{"location":"api/1.0.9/#getint-function","text":"This method will return the Integer value of Json element corresponding to the given path. If there is no valid Integer value at the given path, the method will return 'null' Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getInt(json, $.name ) as name insert into OutputStream; This will return the corresponding integer value based on the given path","title":"getInt (Function)"},{"location":"api/1.0.9/#getlong-function","text":"This method will return the Long value of the Json element corresponding to the given path. Ifthere is no valid Long value at the given path, the method will return 'null' Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getLong(json, $.name ) as name insert into OutputStream; This will return the corresponding Long value based on the given path","title":"getLong (Function)"},{"location":"api/1.0.9/#getobject-function","text":"This method will return the object of Json element corresponding to the given path. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the object from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getObject(json, $.name ) as name insert into OutputStream; This will return the corresponding object to the given path","title":"getObject (Function)"},{"location":"api/1.0.9/#getstring-function","text":"This method will return the string value of Json element corresponding to the given path. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used get the value against the given path STRING OBJECT No No path The path which is used to get the value from given json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:getString(json, $.name ) as name insert into OutputStream; This will return the corresponding string value to the given path","title":"getString (Function)"},{"location":"api/1.0.9/#isexists-function","text":"This method allows to check whether there is any json element in the given path or not. If there is a valid json element in the given path, it will return true. If there is no valid json element, it will return false Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used to search the element with the given path STRING OBJECT No No path The path which is used to search in the given input json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:isExists(json, $.name ) as name insert into OutputStream; This will return the true/false based existence of the given path","title":"isExists (Function)"},{"location":"api/1.0.9/#setelement-function","text":"This method allows to insert elements to the given json based on the specified path. If there is no valid path given, it will return the original json. Otherwise it will return the new json Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT jsonelement, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The json input which is used to insert the given value STRING OBJECT No No path The path which is used to insert the given element to the input json STRING No No jsonelement The json element which is inserted into the given input json STRING BOOL DOUBLE FLOAT INT LONG OBJECT No No key The key which is used to insert the given element to the input json STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:setElement(json, $.name ) as name insert into OutputStream; This will return the corresponding json object based on the given path and json element","title":"setElement (Function)"},{"location":"api/1.0.9/#toobject-function","text":"This method will return the json object related to given json string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid json string which is used to generate the returned json object STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toJson(json) as jsonObject insert into OutputStream; This will return the json object related to given json string","title":"toObject (Function)"},{"location":"api/1.0.9/#tostring-function","text":"This method will return the json string related to given json object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid json object which is used to generate the json string OBJECT No No Examples EXAMPLE 1 define stream InputStream(json string); from IpStream select json:toString(json) as jsonString insert into OutputStream; This will return a json string related to given json object","title":"toString (Function)"},{"location":"api/1.0.9/#tokenize-stream-processor","text":"This tokenizes the given json according the path provided Syntax json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json that should be tokenized using the given path. STRING OBJECT No No path The path that is used to tokenize the given json STRING No No fail.on.missing.attribute If this parameter is set to 'true' and a json is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a json in the specified path results in the event being created with a 'null' value for the json element. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json. STRING Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenize(json, path) select jsonElement insert into OutputStream; This query performs a tokenization for the given json using the path specified. If the specified path provides a json array, it generates events for each element in that array by adding an additional attributes as the 'jsonElement' to the stream e.g., jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" If we use the configuration in this example, it generates two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream e.g., jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"tokenize (Stream Processor)"},{"location":"api/1.0.9/#tokenizeasobject-stream-processor","text":"This tokenizes the given json based on the path provided and returns the response as an object. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json that should be tokenized using the given path. STRING OBJECT No No path The path that is used to tokenize the given json STRING No No fail.on.missing.attribute If this parameter is set to 'true' and a json is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a json in the specified path results in the event being created with a 'null' value for the json element. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json. OBJECT Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select jsonElement insert into OutputStream; This query performs a tokenization for the given json using the path specified. If the specified path provides a json array, it generates events for each element in the specified json array by adding an additional attribute as the 'jsonElement' into the stream e.g., jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" If we use the configuration in the above example, it generates two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream e.g., jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"tokenizeAsObject (Stream Processor)"},{"location":"api/1.1.0/","text":"API Docs - v1.1.0 Json getBool (Function) This method returns a 'boolean' value, either 'true' or 'false', based on the valuespecified against the JSON element present in the given path.In case there is no valid boolean value found in the given path, the method still returns 'false'. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the boolean value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getBool' function fetches theboolean value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getBool(json, $.name ) as name insert into OutputStream; This returns the boolean value of the JSON input in the given path. The results are directed to the 'OutputStream' stream. getDouble (Function) This method returns the double value of the JSON element present in the given path. If there is no valid double value in the given path, the method returns 'null'. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getDouble' function fetches thedouble value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getDouble(json, $.name ) as name insert into OutputStream; This returns the double value of the given path. The results aredirected to the 'OutputStream' stream. getFloat (Function) This method returns the float value of the JSON element present in the given path.If there is no valid float value in the given path, the method returns 'null'. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getFloat' function fetches thevalue. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getFloat(json, $.name ) as name insert into OutputStream; This returns the float value of the JSON input in the given path. The results aredirected to the 'OutputStream' stream. getInt (Function) This method returns the integer value of the JSON element present in the given path. If there is no valid integer value in the given path, the method returns 'null'. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getInt' function fetches theinteger value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getInt(json, $.name ) as name insert into OutputStream; This returns the integer value of the JSON input in the given path. The resultsare directed to the 'OutputStream' stream. getLong (Function) This returns the long value of the JSON element present in the given path. Ifthere is no valid long value in the given path, the method returns 'null'. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the JSON element from which the 'getLong' functionfetches the long value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getLong(json, $.name ) as name insert into OutputStream; This returns the long value of the JSON input in the given path. The results aredirected to 'OutputStream' stream. getObject (Function) This returns the object of the JSON element present in the given path. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getObject' function fetches theobject. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getObject(json, $.name ) as name insert into OutputStream; This returns the object of the JSON input in the given path. The results are directed to the 'OutputStream' stream. getString (Function) This returns the string value of the JSON element present in the given path. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the JSON input from which the 'getString' function fetches the string value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getString(json, $.name ) as name insert into OutputStream; This returns the string value of the JSON input in the given path. The results are directed to the 'OutputStream' stream. isExists (Function) This method checks whether there is a JSON element present in the given path or not.If there is a valid JSON element in the given path, it returns 'true'. If there is no valid JSON element, it returns 'false' Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input in a given path, on which the function performs the search forJSON elements. STRING OBJECT No No path The path that contains the input JSON on which the function performs the search. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:isExists(json, $.name ) as name insert into OutputStream; This returns either true or false based on the existence of a JSON element in a given path. The results are directed to the 'OutputStream' stream. setElement (Function) This method allows to insert elements into a given JSON present in a specific path. If there is no valid path given, it returns the original JSON. Otherwise, it returns the new JSON. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT jsonelement, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input into which is this function inserts the new value. STRING OBJECT No No path The path on the JSON input which is used to insert the given element. STRING No No jsonelement The JSON element which is inserted by the function into the input JSON. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No No key The key which is used to insert the given element into the input JSON. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:setElement(json, $.name ) as name insert into OutputStream; This returns the JSON object present in the given path with the newly inserted JSONelement. The results are directed to the 'OutputStream' stream. toObject (Function) This method returns the JSON object related to a given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string from which the function generates the JSON object. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toJson(json) as jsonObject insert into OutputStream; This returns the JSON object corresponding to the given JSON string.The results aredirected to the 'OutputStream' stream. toString (Function) This method returns the JSON string corresponding to a given JSON object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object from which the function generates a JSON string. OBJECT No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toString(json) as jsonString insert into OutputStream; This returns the JSON string corresponding to a given JSON object. The results are directed to the 'OutputStream' stream. tokenize (Stream Processor) This tokenizes the given json according the path provided Syntax json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json that should be tokenized using the given path. STRING OBJECT No No path The path that is used to tokenize the given json STRING No No fail.on.missing.attribute If this parameter is set to 'true' and a json is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a json in the specified path results in the event being created with a 'null' value for the json element. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json. STRING Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenize(json, path) select jsonElement insert into OutputStream; This query performs a tokenization for the given json using the path specified. If the specified path provides a json array, it generates events for each element in that array by adding an additional attributes as the 'jsonElement' to the stream. e.g., jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" If we use the configuration in this example, it generates two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream. e.g., jsonInput - {name:\"John\",age:25}, path - \"$.age\" tokenizeAsObject (Stream Processor) This tokenizes the given JSON based on the path provided and returns the response as an object. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json that is tokenized using the given path. STRING OBJECT No No path The path of the input JSON that the function tokenizes. STRING No No fail.on.missing.attribute If this parameter is set to 'true' and a JSON is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a JSON in the specified path results in the event being created with a 'null' value for the json element. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path and the JSON. OBJECT Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select jsonElement insert into OutputStream; This query performs a tokenization for the given JSON using the path specified. If the specified path provides a JSON array, it generates events for each element in the specified json array by adding an additional attribute as the 'jsonElement' into the stream. e.g., jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" If we use the configuration in the above example, it generates two events with the attributes \"Mathematics\" and \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream e.g., jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"1.1.0"},{"location":"api/1.1.0/#api-docs-v110","text":"","title":"API Docs - v1.1.0"},{"location":"api/1.1.0/#json","text":"","title":"Json"},{"location":"api/1.1.0/#getbool-function","text":"This method returns a 'boolean' value, either 'true' or 'false', based on the valuespecified against the JSON element present in the given path.In case there is no valid boolean value found in the given path, the method still returns 'false'. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the boolean value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getBool' function fetches theboolean value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getBool(json, $.name ) as name insert into OutputStream; This returns the boolean value of the JSON input in the given path. The results are directed to the 'OutputStream' stream.","title":"getBool (Function)"},{"location":"api/1.1.0/#getdouble-function","text":"This method returns the double value of the JSON element present in the given path. If there is no valid double value in the given path, the method returns 'null'. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getDouble' function fetches thedouble value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getDouble(json, $.name ) as name insert into OutputStream; This returns the double value of the given path. The results aredirected to the 'OutputStream' stream.","title":"getDouble (Function)"},{"location":"api/1.1.0/#getfloat-function","text":"This method returns the float value of the JSON element present in the given path.If there is no valid float value in the given path, the method returns 'null'. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getFloat' function fetches thevalue. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getFloat(json, $.name ) as name insert into OutputStream; This returns the float value of the JSON input in the given path. The results aredirected to the 'OutputStream' stream.","title":"getFloat (Function)"},{"location":"api/1.1.0/#getint-function","text":"This method returns the integer value of the JSON element present in the given path. If there is no valid integer value in the given path, the method returns 'null'. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getInt' function fetches theinteger value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getInt(json, $.name ) as name insert into OutputStream; This returns the integer value of the JSON input in the given path. The resultsare directed to the 'OutputStream' stream.","title":"getInt (Function)"},{"location":"api/1.1.0/#getlong-function","text":"This returns the long value of the JSON element present in the given path. Ifthere is no valid long value in the given path, the method returns 'null'. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the JSON element from which the 'getLong' functionfetches the long value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getLong(json, $.name ) as name insert into OutputStream; This returns the long value of the JSON input in the given path. The results aredirected to 'OutputStream' stream.","title":"getLong (Function)"},{"location":"api/1.1.0/#getobject-function","text":"This returns the object of the JSON element present in the given path. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getObject' function fetches theobject. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getObject(json, $.name ) as name insert into OutputStream; This returns the object of the JSON input in the given path. The results are directed to the 'OutputStream' stream.","title":"getObject (Function)"},{"location":"api/1.1.0/#getstring-function","text":"This returns the string value of the JSON element present in the given path. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the JSON input from which the 'getString' function fetches the string value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getString(json, $.name ) as name insert into OutputStream; This returns the string value of the JSON input in the given path. The results are directed to the 'OutputStream' stream.","title":"getString (Function)"},{"location":"api/1.1.0/#isexists-function","text":"This method checks whether there is a JSON element present in the given path or not.If there is a valid JSON element in the given path, it returns 'true'. If there is no valid JSON element, it returns 'false' Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input in a given path, on which the function performs the search forJSON elements. STRING OBJECT No No path The path that contains the input JSON on which the function performs the search. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:isExists(json, $.name ) as name insert into OutputStream; This returns either true or false based on the existence of a JSON element in a given path. The results are directed to the 'OutputStream' stream.","title":"isExists (Function)"},{"location":"api/1.1.0/#setelement-function","text":"This method allows to insert elements into a given JSON present in a specific path. If there is no valid path given, it returns the original JSON. Otherwise, it returns the new JSON. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT jsonelement, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input into which is this function inserts the new value. STRING OBJECT No No path The path on the JSON input which is used to insert the given element. STRING No No jsonelement The JSON element which is inserted by the function into the input JSON. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No No key The key which is used to insert the given element into the input JSON. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:setElement(json, $.name ) as name insert into OutputStream; This returns the JSON object present in the given path with the newly inserted JSONelement. The results are directed to the 'OutputStream' stream.","title":"setElement (Function)"},{"location":"api/1.1.0/#toobject-function","text":"This method returns the JSON object related to a given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string from which the function generates the JSON object. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toJson(json) as jsonObject insert into OutputStream; This returns the JSON object corresponding to the given JSON string.The results aredirected to the 'OutputStream' stream.","title":"toObject (Function)"},{"location":"api/1.1.0/#tostring-function","text":"This method returns the JSON string corresponding to a given JSON object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object from which the function generates a JSON string. OBJECT No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toString(json) as jsonString insert into OutputStream; This returns the JSON string corresponding to a given JSON object. The results are directed to the 'OutputStream' stream.","title":"toString (Function)"},{"location":"api/1.1.0/#tokenize-stream-processor","text":"This tokenizes the given json according the path provided Syntax json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json that should be tokenized using the given path. STRING OBJECT No No path The path that is used to tokenize the given json STRING No No fail.on.missing.attribute If this parameter is set to 'true' and a json is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a json in the specified path results in the event being created with a 'null' value for the json element. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json. STRING Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenize(json, path) select jsonElement insert into OutputStream; This query performs a tokenization for the given json using the path specified. If the specified path provides a json array, it generates events for each element in that array by adding an additional attributes as the 'jsonElement' to the stream. e.g., jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" If we use the configuration in this example, it generates two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream. e.g., jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"tokenize (Stream Processor)"},{"location":"api/1.1.0/#tokenizeasobject-stream-processor","text":"This tokenizes the given JSON based on the path provided and returns the response as an object. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json that is tokenized using the given path. STRING OBJECT No No path The path of the input JSON that the function tokenizes. STRING No No fail.on.missing.attribute If this parameter is set to 'true' and a JSON is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a JSON in the specified path results in the event being created with a 'null' value for the json element. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path and the JSON. OBJECT Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select jsonElement insert into OutputStream; This query performs a tokenization for the given JSON using the path specified. If the specified path provides a JSON array, it generates events for each element in the specified json array by adding an additional attribute as the 'jsonElement' into the stream. e.g., jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" If we use the configuration in the above example, it generates two events with the attributes \"Mathematics\" and \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream e.g., jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"tokenizeAsObject (Stream Processor)"},{"location":"api/1.1.1/","text":"API Docs - v1.1.1 Json getBool (Function) This method returns a 'boolean' value, either 'true' or 'false', based on the valuespecified against the JSON element present in the given path.In case there is no valid boolean value found in the given path, the method still returns 'false'. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the boolean value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getBool' function fetches theboolean value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getBool(json, $.name ) as name insert into OutputStream; This returns the boolean value of the JSON input in the given path. The results are directed to the 'OutputStream' stream. getDouble (Function) This method returns the double value of the JSON element present in the given path. If there is no valid double value in the given path, the method returns 'null'. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getDouble' function fetches thedouble value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getDouble(json, $.name ) as name insert into OutputStream; This returns the double value of the given path. The results aredirected to the 'OutputStream' stream. getFloat (Function) This method returns the float value of the JSON element present in the given path.If there is no valid float value in the given path, the method returns 'null'. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getFloat' function fetches thevalue. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getFloat(json, $.name ) as name insert into OutputStream; This returns the float value of the JSON input in the given path. The results aredirected to the 'OutputStream' stream. getInt (Function) This method returns the integer value of the JSON element present in the given path. If there is no valid integer value in the given path, the method returns 'null'. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getInt' function fetches theinteger value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getInt(json, $.name ) as name insert into OutputStream; This returns the integer value of the JSON input in the given path. The resultsare directed to the 'OutputStream' stream. getLong (Function) This returns the long value of the JSON element present in the given path. Ifthere is no valid long value in the given path, the method returns 'null'. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the JSON element from which the 'getLong' functionfetches the long value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getLong(json, $.name ) as name insert into OutputStream; This returns the long value of the JSON input in the given path. The results aredirected to 'OutputStream' stream. getObject (Function) This returns the object of the JSON element present in the given path. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getObject' function fetches theobject. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getObject(json, $.name ) as name insert into OutputStream; This returns the object of the JSON input in the given path. The results are directed to the 'OutputStream' stream. getString (Function) This returns the string value of the JSON element present in the given path. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the JSON input from which the 'getString' function fetches the string value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getString(json, $.name ) as name insert into OutputStream; This returns the string value of the JSON input in the given path. The results are directed to the 'OutputStream' stream. isExists (Function) This method checks whether there is a JSON element present in the given path or not.If there is a valid JSON element in the given path, it returns 'true'. If there is no valid JSON element, it returns 'false' Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input in a given path, on which the function performs the search forJSON elements. STRING OBJECT No No path The path that contains the input JSON on which the function performs the search. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:isExists(json, $.name ) as name insert into OutputStream; This returns either true or false based on the existence of a JSON element in a given path. The results are directed to the 'OutputStream' stream. setElement (Function) This method allows to insert elements into a given JSON present in a specific path. If there is no valid path given, it returns the original JSON. Otherwise, it returns the new JSON. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT jsonelement, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input into which is this function inserts the new value. STRING OBJECT No No path The path on the JSON input which is used to insert the given element. STRING No No jsonelement The JSON element which is inserted by the function into the input JSON. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No No key The key which is used to insert the given element into the input JSON. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:setElement(json, $.name ) as name insert into OutputStream; This returns the JSON object present in the given path with the newly inserted JSONelement. The results are directed to the 'OutputStream' stream. toObject (Function) This method returns the JSON object related to a given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string from which the function generates the JSON object. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toJson(json) as jsonObject insert into OutputStream; This returns the JSON object corresponding to the given JSON string.The results aredirected to the 'OutputStream' stream. toString (Function) This method returns the JSON string corresponding to a given JSON object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object from which the function generates a JSON string. OBJECT No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toString(json) as jsonString insert into OutputStream; This returns the JSON string corresponding to a given JSON object. The results are directed to the 'OutputStream' stream. tokenize (Stream Processor) This tokenizes the given json according the path provided Syntax json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json that should be tokenized using the given path. STRING OBJECT No No path The path that is used to tokenize the given json STRING No No fail.on.missing.attribute If this parameter is set to 'true' and a json is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a json in the specified path results in the event being created with a 'null' value for the json element. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json. STRING Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenize(json, path) select jsonElement insert into OutputStream; This query performs a tokenization for the given json using the path specified. If the specified path provides a json array, it generates events for each element in that array by adding an additional attributes as the 'jsonElement' to the stream. e.g., jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" If we use the configuration in this example, it generates two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream. e.g., jsonInput - {name:\"John\",age:25}, path - \"$.age\" tokenizeAsObject (Stream Processor) This tokenizes the given JSON based on the path provided and returns the response as an object. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json that is tokenized using the given path. STRING OBJECT No No path The path of the input JSON that the function tokenizes. STRING No No fail.on.missing.attribute If this parameter is set to 'true' and a JSON is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a JSON in the specified path results in the event being created with a 'null' value for the json element. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path and the JSON. OBJECT Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select jsonElement insert into OutputStream; This query performs a tokenization for the given JSON using the path specified. If the specified path provides a JSON array, it generates events for each element in the specified json array by adding an additional attribute as the 'jsonElement' into the stream. e.g., jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" If we use the configuration in the above example, it generates two events with the attributes \"Mathematics\" and \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream e.g., jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"1.1.1"},{"location":"api/1.1.1/#api-docs-v111","text":"","title":"API Docs - v1.1.1"},{"location":"api/1.1.1/#json","text":"","title":"Json"},{"location":"api/1.1.1/#getbool-function","text":"This method returns a 'boolean' value, either 'true' or 'false', based on the valuespecified against the JSON element present in the given path.In case there is no valid boolean value found in the given path, the method still returns 'false'. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the boolean value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getBool' function fetches theboolean value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getBool(json, $.name ) as name insert into OutputStream; This returns the boolean value of the JSON input in the given path. The results are directed to the 'OutputStream' stream.","title":"getBool (Function)"},{"location":"api/1.1.1/#getdouble-function","text":"This method returns the double value of the JSON element present in the given path. If there is no valid double value in the given path, the method returns 'null'. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getDouble' function fetches thedouble value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getDouble(json, $.name ) as name insert into OutputStream; This returns the double value of the given path. The results aredirected to the 'OutputStream' stream.","title":"getDouble (Function)"},{"location":"api/1.1.1/#getfloat-function","text":"This method returns the float value of the JSON element present in the given path.If there is no valid float value in the given path, the method returns 'null'. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getFloat' function fetches thevalue. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getFloat(json, $.name ) as name insert into OutputStream; This returns the float value of the JSON input in the given path. The results aredirected to the 'OutputStream' stream.","title":"getFloat (Function)"},{"location":"api/1.1.1/#getint-function","text":"This method returns the integer value of the JSON element present in the given path. If there is no valid integer value in the given path, the method returns 'null'. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getInt' function fetches theinteger value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getInt(json, $.name ) as name insert into OutputStream; This returns the integer value of the JSON input in the given path. The resultsare directed to the 'OutputStream' stream.","title":"getInt (Function)"},{"location":"api/1.1.1/#getlong-function","text":"This returns the long value of the JSON element present in the given path. Ifthere is no valid long value in the given path, the method returns 'null'. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the JSON element from which the 'getLong' functionfetches the long value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getLong(json, $.name ) as name insert into OutputStream; This returns the long value of the JSON input in the given path. The results aredirected to 'OutputStream' stream.","title":"getLong (Function)"},{"location":"api/1.1.1/#getobject-function","text":"This returns the object of the JSON element present in the given path. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getObject' function fetches theobject. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getObject(json, $.name ) as name insert into OutputStream; This returns the object of the JSON input in the given path. The results are directed to the 'OutputStream' stream.","title":"getObject (Function)"},{"location":"api/1.1.1/#getstring-function","text":"This returns the string value of the JSON element present in the given path. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the JSON input from which the 'getString' function fetches the string value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getString(json, $.name ) as name insert into OutputStream; This returns the string value of the JSON input in the given path. The results are directed to the 'OutputStream' stream.","title":"getString (Function)"},{"location":"api/1.1.1/#isexists-function","text":"This method checks whether there is a JSON element present in the given path or not.If there is a valid JSON element in the given path, it returns 'true'. If there is no valid JSON element, it returns 'false' Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input in a given path, on which the function performs the search forJSON elements. STRING OBJECT No No path The path that contains the input JSON on which the function performs the search. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:isExists(json, $.name ) as name insert into OutputStream; This returns either true or false based on the existence of a JSON element in a given path. The results are directed to the 'OutputStream' stream.","title":"isExists (Function)"},{"location":"api/1.1.1/#setelement-function","text":"This method allows to insert elements into a given JSON present in a specific path. If there is no valid path given, it returns the original JSON. Otherwise, it returns the new JSON. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT jsonelement, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input into which is this function inserts the new value. STRING OBJECT No No path The path on the JSON input which is used to insert the given element. STRING No No jsonelement The JSON element which is inserted by the function into the input JSON. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No No key The key which is used to insert the given element into the input JSON. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:setElement(json, $.name ) as name insert into OutputStream; This returns the JSON object present in the given path with the newly inserted JSONelement. The results are directed to the 'OutputStream' stream.","title":"setElement (Function)"},{"location":"api/1.1.1/#toobject-function","text":"This method returns the JSON object related to a given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string from which the function generates the JSON object. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toJson(json) as jsonObject insert into OutputStream; This returns the JSON object corresponding to the given JSON string.The results aredirected to the 'OutputStream' stream.","title":"toObject (Function)"},{"location":"api/1.1.1/#tostring-function","text":"This method returns the JSON string corresponding to a given JSON object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object from which the function generates a JSON string. OBJECT No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toString(json) as jsonString insert into OutputStream; This returns the JSON string corresponding to a given JSON object. The results are directed to the 'OutputStream' stream.","title":"toString (Function)"},{"location":"api/1.1.1/#tokenize-stream-processor","text":"This tokenizes the given json according the path provided Syntax json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json that should be tokenized using the given path. STRING OBJECT No No path The path that is used to tokenize the given json STRING No No fail.on.missing.attribute If this parameter is set to 'true' and a json is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a json in the specified path results in the event being created with a 'null' value for the json element. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json. STRING Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenize(json, path) select jsonElement insert into OutputStream; This query performs a tokenization for the given json using the path specified. If the specified path provides a json array, it generates events for each element in that array by adding an additional attributes as the 'jsonElement' to the stream. e.g., jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" If we use the configuration in this example, it generates two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream. e.g., jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"tokenize (Stream Processor)"},{"location":"api/1.1.1/#tokenizeasobject-stream-processor","text":"This tokenizes the given JSON based on the path provided and returns the response as an object. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json that is tokenized using the given path. STRING OBJECT No No path The path of the input JSON that the function tokenizes. STRING No No fail.on.missing.attribute If this parameter is set to 'true' and a JSON is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a JSON in the specified path results in the event being created with a 'null' value for the json element. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path and the JSON. OBJECT Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select jsonElement insert into OutputStream; This query performs a tokenization for the given JSON using the path specified. If the specified path provides a JSON array, it generates events for each element in the specified json array by adding an additional attribute as the 'jsonElement' into the stream. e.g., jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" If we use the configuration in the above example, it generates two events with the attributes \"Mathematics\" and \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream e.g., jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"tokenizeAsObject (Stream Processor)"},{"location":"api/2.0.0/","text":"API Docs - v2.0.0 Json getBool (Function) This method returns a 'boolean' value, either 'true' or 'false', based on the valuespecified against the JSON element present in the given path.In case there is no valid boolean value found in the given path, the method still returns 'false'. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the boolean value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getBool' function fetches theboolean value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getBool(json, $.name ) as name insert into OutputStream; This returns the boolean value of the JSON input in the given path. The results are directed to the 'OutputStream' stream. getDouble (Function) This method returns the double value of the JSON element present in the given path. If there is no valid double value in the given path, the method returns 'null'. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getDouble' function fetches thedouble value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getDouble(json, $.name ) as name insert into OutputStream; This returns the double value of the given path. The results aredirected to the 'OutputStream' stream. getFloat (Function) This method returns the float value of the JSON element present in the given path.If there is no valid float value in the given path, the method returns 'null'. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getFloat' function fetches thevalue. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getFloat(json, $.name ) as name insert into OutputStream; This returns the float value of the JSON input in the given path. The results aredirected to the 'OutputStream' stream. getInt (Function) This method returns the integer value of the JSON element present in the given path. If there is no valid integer value in the given path, the method returns 'null'. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getInt' function fetches theinteger value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getInt(json, $.name ) as name insert into OutputStream; This returns the integer value of the JSON input in the given path. The resultsare directed to the 'OutputStream' stream. getLong (Function) This returns the long value of the JSON element present in the given path. Ifthere is no valid long value in the given path, the method returns 'null'. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the JSON element from which the 'getLong' functionfetches the long value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getLong(json, $.name ) as name insert into OutputStream; This returns the long value of the JSON input in the given path. The results aredirected to 'OutputStream' stream. getObject (Function) This returns the object of the JSON element present in the given path. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getObject' function fetches theobject. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getObject(json, $.name ) as name insert into OutputStream; This returns the object of the JSON input in the given path. The results are directed to the 'OutputStream' stream. getString (Function) This returns the string value of the JSON element present in the given path. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the JSON input from which the 'getString' function fetches the string value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getString(json, $.name ) as name insert into OutputStream; This returns the string value of the JSON input in the given path. The results are directed to the 'OutputStream' stream. isExists (Function) This method checks whether there is a JSON element present in the given path or not.If there is a valid JSON element in the given path, it returns 'true'. If there is no valid JSON element, it returns 'false' Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input in a given path, on which the function performs the search forJSON elements. STRING OBJECT No No path The path that contains the input JSON on which the function performs the search. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:isExists(json, $.name ) as name insert into OutputStream; This returns either true or false based on the existence of a JSON element in a given path. The results are directed to the 'OutputStream' stream. setElement (Function) This method allows to insert elements into a given JSON present in a specific path. If there is no valid path given, it returns the original JSON. Otherwise, it returns the new JSON. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT jsonelement, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input into which is this function inserts the new value. STRING OBJECT No No path The path on the JSON input which is used to insert the given element. STRING No No jsonelement The JSON element which is inserted by the function into the input JSON. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No No key The key which is used to insert the given element into the input JSON. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:setElement(json, $.name ) as name insert into OutputStream; This returns the JSON object present in the given path with the newly inserted JSONelement. The results are directed to the 'OutputStream' stream. toObject (Function) This method returns the JSON object related to a given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string from which the function generates the JSON object. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toJson(json) as jsonObject insert into OutputStream; This returns the JSON object corresponding to the given JSON string.The results aredirected to the 'OutputStream' stream. toString (Function) This method returns the JSON string corresponding to a given JSON object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object from which the function generates a JSON string. OBJECT No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toString(json) as jsonString insert into OutputStream; This returns the JSON string corresponding to a given JSON object. The results are directed to the 'OutputStream' stream. tokenize (Stream Processor) This tokenizes the given json according the path provided Syntax json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json that should be tokenized using the given path. STRING OBJECT No No path The path that is used to tokenize the given json STRING No No fail.on.missing.attribute If this parameter is set to 'true' and a json is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a json in the specified path results in the event being created with a 'null' value for the json element. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json. STRING Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenize(json, path) select jsonElement insert into OutputStream; This query performs a tokenization for the given json using the path specified. If the specified path provides a json array, it generates events for each element in that array by adding an additional attributes as the 'jsonElement' to the stream. e.g., jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" If we use the configuration in this example, it generates two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream. e.g., jsonInput - {name:\"John\",age:25}, path - \"$.age\" tokenizeAsObject (Stream Processor) This tokenizes the given JSON based on the path provided and returns the response as an object. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json that is tokenized using the given path. STRING OBJECT No No path The path of the input JSON that the function tokenizes. STRING No No fail.on.missing.attribute If this parameter is set to 'true' and a JSON is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a JSON in the specified path results in the event being created with a 'null' value for the json element. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path and the JSON. OBJECT Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select jsonElement insert into OutputStream; This query performs a tokenization for the given JSON using the path specified. If the specified path provides a JSON array, it generates events for each element in the specified json array by adding an additional attribute as the 'jsonElement' into the stream. e.g., jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" If we use the configuration in the above example, it generates two events with the attributes \"Mathematics\" and \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream e.g., jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"2.0.0"},{"location":"api/2.0.0/#api-docs-v200","text":"","title":"API Docs - v2.0.0"},{"location":"api/2.0.0/#json","text":"","title":"Json"},{"location":"api/2.0.0/#getbool-function","text":"This method returns a 'boolean' value, either 'true' or 'false', based on the valuespecified against the JSON element present in the given path.In case there is no valid boolean value found in the given path, the method still returns 'false'. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the boolean value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getBool' function fetches theboolean value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getBool(json, $.name ) as name insert into OutputStream; This returns the boolean value of the JSON input in the given path. The results are directed to the 'OutputStream' stream.","title":"getBool (Function)"},{"location":"api/2.0.0/#getdouble-function","text":"This method returns the double value of the JSON element present in the given path. If there is no valid double value in the given path, the method returns 'null'. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getDouble' function fetches thedouble value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getDouble(json, $.name ) as name insert into OutputStream; This returns the double value of the given path. The results aredirected to the 'OutputStream' stream.","title":"getDouble (Function)"},{"location":"api/2.0.0/#getfloat-function","text":"This method returns the float value of the JSON element present in the given path.If there is no valid float value in the given path, the method returns 'null'. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getFloat' function fetches thevalue. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getFloat(json, $.name ) as name insert into OutputStream; This returns the float value of the JSON input in the given path. The results aredirected to the 'OutputStream' stream.","title":"getFloat (Function)"},{"location":"api/2.0.0/#getint-function","text":"This method returns the integer value of the JSON element present in the given path. If there is no valid integer value in the given path, the method returns 'null'. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getInt' function fetches theinteger value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getInt(json, $.name ) as name insert into OutputStream; This returns the integer value of the JSON input in the given path. The resultsare directed to the 'OutputStream' stream.","title":"getInt (Function)"},{"location":"api/2.0.0/#getlong-function","text":"This returns the long value of the JSON element present in the given path. Ifthere is no valid long value in the given path, the method returns 'null'. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the JSON element from which the 'getLong' functionfetches the long value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getLong(json, $.name ) as name insert into OutputStream; This returns the long value of the JSON input in the given path. The results aredirected to 'OutputStream' stream.","title":"getLong (Function)"},{"location":"api/2.0.0/#getobject-function","text":"This returns the object of the JSON element present in the given path. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the input JSON from which the 'getObject' function fetches theobject. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getObject(json, $.name ) as name insert into OutputStream; This returns the object of the JSON input in the given path. The results are directed to the 'OutputStream' stream.","title":"getObject (Function)"},{"location":"api/2.0.0/#getstring-function","text":"This returns the string value of the JSON element present in the given path. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that holds the value in the given path. STRING OBJECT No No path The path of the JSON input from which the 'getString' function fetches the string value. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:getString(json, $.name ) as name insert into OutputStream; This returns the string value of the JSON input in the given path. The results are directed to the 'OutputStream' stream.","title":"getString (Function)"},{"location":"api/2.0.0/#isexists-function","text":"This method checks whether there is a JSON element present in the given path or not.If there is a valid JSON element in the given path, it returns 'true'. If there is no valid JSON element, it returns 'false' Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input in a given path, on which the function performs the search forJSON elements. STRING OBJECT No No path The path that contains the input JSON on which the function performs the search. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:isExists(json, $.name ) as name insert into OutputStream; This returns either true or false based on the existence of a JSON element in a given path. The results are directed to the 'OutputStream' stream.","title":"isExists (Function)"},{"location":"api/2.0.0/#setelement-function","text":"This method allows to insert elements into a given JSON present in a specific path. If there is no valid path given, it returns the original JSON. Otherwise, it returns the new JSON. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT jsonelement, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input into which is this function inserts the new value. STRING OBJECT No No path The path on the JSON input which is used to insert the given element. STRING No No jsonelement The JSON element which is inserted by the function into the input JSON. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No No key The key which is used to insert the given element into the input JSON. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:setElement(json, $.name ) as name insert into OutputStream; This returns the JSON object present in the given path with the newly inserted JSONelement. The results are directed to the 'OutputStream' stream.","title":"setElement (Function)"},{"location":"api/2.0.0/#toobject-function","text":"This method returns the JSON object related to a given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string from which the function generates the JSON object. STRING No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toJson(json) as jsonObject insert into OutputStream; This returns the JSON object corresponding to the given JSON string.The results aredirected to the 'OutputStream' stream.","title":"toObject (Function)"},{"location":"api/2.0.0/#tostring-function","text":"This method returns the JSON string corresponding to a given JSON object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object from which the function generates a JSON string. OBJECT No No Examples EXAMPLE 1 define stream InputStream(json string); from InputStream select json:toString(json) as jsonString insert into OutputStream; This returns the JSON string corresponding to a given JSON object. The results are directed to the 'OutputStream' stream.","title":"toString (Function)"},{"location":"api/2.0.0/#tokenize-stream-processor","text":"This tokenizes the given json according the path provided Syntax json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json that should be tokenized using the given path. STRING OBJECT No No path The path that is used to tokenize the given json STRING No No fail.on.missing.attribute If this parameter is set to 'true' and a json is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a json in the specified path results in the event being created with a 'null' value for the json element. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The json element retrieved based on the given path and the json. STRING Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenize(json, path) select jsonElement insert into OutputStream; This query performs a tokenization for the given json using the path specified. If the specified path provides a json array, it generates events for each element in that array by adding an additional attributes as the 'jsonElement' to the stream. e.g., jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" If we use the configuration in this example, it generates two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream. e.g., jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"tokenize (Stream Processor)"},{"location":"api/2.0.0/#tokenizeasobject-stream-processor","text":"This tokenizes the given JSON based on the path provided and returns the response as an object. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input json that is tokenized using the given path. STRING OBJECT No No path The path of the input JSON that the function tokenizes. STRING No No fail.on.missing.attribute If this parameter is set to 'true' and a JSON is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a JSON in the specified path results in the event being created with a 'null' value for the json element. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path and the JSON. OBJECT Examples EXAMPLE 1 define stream InputStream (json string,path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select jsonElement insert into OutputStream; This query performs a tokenization for the given JSON using the path specified. If the specified path provides a JSON array, it generates events for each element in the specified json array by adding an additional attribute as the 'jsonElement' into the stream. e.g., jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, path - \"$.enrolledSubjects\" If we use the configuration in the above example, it generates two events with the attributes \"Mathematics\" and \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream e.g., jsonInput - {name:\"John\",age:25}, path - \"$.age\"","title":"tokenizeAsObject (Stream Processor)"},{"location":"api/2.0.1/","text":"API Docs - v2.0.1 Tested Siddhi Core version: 5.0.0 It could also support other Siddhi Core minor versions. Json getBool (Function) Function retrieves the 'boolean' value specified in the given path of the JSON element. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing boolean value. STRING OBJECT No Yes path The JSON path to fetch the boolean value. STRING No Yes Examples EXAMPLE 1 json:getBool(json,'$.married') If the json is the format {'name' : 'John', 'married' : true} , the function returns true as there is a matching boolean at $.married . EXAMPLE 2 json:getBool(json,'$.name') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching boolean at $.name . EXAMPLE 3 json:getBool(json,'$.foo') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching element at $.foo . getDouble (Function) Function retrieves the 'double' value specified in the given path of the JSON element. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing double value. STRING OBJECT No Yes path The JSON path to fetch the double value. STRING No Yes Examples EXAMPLE 1 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000.0 as there is a matching double at $.salary . EXAMPLE 2 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getDouble(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching double at $.name . getFloat (Function) Function retrieves the 'float' value specified in the given path of the JSON element. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing float value. STRING OBJECT No Yes path The JSON path to fetch the float value. STRING No Yes Examples EXAMPLE 1 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000 as there is a matching float at $.salary . EXAMPLE 2 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getFloat(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching float at $.name . getInt (Function) Function retrieves the 'int' value specified in the given path of the JSON element. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing int value. STRING OBJECT No Yes path The JSON path to fetch the int value. STRING No Yes Examples EXAMPLE 1 json:getInt(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching int at $.age . EXAMPLE 2 json:getInt(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getInt(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching int at $.name . getLong (Function) Function retrieves the 'long' value specified in the given path of the JSON element. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing long value. STRING OBJECT No Yes path The JSON path to fetch the long value. STRING No Yes Examples EXAMPLE 1 json:getLong(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching long at $.age . EXAMPLE 2 json:getLong(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getLong(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching long at $.name . getObject (Function) Function retrieves the object specified in the given path of the JSON element. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing the object. STRING OBJECT No Yes path The JSON path to fetch the object. STRING No Yes Examples EXAMPLE 1 json:getObject(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as there is a matching object at $.address . EXAMPLE 2 json:getObject(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching object at $.age . EXAMPLE 3 json:getObject(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . getString (Function) Function retrieves value specified in the given path of the JSON element as a string. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing value. STRING OBJECT No Yes path The JSON path to fetch the value. STRING No Yes Examples EXAMPLE 1 json:getString(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns John as there is a matching string at $.name . EXAMPLE 2 json:getString(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getString(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as a string as there is a matching element at $.age . EXAMPLE 4 json:getString(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as a string as there is a matching element at $.address . isExists (Function) Function checks whether there is a JSON element present in the given path or not. Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that needs to be searched for an elements. STRING OBJECT No Yes path The JSON path to check for the element. STRING No Yes Examples EXAMPLE 1 json:isExists(json, '$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns true as there is an element in the given path. EXAMPLE 2 json:isExists(json, '$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns false as there is no element in the given path. setElement (Function) Function sets JSON element into a given JSON at the specific path. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element) OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON to which a JSON element needs to be added/replaced. STRING OBJECT No Yes path The JSON path where the JSON element should be added/replaced. STRING No Yes json.element The JSON element being added. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No Yes key The key to be used to refer the newly added element in the input JSON. Assumes the element is added to a JSON array. STRING Yes Yes Examples EXAMPLE 1 json:setElement(json, '$', {'country' : 'USA'} , 'address') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}} by adding 'address' element and returns the updated JSON. EXAMPLE 2 json:setElement(json, '$', 40, 'age') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'age' : 40} by adding 'age' element and returns the updated JSON. EXAMPLE 3 json:setElement(json, '$', 45, 'age') If the json is the format {'name' : 'John', 'married' : true, 'age' : 40} , the function updates the json as {'name' : 'John', 'married' : true, 'age' : 45} by replacing 'age' element and returns the updated JSON. EXAMPLE 4 json:setElement(json, '$.items', 'book') If the json is the format {'name' : 'Stationary', 'items' : ['pen', 'pencil']} , the function updates the json as {'name' : 'John', 'items' : ['pen', 'pencil', 'book']} by adding 'book' in the items array and returns the updated JSON. EXAMPLE 5 json:setElement(json, '$.address', 'city', 'SF') If the json is the format {'name' : 'John', 'married' : true} ,the function will not update, but returns the original JSON as there are no valid path for $.address . toObject (Function) Function generate JSON object from the given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string that needs to be converted to a JSON object. STRING No Yes Examples EXAMPLE 1 json:toJson(json) This returns the JSON object corresponding to the given JSON string. toString (Function) Function generates a JSON string corresponding to a given JSON object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object to generates a JSON string. OBJECT No Yes Examples EXAMPLE 1 json:toString(json) This returns the JSON string corresponding to a given JSON object. tokenize (Stream Processor) Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events. Syntax json:tokenize( STRING|OBJECT json, STRING path) json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON string. If the 'path' selects a JSON array then the system returns each element in the array as a JSON string via a separate events. STRING Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary . tokenizeAsObject (Stream Processor) Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path) json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON object. If the 'path' selects a JSON array then the system returns each element in the array as a JSON object via a separate events. OBJECT Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"2.0.1"},{"location":"api/2.0.1/#api-docs-v201","text":"Tested Siddhi Core version: 5.0.0 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.1"},{"location":"api/2.0.1/#json","text":"","title":"Json"},{"location":"api/2.0.1/#getbool-function","text":"Function retrieves the 'boolean' value specified in the given path of the JSON element. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing boolean value. STRING OBJECT No Yes path The JSON path to fetch the boolean value. STRING No Yes Examples EXAMPLE 1 json:getBool(json,'$.married') If the json is the format {'name' : 'John', 'married' : true} , the function returns true as there is a matching boolean at $.married . EXAMPLE 2 json:getBool(json,'$.name') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching boolean at $.name . EXAMPLE 3 json:getBool(json,'$.foo') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching element at $.foo .","title":"getBool (Function)"},{"location":"api/2.0.1/#getdouble-function","text":"Function retrieves the 'double' value specified in the given path of the JSON element. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing double value. STRING OBJECT No Yes path The JSON path to fetch the double value. STRING No Yes Examples EXAMPLE 1 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000.0 as there is a matching double at $.salary . EXAMPLE 2 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getDouble(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching double at $.name .","title":"getDouble (Function)"},{"location":"api/2.0.1/#getfloat-function","text":"Function retrieves the 'float' value specified in the given path of the JSON element. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing float value. STRING OBJECT No Yes path The JSON path to fetch the float value. STRING No Yes Examples EXAMPLE 1 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000 as there is a matching float at $.salary . EXAMPLE 2 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getFloat(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching float at $.name .","title":"getFloat (Function)"},{"location":"api/2.0.1/#getint-function","text":"Function retrieves the 'int' value specified in the given path of the JSON element. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing int value. STRING OBJECT No Yes path The JSON path to fetch the int value. STRING No Yes Examples EXAMPLE 1 json:getInt(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching int at $.age . EXAMPLE 2 json:getInt(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getInt(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching int at $.name .","title":"getInt (Function)"},{"location":"api/2.0.1/#getlong-function","text":"Function retrieves the 'long' value specified in the given path of the JSON element. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing long value. STRING OBJECT No Yes path The JSON path to fetch the long value. STRING No Yes Examples EXAMPLE 1 json:getLong(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching long at $.age . EXAMPLE 2 json:getLong(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getLong(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching long at $.name .","title":"getLong (Function)"},{"location":"api/2.0.1/#getobject-function","text":"Function retrieves the object specified in the given path of the JSON element. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing the object. STRING OBJECT No Yes path The JSON path to fetch the object. STRING No Yes Examples EXAMPLE 1 json:getObject(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as there is a matching object at $.address . EXAMPLE 2 json:getObject(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching object at $.age . EXAMPLE 3 json:getObject(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary .","title":"getObject (Function)"},{"location":"api/2.0.1/#getstring-function","text":"Function retrieves value specified in the given path of the JSON element as a string. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing value. STRING OBJECT No Yes path The JSON path to fetch the value. STRING No Yes Examples EXAMPLE 1 json:getString(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns John as there is a matching string at $.name . EXAMPLE 2 json:getString(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getString(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as a string as there is a matching element at $.age . EXAMPLE 4 json:getString(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as a string as there is a matching element at $.address .","title":"getString (Function)"},{"location":"api/2.0.1/#isexists-function","text":"Function checks whether there is a JSON element present in the given path or not. Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that needs to be searched for an elements. STRING OBJECT No Yes path The JSON path to check for the element. STRING No Yes Examples EXAMPLE 1 json:isExists(json, '$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns true as there is an element in the given path. EXAMPLE 2 json:isExists(json, '$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns false as there is no element in the given path.","title":"isExists (Function)"},{"location":"api/2.0.1/#setelement-function","text":"Function sets JSON element into a given JSON at the specific path. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element) OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON to which a JSON element needs to be added/replaced. STRING OBJECT No Yes path The JSON path where the JSON element should be added/replaced. STRING No Yes json.element The JSON element being added. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No Yes key The key to be used to refer the newly added element in the input JSON. Assumes the element is added to a JSON array. STRING Yes Yes Examples EXAMPLE 1 json:setElement(json, '$', {'country' : 'USA'} , 'address') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}} by adding 'address' element and returns the updated JSON. EXAMPLE 2 json:setElement(json, '$', 40, 'age') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'age' : 40} by adding 'age' element and returns the updated JSON. EXAMPLE 3 json:setElement(json, '$', 45, 'age') If the json is the format {'name' : 'John', 'married' : true, 'age' : 40} , the function updates the json as {'name' : 'John', 'married' : true, 'age' : 45} by replacing 'age' element and returns the updated JSON. EXAMPLE 4 json:setElement(json, '$.items', 'book') If the json is the format {'name' : 'Stationary', 'items' : ['pen', 'pencil']} , the function updates the json as {'name' : 'John', 'items' : ['pen', 'pencil', 'book']} by adding 'book' in the items array and returns the updated JSON. EXAMPLE 5 json:setElement(json, '$.address', 'city', 'SF') If the json is the format {'name' : 'John', 'married' : true} ,the function will not update, but returns the original JSON as there are no valid path for $.address .","title":"setElement (Function)"},{"location":"api/2.0.1/#toobject-function","text":"Function generate JSON object from the given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string that needs to be converted to a JSON object. STRING No Yes Examples EXAMPLE 1 json:toJson(json) This returns the JSON object corresponding to the given JSON string.","title":"toObject (Function)"},{"location":"api/2.0.1/#tostring-function","text":"Function generates a JSON string corresponding to a given JSON object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object to generates a JSON string. OBJECT No Yes Examples EXAMPLE 1 json:toString(json) This returns the JSON string corresponding to a given JSON object.","title":"toString (Function)"},{"location":"api/2.0.1/#tokenize-stream-processor","text":"Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events. Syntax json:tokenize( STRING|OBJECT json, STRING path) json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON string. If the 'path' selects a JSON array then the system returns each element in the array as a JSON string via a separate events. STRING Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"tokenize (Stream Processor)"},{"location":"api/2.0.1/#tokenizeasobject-stream-processor","text":"Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path) json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON object. If the 'path' selects a JSON array then the system returns each element in the array as a JSON object via a separate events. OBJECT Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"tokenizeAsObject (Stream Processor)"},{"location":"api/2.0.10/","text":"API Docs - v2.0.10 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. Json group (Aggregate Function) This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:group( STRING|OBJECT json) OBJECT json:group( STRING|OBJECT json, BOOL distinct) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:group( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:group( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:group( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:group( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'. groupAsObject (Aggregate Function) This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:groupAsObject( STRING|OBJECT json) OBJECT json:groupAsObject( STRING|OBJECT json, BOOL distinct) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:groupAsObject( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:groupAsObject( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:groupAsObject( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:groupAsObject( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'. getBool (Function) Function retrieves the 'boolean' value specified in the given path of the JSON element. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing boolean value. STRING OBJECT No Yes path The JSON path to fetch the boolean value. STRING No Yes Examples EXAMPLE 1 json:getBool(json,'$.married') If the json is the format {'name' : 'John', 'married' : true} , the function returns true as there is a matching boolean at $.married . EXAMPLE 2 json:getBool(json,'$.name') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching boolean at $.name . EXAMPLE 3 json:getBool(json,'$.foo') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching element at $.foo . getDouble (Function) Function retrieves the 'double' value specified in the given path of the JSON element. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing double value. STRING OBJECT No Yes path The JSON path to fetch the double value. STRING No Yes Examples EXAMPLE 1 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000.0 as there is a matching double at $.salary . EXAMPLE 2 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getDouble(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching double at $.name . getFloat (Function) Function retrieves the 'float' value specified in the given path of the JSON element. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing float value. STRING OBJECT No Yes path The JSON path to fetch the float value. STRING No Yes Examples EXAMPLE 1 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000 as there is a matching float at $.salary . EXAMPLE 2 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getFloat(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching float at $.name . getInt (Function) Function retrieves the 'int' value specified in the given path of the JSON element. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing int value. STRING OBJECT No Yes path The JSON path to fetch the int value. STRING No Yes Examples EXAMPLE 1 json:getInt(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching int at $.age . EXAMPLE 2 json:getInt(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getInt(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching int at $.name . getLong (Function) Function retrieves the 'long' value specified in the given path of the JSON element. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing long value. STRING OBJECT No Yes path The JSON path to fetch the long value. STRING No Yes Examples EXAMPLE 1 json:getLong(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching long at $.age . EXAMPLE 2 json:getLong(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getLong(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching long at $.name . getObject (Function) Function retrieves the object specified in the given path of the JSON element. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing the object. STRING OBJECT No Yes path The JSON path to fetch the object. STRING No Yes Examples EXAMPLE 1 json:getObject(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as there is a matching object at $.address . EXAMPLE 2 json:getObject(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching object at $.age . EXAMPLE 3 json:getObject(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . getString (Function) Function retrieves value specified in the given path of the JSON element as a string. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing value. STRING OBJECT No Yes path The JSON path to fetch the value. STRING No Yes Examples EXAMPLE 1 json:getString(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns John as there is a matching string at $.name . EXAMPLE 2 json:getString(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getString(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as a string as there is a matching element at $.age . EXAMPLE 4 json:getString(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as a string as there is a matching element at $.address . isExists (Function) Function checks whether there is a JSON element present in the given path or not. Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that needs to be searched for an elements. STRING OBJECT No Yes path The JSON path to check for the element. STRING No Yes Examples EXAMPLE 1 json:isExists(json, '$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns true as there is an element in the given path. EXAMPLE 2 json:isExists(json, '$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns false as there is no element in the given path. setElement (Function) Function sets JSON element into a given JSON at the specific path. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element) OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON to which a JSON element needs to be added/replaced. STRING OBJECT No Yes path The JSON path where the JSON element should be added/replaced. STRING No Yes json.element The JSON element being added. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No Yes key The key to be used to refer the newly added element in the input JSON. Assumes the element is added to a JSON array, or the element selected by the JSON path will be updated. STRING Yes Yes Examples EXAMPLE 1 json:setElement(json, '$', {'country' : 'USA'} , 'address') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}} by adding 'address' element and returns the updated JSON. EXAMPLE 2 json:setElement(json, '$', 40, 'age') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'age' : 40} by adding 'age' element and returns the updated JSON. EXAMPLE 3 json:setElement(json, '$', 45, 'age') If the json is the format {'name' : 'John', 'married' : true, 'age' : 40} , the function updates the json as {'name' : 'John', 'married' : true, 'age' : 45} by replacing 'age' element and returns the updated JSON. EXAMPLE 4 json:setElement(json, '$.items', 'book') If the json is the format {'name' : 'Stationary', 'items' : ['pen', 'pencil']} , the function updates the json as {'name' : 'John', 'items' : ['pen', 'pencil', 'book']} by adding 'book' in the items array and returns the updated JSON. EXAMPLE 5 json:setElement(json, '$.item', 'book') If the json is the format {'name' : 'Stationary', 'item' : 'pen'} , the function updates the json as {'name' : 'John', 'item' : 'book'} by replacing 'item' element and returns the updated JSON. EXAMPLE 6 json:setElement(json, '$.address', 'city', 'SF') If the json is the format {'name' : 'John', 'married' : true} ,the function will not update, but returns the original JSON as there are no valid path for $.address . toObject (Function) Function generate JSON object from the given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string that needs to be converted to a JSON object. STRING No Yes Examples EXAMPLE 1 json:toJson(json) This returns the JSON object corresponding to the given JSON string. toString (Function) Function generates a JSON string corresponding to a given JSON object. Syntax STRING json:toString( STRING|OBJECT json) STRING json:toString( STRING|OBJECT json, BOOL allow.escape) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object to generates a JSON string. STRING OBJECT No Yes allow.escape If this is set to true, quotes will be escaped in the resulting string. Otherwise quotes will not be escaped. false BOOL Yes Yes Examples EXAMPLE 1 json:toString(json) This returns the JSON string corresponding to a given JSON object. EXAMPLE 2 json:toString(json, true) Assume the json object has the field 'user' with value 'david'. With the allowEscape parameter set to true, this will return the string \"{\\\"user\\\":\\\"david\\\"}\" EXAMPLE 3 json:toString(json, false) Assume the json object has the field 'user' with value 'david'. With the allowEscape parameter set to false, this will return the string {\"user\":\"david\"} tokenize (Stream Processor) Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events. Syntax json:tokenize( STRING|OBJECT json, STRING path) json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON string. If the 'path' selects a JSON array then the system returns each element in the array as a JSON string via a separate events. STRING Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary . tokenizeAsObject (Stream Processor) Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path) json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON object. If the 'path' selects a JSON array then the system returns each element in the array as a JSON object via a separate events. OBJECT Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"2.0.10"},{"location":"api/2.0.10/#api-docs-v2010","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.10"},{"location":"api/2.0.10/#json","text":"","title":"Json"},{"location":"api/2.0.10/#group-aggregate-function","text":"This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:group( STRING|OBJECT json) OBJECT json:group( STRING|OBJECT json, BOOL distinct) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:group( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:group( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:group( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:group( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'.","title":"group (Aggregate Function)"},{"location":"api/2.0.10/#groupasobject-aggregate-function","text":"This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:groupAsObject( STRING|OBJECT json) OBJECT json:groupAsObject( STRING|OBJECT json, BOOL distinct) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:groupAsObject( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:groupAsObject( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:groupAsObject( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:groupAsObject( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'.","title":"groupAsObject (Aggregate Function)"},{"location":"api/2.0.10/#getbool-function","text":"Function retrieves the 'boolean' value specified in the given path of the JSON element. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing boolean value. STRING OBJECT No Yes path The JSON path to fetch the boolean value. STRING No Yes Examples EXAMPLE 1 json:getBool(json,'$.married') If the json is the format {'name' : 'John', 'married' : true} , the function returns true as there is a matching boolean at $.married . EXAMPLE 2 json:getBool(json,'$.name') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching boolean at $.name . EXAMPLE 3 json:getBool(json,'$.foo') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching element at $.foo .","title":"getBool (Function)"},{"location":"api/2.0.10/#getdouble-function","text":"Function retrieves the 'double' value specified in the given path of the JSON element. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing double value. STRING OBJECT No Yes path The JSON path to fetch the double value. STRING No Yes Examples EXAMPLE 1 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000.0 as there is a matching double at $.salary . EXAMPLE 2 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getDouble(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching double at $.name .","title":"getDouble (Function)"},{"location":"api/2.0.10/#getfloat-function","text":"Function retrieves the 'float' value specified in the given path of the JSON element. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing float value. STRING OBJECT No Yes path The JSON path to fetch the float value. STRING No Yes Examples EXAMPLE 1 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000 as there is a matching float at $.salary . EXAMPLE 2 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getFloat(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching float at $.name .","title":"getFloat (Function)"},{"location":"api/2.0.10/#getint-function","text":"Function retrieves the 'int' value specified in the given path of the JSON element. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing int value. STRING OBJECT No Yes path The JSON path to fetch the int value. STRING No Yes Examples EXAMPLE 1 json:getInt(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching int at $.age . EXAMPLE 2 json:getInt(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getInt(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching int at $.name .","title":"getInt (Function)"},{"location":"api/2.0.10/#getlong-function","text":"Function retrieves the 'long' value specified in the given path of the JSON element. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing long value. STRING OBJECT No Yes path The JSON path to fetch the long value. STRING No Yes Examples EXAMPLE 1 json:getLong(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching long at $.age . EXAMPLE 2 json:getLong(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getLong(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching long at $.name .","title":"getLong (Function)"},{"location":"api/2.0.10/#getobject-function","text":"Function retrieves the object specified in the given path of the JSON element. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing the object. STRING OBJECT No Yes path The JSON path to fetch the object. STRING No Yes Examples EXAMPLE 1 json:getObject(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as there is a matching object at $.address . EXAMPLE 2 json:getObject(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching object at $.age . EXAMPLE 3 json:getObject(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary .","title":"getObject (Function)"},{"location":"api/2.0.10/#getstring-function","text":"Function retrieves value specified in the given path of the JSON element as a string. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing value. STRING OBJECT No Yes path The JSON path to fetch the value. STRING No Yes Examples EXAMPLE 1 json:getString(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns John as there is a matching string at $.name . EXAMPLE 2 json:getString(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getString(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as a string as there is a matching element at $.age . EXAMPLE 4 json:getString(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as a string as there is a matching element at $.address .","title":"getString (Function)"},{"location":"api/2.0.10/#isexists-function","text":"Function checks whether there is a JSON element present in the given path or not. Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that needs to be searched for an elements. STRING OBJECT No Yes path The JSON path to check for the element. STRING No Yes Examples EXAMPLE 1 json:isExists(json, '$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns true as there is an element in the given path. EXAMPLE 2 json:isExists(json, '$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns false as there is no element in the given path.","title":"isExists (Function)"},{"location":"api/2.0.10/#setelement-function","text":"Function sets JSON element into a given JSON at the specific path. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element) OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON to which a JSON element needs to be added/replaced. STRING OBJECT No Yes path The JSON path where the JSON element should be added/replaced. STRING No Yes json.element The JSON element being added. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No Yes key The key to be used to refer the newly added element in the input JSON. Assumes the element is added to a JSON array, or the element selected by the JSON path will be updated. STRING Yes Yes Examples EXAMPLE 1 json:setElement(json, '$', {'country' : 'USA'} , 'address') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}} by adding 'address' element and returns the updated JSON. EXAMPLE 2 json:setElement(json, '$', 40, 'age') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'age' : 40} by adding 'age' element and returns the updated JSON. EXAMPLE 3 json:setElement(json, '$', 45, 'age') If the json is the format {'name' : 'John', 'married' : true, 'age' : 40} , the function updates the json as {'name' : 'John', 'married' : true, 'age' : 45} by replacing 'age' element and returns the updated JSON. EXAMPLE 4 json:setElement(json, '$.items', 'book') If the json is the format {'name' : 'Stationary', 'items' : ['pen', 'pencil']} , the function updates the json as {'name' : 'John', 'items' : ['pen', 'pencil', 'book']} by adding 'book' in the items array and returns the updated JSON. EXAMPLE 5 json:setElement(json, '$.item', 'book') If the json is the format {'name' : 'Stationary', 'item' : 'pen'} , the function updates the json as {'name' : 'John', 'item' : 'book'} by replacing 'item' element and returns the updated JSON. EXAMPLE 6 json:setElement(json, '$.address', 'city', 'SF') If the json is the format {'name' : 'John', 'married' : true} ,the function will not update, but returns the original JSON as there are no valid path for $.address .","title":"setElement (Function)"},{"location":"api/2.0.10/#toobject-function","text":"Function generate JSON object from the given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string that needs to be converted to a JSON object. STRING No Yes Examples EXAMPLE 1 json:toJson(json) This returns the JSON object corresponding to the given JSON string.","title":"toObject (Function)"},{"location":"api/2.0.10/#tostring-function","text":"Function generates a JSON string corresponding to a given JSON object. Syntax STRING json:toString( STRING|OBJECT json) STRING json:toString( STRING|OBJECT json, BOOL allow.escape) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object to generates a JSON string. STRING OBJECT No Yes allow.escape If this is set to true, quotes will be escaped in the resulting string. Otherwise quotes will not be escaped. false BOOL Yes Yes Examples EXAMPLE 1 json:toString(json) This returns the JSON string corresponding to a given JSON object. EXAMPLE 2 json:toString(json, true) Assume the json object has the field 'user' with value 'david'. With the allowEscape parameter set to true, this will return the string \"{\\\"user\\\":\\\"david\\\"}\" EXAMPLE 3 json:toString(json, false) Assume the json object has the field 'user' with value 'david'. With the allowEscape parameter set to false, this will return the string {\"user\":\"david\"}","title":"toString (Function)"},{"location":"api/2.0.10/#tokenize-stream-processor","text":"Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events. Syntax json:tokenize( STRING|OBJECT json, STRING path) json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON string. If the 'path' selects a JSON array then the system returns each element in the array as a JSON string via a separate events. STRING Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"tokenize (Stream Processor)"},{"location":"api/2.0.10/#tokenizeasobject-stream-processor","text":"Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path) json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON object. If the 'path' selects a JSON array then the system returns each element in the array as a JSON object via a separate events. OBJECT Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"tokenizeAsObject (Stream Processor)"},{"location":"api/2.0.11/","text":"API Docs - v2.0.11 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. Json group (Aggregate Function) This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:group( STRING|OBJECT json) OBJECT json:group( STRING|OBJECT json, BOOL distinct) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:group( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:group( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:group( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:group( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'. groupAsObject (Aggregate Function) This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:groupAsObject( STRING|OBJECT json) OBJECT json:groupAsObject( STRING|OBJECT json, BOOL distinct) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:groupAsObject( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:groupAsObject( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:groupAsObject( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:groupAsObject( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'. getBool (Function) Function retrieves the 'boolean' value specified in the given path of the JSON element. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing boolean value. STRING OBJECT No Yes path The JSON path to fetch the boolean value. STRING No Yes Examples EXAMPLE 1 json:getBool(json,'$.married') If the json is the format {'name' : 'John', 'married' : true} , the function returns true as there is a matching boolean at $.married . EXAMPLE 2 json:getBool(json,'$.name') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching boolean at $.name . EXAMPLE 3 json:getBool(json,'$.foo') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching element at $.foo . getDouble (Function) Function retrieves the 'double' value specified in the given path of the JSON element. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing double value. STRING OBJECT No Yes path The JSON path to fetch the double value. STRING No Yes Examples EXAMPLE 1 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000.0 as there is a matching double at $.salary . EXAMPLE 2 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getDouble(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching double at $.name . getFloat (Function) Function retrieves the 'float' value specified in the given path of the JSON element. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing float value. STRING OBJECT No Yes path The JSON path to fetch the float value. STRING No Yes Examples EXAMPLE 1 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000 as there is a matching float at $.salary . EXAMPLE 2 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getFloat(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching float at $.name . getInt (Function) Function retrieves the 'int' value specified in the given path of the JSON element. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing int value. STRING OBJECT No Yes path The JSON path to fetch the int value. STRING No Yes Examples EXAMPLE 1 json:getInt(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching int at $.age . EXAMPLE 2 json:getInt(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getInt(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching int at $.name . getLong (Function) Function retrieves the 'long' value specified in the given path of the JSON element. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing long value. STRING OBJECT No Yes path The JSON path to fetch the long value. STRING No Yes Examples EXAMPLE 1 json:getLong(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching long at $.age . EXAMPLE 2 json:getLong(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getLong(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching long at $.name . getObject (Function) Function retrieves the object specified in the given path of the JSON element. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing the object. STRING OBJECT No Yes path The JSON path to fetch the object. STRING No Yes Examples EXAMPLE 1 json:getObject(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as there is a matching object at $.address . EXAMPLE 2 json:getObject(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching object at $.age . EXAMPLE 3 json:getObject(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . getString (Function) Function retrieves value specified in the given path of the JSON element as a string. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing value. STRING OBJECT No Yes path The JSON path to fetch the value. STRING No Yes Examples EXAMPLE 1 json:getString(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns John as there is a matching string at $.name . EXAMPLE 2 json:getString(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getString(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as a string as there is a matching element at $.age . EXAMPLE 4 json:getString(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as a string as there is a matching element at $.address . isExists (Function) Function checks whether there is a JSON element present in the given path or not. Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that needs to be searched for an elements. STRING OBJECT No Yes path The JSON path to check for the element. STRING No Yes Examples EXAMPLE 1 json:isExists(json, '$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns true as there is an element in the given path. EXAMPLE 2 json:isExists(json, '$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns false as there is no element in the given path. setElement (Function) Function sets JSON element into a given JSON at the specific path. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element) OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON to which a JSON element needs to be added/replaced. STRING OBJECT No Yes path The JSON path where the JSON element should be added/replaced. STRING No Yes json.element The JSON element being added. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No Yes key The key to be used to refer the newly added element in the input JSON. Assumes the element is added to a JSON array, or the element selected by the JSON path will be updated. STRING Yes Yes Examples EXAMPLE 1 json:setElement(json, '$', {'country' : 'USA'} , 'address') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}} by adding 'address' element and returns the updated JSON. EXAMPLE 2 json:setElement(json, '$', 40, 'age') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'age' : 40} by adding 'age' element and returns the updated JSON. EXAMPLE 3 json:setElement(json, '$', 45, 'age') If the json is the format {'name' : 'John', 'married' : true, 'age' : 40} , the function updates the json as {'name' : 'John', 'married' : true, 'age' : 45} by replacing 'age' element and returns the updated JSON. EXAMPLE 4 json:setElement(json, '$.items', 'book') If the json is the format {'name' : 'Stationary', 'items' : ['pen', 'pencil']} , the function updates the json as {'name' : 'John', 'items' : ['pen', 'pencil', 'book']} by adding 'book' in the items array and returns the updated JSON. EXAMPLE 5 json:setElement(json, '$.item', 'book') If the json is the format {'name' : 'Stationary', 'item' : 'pen'} , the function updates the json as {'name' : 'John', 'item' : 'book'} by replacing 'item' element and returns the updated JSON. EXAMPLE 6 json:setElement(json, '$.address', 'city', 'SF') If the json is the format {'name' : 'John', 'married' : true} ,the function will not update, but returns the original JSON as there are no valid path for $.address . toObject (Function) Function generate JSON object from the given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string that needs to be converted to a JSON object. STRING No Yes Examples EXAMPLE 1 json:toJson(json) This returns the JSON object corresponding to the given JSON string. toString (Function) Function generates a JSON string corresponding to a given JSON object. Syntax STRING json:toString( STRING|OBJECT json) STRING json:toString( STRING|OBJECT json, BOOL allow.escape) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object to generates a JSON string. STRING OBJECT No Yes allow.escape If this is set to true, quotes will be escaped in the resulting string. Otherwise quotes will not be escaped. false BOOL Yes Yes Examples EXAMPLE 1 json:toString(json) This returns the JSON string corresponding to a given JSON object. EXAMPLE 2 json:toString(json, true) Assume the json object has the field 'user' with value 'david'. With the allowEscape parameter set to true, this will return the string \"{\\\"user\\\":\\\"david\\\"}\" EXAMPLE 3 json:toString(json, false) Assume the json object has the field 'user' with value 'david'. With the allowEscape parameter set to false, this will return the string {\"user\":\"david\"} tokenize (Stream Processor) Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events. Syntax json:tokenize( STRING|OBJECT json, STRING path) json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON string. If the 'path' selects a JSON array then the system returns each element in the array as a JSON string via a separate events. STRING Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary . tokenizeAsObject (Stream Processor) Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path) json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON object. If the 'path' selects a JSON array then the system returns each element in the array as a JSON object via a separate events. OBJECT Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"2.0.11"},{"location":"api/2.0.11/#api-docs-v2011","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.11"},{"location":"api/2.0.11/#json","text":"","title":"Json"},{"location":"api/2.0.11/#group-aggregate-function","text":"This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:group( STRING|OBJECT json) OBJECT json:group( STRING|OBJECT json, BOOL distinct) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:group( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:group( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:group( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:group( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'.","title":"group (Aggregate Function)"},{"location":"api/2.0.11/#groupasobject-aggregate-function","text":"This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:groupAsObject( STRING|OBJECT json) OBJECT json:groupAsObject( STRING|OBJECT json, BOOL distinct) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:groupAsObject( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:groupAsObject( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:groupAsObject( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:groupAsObject( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'.","title":"groupAsObject (Aggregate Function)"},{"location":"api/2.0.11/#getbool-function","text":"Function retrieves the 'boolean' value specified in the given path of the JSON element. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing boolean value. STRING OBJECT No Yes path The JSON path to fetch the boolean value. STRING No Yes Examples EXAMPLE 1 json:getBool(json,'$.married') If the json is the format {'name' : 'John', 'married' : true} , the function returns true as there is a matching boolean at $.married . EXAMPLE 2 json:getBool(json,'$.name') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching boolean at $.name . EXAMPLE 3 json:getBool(json,'$.foo') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching element at $.foo .","title":"getBool (Function)"},{"location":"api/2.0.11/#getdouble-function","text":"Function retrieves the 'double' value specified in the given path of the JSON element. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing double value. STRING OBJECT No Yes path The JSON path to fetch the double value. STRING No Yes Examples EXAMPLE 1 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000.0 as there is a matching double at $.salary . EXAMPLE 2 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getDouble(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching double at $.name .","title":"getDouble (Function)"},{"location":"api/2.0.11/#getfloat-function","text":"Function retrieves the 'float' value specified in the given path of the JSON element. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing float value. STRING OBJECT No Yes path The JSON path to fetch the float value. STRING No Yes Examples EXAMPLE 1 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000 as there is a matching float at $.salary . EXAMPLE 2 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getFloat(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching float at $.name .","title":"getFloat (Function)"},{"location":"api/2.0.11/#getint-function","text":"Function retrieves the 'int' value specified in the given path of the JSON element. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing int value. STRING OBJECT No Yes path The JSON path to fetch the int value. STRING No Yes Examples EXAMPLE 1 json:getInt(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching int at $.age . EXAMPLE 2 json:getInt(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getInt(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching int at $.name .","title":"getInt (Function)"},{"location":"api/2.0.11/#getlong-function","text":"Function retrieves the 'long' value specified in the given path of the JSON element. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing long value. STRING OBJECT No Yes path The JSON path to fetch the long value. STRING No Yes Examples EXAMPLE 1 json:getLong(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching long at $.age . EXAMPLE 2 json:getLong(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getLong(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching long at $.name .","title":"getLong (Function)"},{"location":"api/2.0.11/#getobject-function","text":"Function retrieves the object specified in the given path of the JSON element. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing the object. STRING OBJECT No Yes path The JSON path to fetch the object. STRING No Yes Examples EXAMPLE 1 json:getObject(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as there is a matching object at $.address . EXAMPLE 2 json:getObject(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching object at $.age . EXAMPLE 3 json:getObject(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary .","title":"getObject (Function)"},{"location":"api/2.0.11/#getstring-function","text":"Function retrieves value specified in the given path of the JSON element as a string. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing value. STRING OBJECT No Yes path The JSON path to fetch the value. STRING No Yes Examples EXAMPLE 1 json:getString(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns John as there is a matching string at $.name . EXAMPLE 2 json:getString(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getString(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as a string as there is a matching element at $.age . EXAMPLE 4 json:getString(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as a string as there is a matching element at $.address .","title":"getString (Function)"},{"location":"api/2.0.11/#isexists-function","text":"Function checks whether there is a JSON element present in the given path or not. Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that needs to be searched for an elements. STRING OBJECT No Yes path The JSON path to check for the element. STRING No Yes Examples EXAMPLE 1 json:isExists(json, '$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns true as there is an element in the given path. EXAMPLE 2 json:isExists(json, '$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns false as there is no element in the given path.","title":"isExists (Function)"},{"location":"api/2.0.11/#setelement-function","text":"Function sets JSON element into a given JSON at the specific path. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element) OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON to which a JSON element needs to be added/replaced. STRING OBJECT No Yes path The JSON path where the JSON element should be added/replaced. STRING No Yes json.element The JSON element being added. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No Yes key The key to be used to refer the newly added element in the input JSON. Assumes the element is added to a JSON array, or the element selected by the JSON path will be updated. STRING Yes Yes Examples EXAMPLE 1 json:setElement(json, '$', {'country' : 'USA'} , 'address') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}} by adding 'address' element and returns the updated JSON. EXAMPLE 2 json:setElement(json, '$', 40, 'age') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'age' : 40} by adding 'age' element and returns the updated JSON. EXAMPLE 3 json:setElement(json, '$', 45, 'age') If the json is the format {'name' : 'John', 'married' : true, 'age' : 40} , the function updates the json as {'name' : 'John', 'married' : true, 'age' : 45} by replacing 'age' element and returns the updated JSON. EXAMPLE 4 json:setElement(json, '$.items', 'book') If the json is the format {'name' : 'Stationary', 'items' : ['pen', 'pencil']} , the function updates the json as {'name' : 'John', 'items' : ['pen', 'pencil', 'book']} by adding 'book' in the items array and returns the updated JSON. EXAMPLE 5 json:setElement(json, '$.item', 'book') If the json is the format {'name' : 'Stationary', 'item' : 'pen'} , the function updates the json as {'name' : 'John', 'item' : 'book'} by replacing 'item' element and returns the updated JSON. EXAMPLE 6 json:setElement(json, '$.address', 'city', 'SF') If the json is the format {'name' : 'John', 'married' : true} ,the function will not update, but returns the original JSON as there are no valid path for $.address .","title":"setElement (Function)"},{"location":"api/2.0.11/#toobject-function","text":"Function generate JSON object from the given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string that needs to be converted to a JSON object. STRING No Yes Examples EXAMPLE 1 json:toJson(json) This returns the JSON object corresponding to the given JSON string.","title":"toObject (Function)"},{"location":"api/2.0.11/#tostring-function","text":"Function generates a JSON string corresponding to a given JSON object. Syntax STRING json:toString( STRING|OBJECT json) STRING json:toString( STRING|OBJECT json, BOOL allow.escape) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object to generates a JSON string. STRING OBJECT No Yes allow.escape If this is set to true, quotes will be escaped in the resulting string. Otherwise quotes will not be escaped. false BOOL Yes Yes Examples EXAMPLE 1 json:toString(json) This returns the JSON string corresponding to a given JSON object. EXAMPLE 2 json:toString(json, true) Assume the json object has the field 'user' with value 'david'. With the allowEscape parameter set to true, this will return the string \"{\\\"user\\\":\\\"david\\\"}\" EXAMPLE 3 json:toString(json, false) Assume the json object has the field 'user' with value 'david'. With the allowEscape parameter set to false, this will return the string {\"user\":\"david\"}","title":"toString (Function)"},{"location":"api/2.0.11/#tokenize-stream-processor","text":"Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events. Syntax json:tokenize( STRING|OBJECT json, STRING path) json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON string. If the 'path' selects a JSON array then the system returns each element in the array as a JSON string via a separate events. STRING Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"tokenize (Stream Processor)"},{"location":"api/2.0.11/#tokenizeasobject-stream-processor","text":"Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path) json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON object. If the 'path' selects a JSON array then the system returns each element in the array as a JSON object via a separate events. OBJECT Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"tokenizeAsObject (Stream Processor)"},{"location":"api/2.0.2/","text":"API Docs - v2.0.2 Tested Siddhi Core version: 5.0.2 It could also support other Siddhi Core minor versions. Json getBool (Function) Function retrieves the 'boolean' value specified in the given path of the JSON element. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing boolean value. STRING OBJECT No Yes path The JSON path to fetch the boolean value. STRING No Yes Examples EXAMPLE 1 json:getBool(json,'$.married') If the json is the format {'name' : 'John', 'married' : true} , the function returns true as there is a matching boolean at $.married . EXAMPLE 2 json:getBool(json,'$.name') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching boolean at $.name . EXAMPLE 3 json:getBool(json,'$.foo') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching element at $.foo . getDouble (Function) Function retrieves the 'double' value specified in the given path of the JSON element. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing double value. STRING OBJECT No Yes path The JSON path to fetch the double value. STRING No Yes Examples EXAMPLE 1 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000.0 as there is a matching double at $.salary . EXAMPLE 2 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getDouble(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching double at $.name . getFloat (Function) Function retrieves the 'float' value specified in the given path of the JSON element. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing float value. STRING OBJECT No Yes path The JSON path to fetch the float value. STRING No Yes Examples EXAMPLE 1 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000 as there is a matching float at $.salary . EXAMPLE 2 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getFloat(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching float at $.name . getInt (Function) Function retrieves the 'int' value specified in the given path of the JSON element. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing int value. STRING OBJECT No Yes path The JSON path to fetch the int value. STRING No Yes Examples EXAMPLE 1 json:getInt(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching int at $.age . EXAMPLE 2 json:getInt(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getInt(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching int at $.name . getLong (Function) Function retrieves the 'long' value specified in the given path of the JSON element. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing long value. STRING OBJECT No Yes path The JSON path to fetch the long value. STRING No Yes Examples EXAMPLE 1 json:getLong(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching long at $.age . EXAMPLE 2 json:getLong(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getLong(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching long at $.name . getObject (Function) Function retrieves the object specified in the given path of the JSON element. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing the object. STRING OBJECT No Yes path The JSON path to fetch the object. STRING No Yes Examples EXAMPLE 1 json:getObject(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as there is a matching object at $.address . EXAMPLE 2 json:getObject(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching object at $.age . EXAMPLE 3 json:getObject(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . getString (Function) Function retrieves value specified in the given path of the JSON element as a string. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing value. STRING OBJECT No Yes path The JSON path to fetch the value. STRING No Yes Examples EXAMPLE 1 json:getString(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns John as there is a matching string at $.name . EXAMPLE 2 json:getString(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getString(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as a string as there is a matching element at $.age . EXAMPLE 4 json:getString(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as a string as there is a matching element at $.address . isExists (Function) Function checks whether there is a JSON element present in the given path or not. Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that needs to be searched for an elements. STRING OBJECT No Yes path The JSON path to check for the element. STRING No Yes Examples EXAMPLE 1 json:isExists(json, '$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns true as there is an element in the given path. EXAMPLE 2 json:isExists(json, '$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns false as there is no element in the given path. setElement (Function) Function sets JSON element into a given JSON at the specific path. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element) OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON to which a JSON element needs to be added/replaced. STRING OBJECT No Yes path The JSON path where the JSON element should be added/replaced. STRING No Yes json.element The JSON element being added. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No Yes key The key to be used to refer the newly added element in the input JSON. Assumes the element is added to a JSON array, or the element selected by the JSON path will be updated. STRING Yes Yes Examples EXAMPLE 1 json:setElement(json, '$', {'country' : 'USA'} , 'address') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}} by adding 'address' element and returns the updated JSON. EXAMPLE 2 json:setElement(json, '$', 40, 'age') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'age' : 40} by adding 'age' element and returns the updated JSON. EXAMPLE 3 json:setElement(json, '$', 45, 'age') If the json is the format {'name' : 'John', 'married' : true, 'age' : 40} , the function updates the json as {'name' : 'John', 'married' : true, 'age' : 45} by replacing 'age' element and returns the updated JSON. EXAMPLE 4 json:setElement(json, '$.items', 'book') If the json is the format {'name' : 'Stationary', 'items' : ['pen', 'pencil']} , the function updates the json as {'name' : 'John', 'items' : ['pen', 'pencil', 'book']} by adding 'book' in the items array and returns the updated JSON. EXAMPLE 5 json:setElement(json, '$.item', 'book') If the json is the format {'name' : 'Stationary', 'item' : 'pen'} , the function updates the json as {'name' : 'John', 'item' : 'book'} by replacing 'item' element and returns the updated JSON. EXAMPLE 6 json:setElement(json, '$.address', 'city', 'SF') If the json is the format {'name' : 'John', 'married' : true} ,the function will not update, but returns the original JSON as there are no valid path for $.address . toObject (Function) Function generate JSON object from the given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string that needs to be converted to a JSON object. STRING No Yes Examples EXAMPLE 1 json:toJson(json) This returns the JSON object corresponding to the given JSON string. toString (Function) Function generates a JSON string corresponding to a given JSON object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object to generates a JSON string. OBJECT No Yes Examples EXAMPLE 1 json:toString(json) This returns the JSON string corresponding to a given JSON object. tokenize (Stream Processor) Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events. Syntax json:tokenize( STRING|OBJECT json, STRING path) json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON string. If the 'path' selects a JSON array then the system returns each element in the array as a JSON string via a separate events. STRING Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary . tokenizeAsObject (Stream Processor) Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path) json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON object. If the 'path' selects a JSON array then the system returns each element in the array as a JSON object via a separate events. OBJECT Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"2.0.2"},{"location":"api/2.0.2/#api-docs-v202","text":"Tested Siddhi Core version: 5.0.2 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.2"},{"location":"api/2.0.2/#json","text":"","title":"Json"},{"location":"api/2.0.2/#getbool-function","text":"Function retrieves the 'boolean' value specified in the given path of the JSON element. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing boolean value. STRING OBJECT No Yes path The JSON path to fetch the boolean value. STRING No Yes Examples EXAMPLE 1 json:getBool(json,'$.married') If the json is the format {'name' : 'John', 'married' : true} , the function returns true as there is a matching boolean at $.married . EXAMPLE 2 json:getBool(json,'$.name') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching boolean at $.name . EXAMPLE 3 json:getBool(json,'$.foo') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching element at $.foo .","title":"getBool (Function)"},{"location":"api/2.0.2/#getdouble-function","text":"Function retrieves the 'double' value specified in the given path of the JSON element. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing double value. STRING OBJECT No Yes path The JSON path to fetch the double value. STRING No Yes Examples EXAMPLE 1 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000.0 as there is a matching double at $.salary . EXAMPLE 2 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getDouble(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching double at $.name .","title":"getDouble (Function)"},{"location":"api/2.0.2/#getfloat-function","text":"Function retrieves the 'float' value specified in the given path of the JSON element. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing float value. STRING OBJECT No Yes path The JSON path to fetch the float value. STRING No Yes Examples EXAMPLE 1 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000 as there is a matching float at $.salary . EXAMPLE 2 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getFloat(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching float at $.name .","title":"getFloat (Function)"},{"location":"api/2.0.2/#getint-function","text":"Function retrieves the 'int' value specified in the given path of the JSON element. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing int value. STRING OBJECT No Yes path The JSON path to fetch the int value. STRING No Yes Examples EXAMPLE 1 json:getInt(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching int at $.age . EXAMPLE 2 json:getInt(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getInt(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching int at $.name .","title":"getInt (Function)"},{"location":"api/2.0.2/#getlong-function","text":"Function retrieves the 'long' value specified in the given path of the JSON element. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing long value. STRING OBJECT No Yes path The JSON path to fetch the long value. STRING No Yes Examples EXAMPLE 1 json:getLong(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching long at $.age . EXAMPLE 2 json:getLong(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getLong(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching long at $.name .","title":"getLong (Function)"},{"location":"api/2.0.2/#getobject-function","text":"Function retrieves the object specified in the given path of the JSON element. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing the object. STRING OBJECT No Yes path The JSON path to fetch the object. STRING No Yes Examples EXAMPLE 1 json:getObject(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as there is a matching object at $.address . EXAMPLE 2 json:getObject(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching object at $.age . EXAMPLE 3 json:getObject(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary .","title":"getObject (Function)"},{"location":"api/2.0.2/#getstring-function","text":"Function retrieves value specified in the given path of the JSON element as a string. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing value. STRING OBJECT No Yes path The JSON path to fetch the value. STRING No Yes Examples EXAMPLE 1 json:getString(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns John as there is a matching string at $.name . EXAMPLE 2 json:getString(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getString(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as a string as there is a matching element at $.age . EXAMPLE 4 json:getString(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as a string as there is a matching element at $.address .","title":"getString (Function)"},{"location":"api/2.0.2/#isexists-function","text":"Function checks whether there is a JSON element present in the given path or not. Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that needs to be searched for an elements. STRING OBJECT No Yes path The JSON path to check for the element. STRING No Yes Examples EXAMPLE 1 json:isExists(json, '$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns true as there is an element in the given path. EXAMPLE 2 json:isExists(json, '$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns false as there is no element in the given path.","title":"isExists (Function)"},{"location":"api/2.0.2/#setelement-function","text":"Function sets JSON element into a given JSON at the specific path. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element) OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON to which a JSON element needs to be added/replaced. STRING OBJECT No Yes path The JSON path where the JSON element should be added/replaced. STRING No Yes json.element The JSON element being added. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No Yes key The key to be used to refer the newly added element in the input JSON. Assumes the element is added to a JSON array, or the element selected by the JSON path will be updated. STRING Yes Yes Examples EXAMPLE 1 json:setElement(json, '$', {'country' : 'USA'} , 'address') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}} by adding 'address' element and returns the updated JSON. EXAMPLE 2 json:setElement(json, '$', 40, 'age') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'age' : 40} by adding 'age' element and returns the updated JSON. EXAMPLE 3 json:setElement(json, '$', 45, 'age') If the json is the format {'name' : 'John', 'married' : true, 'age' : 40} , the function updates the json as {'name' : 'John', 'married' : true, 'age' : 45} by replacing 'age' element and returns the updated JSON. EXAMPLE 4 json:setElement(json, '$.items', 'book') If the json is the format {'name' : 'Stationary', 'items' : ['pen', 'pencil']} , the function updates the json as {'name' : 'John', 'items' : ['pen', 'pencil', 'book']} by adding 'book' in the items array and returns the updated JSON. EXAMPLE 5 json:setElement(json, '$.item', 'book') If the json is the format {'name' : 'Stationary', 'item' : 'pen'} , the function updates the json as {'name' : 'John', 'item' : 'book'} by replacing 'item' element and returns the updated JSON. EXAMPLE 6 json:setElement(json, '$.address', 'city', 'SF') If the json is the format {'name' : 'John', 'married' : true} ,the function will not update, but returns the original JSON as there are no valid path for $.address .","title":"setElement (Function)"},{"location":"api/2.0.2/#toobject-function","text":"Function generate JSON object from the given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string that needs to be converted to a JSON object. STRING No Yes Examples EXAMPLE 1 json:toJson(json) This returns the JSON object corresponding to the given JSON string.","title":"toObject (Function)"},{"location":"api/2.0.2/#tostring-function","text":"Function generates a JSON string corresponding to a given JSON object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object to generates a JSON string. OBJECT No Yes Examples EXAMPLE 1 json:toString(json) This returns the JSON string corresponding to a given JSON object.","title":"toString (Function)"},{"location":"api/2.0.2/#tokenize-stream-processor","text":"Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events. Syntax json:tokenize( STRING|OBJECT json, STRING path) json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON string. If the 'path' selects a JSON array then the system returns each element in the array as a JSON string via a separate events. STRING Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"tokenize (Stream Processor)"},{"location":"api/2.0.2/#tokenizeasobject-stream-processor","text":"Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path) json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON object. If the 'path' selects a JSON array then the system returns each element in the array as a JSON object via a separate events. OBJECT Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"tokenizeAsObject (Stream Processor)"},{"location":"api/2.0.3/","text":"API Docs - v2.0.3 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Json group (Aggregate Function) This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:group( STRING json) OBJECT json:group( STRING json, BOOL distinct) OBJECT json:group( STRING json, STRING enclosing.element) OBJECT json:group( STRING json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:group( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:group( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:group( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:group( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'. groupAsObject (Aggregate Function) This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:groupAsObject( STRING json) OBJECT json:groupAsObject( STRING json, BOOL distinct) OBJECT json:groupAsObject( STRING json, STRING enclosing.element) OBJECT json:groupAsObject( STRING json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:groupAsObject( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:groupAsObject( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:groupAsObject( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:groupAsObject( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'. getBool (Function) Function retrieves the 'boolean' value specified in the given path of the JSON element. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing boolean value. STRING OBJECT No Yes path The JSON path to fetch the boolean value. STRING No Yes Examples EXAMPLE 1 json:getBool(json,'$.married') If the json is the format {'name' : 'John', 'married' : true} , the function returns true as there is a matching boolean at $.married . EXAMPLE 2 json:getBool(json,'$.name') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching boolean at $.name . EXAMPLE 3 json:getBool(json,'$.foo') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching element at $.foo . getDouble (Function) Function retrieves the 'double' value specified in the given path of the JSON element. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing double value. STRING OBJECT No Yes path The JSON path to fetch the double value. STRING No Yes Examples EXAMPLE 1 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000.0 as there is a matching double at $.salary . EXAMPLE 2 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getDouble(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching double at $.name . getFloat (Function) Function retrieves the 'float' value specified in the given path of the JSON element. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing float value. STRING OBJECT No Yes path The JSON path to fetch the float value. STRING No Yes Examples EXAMPLE 1 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000 as there is a matching float at $.salary . EXAMPLE 2 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getFloat(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching float at $.name . getInt (Function) Function retrieves the 'int' value specified in the given path of the JSON element. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing int value. STRING OBJECT No Yes path The JSON path to fetch the int value. STRING No Yes Examples EXAMPLE 1 json:getInt(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching int at $.age . EXAMPLE 2 json:getInt(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getInt(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching int at $.name . getLong (Function) Function retrieves the 'long' value specified in the given path of the JSON element. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing long value. STRING OBJECT No Yes path The JSON path to fetch the long value. STRING No Yes Examples EXAMPLE 1 json:getLong(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching long at $.age . EXAMPLE 2 json:getLong(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getLong(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching long at $.name . getObject (Function) Function retrieves the object specified in the given path of the JSON element. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing the object. STRING OBJECT No Yes path The JSON path to fetch the object. STRING No Yes Examples EXAMPLE 1 json:getObject(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as there is a matching object at $.address . EXAMPLE 2 json:getObject(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching object at $.age . EXAMPLE 3 json:getObject(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . getString (Function) Function retrieves value specified in the given path of the JSON element as a string. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing value. STRING OBJECT No Yes path The JSON path to fetch the value. STRING No Yes Examples EXAMPLE 1 json:getString(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns John as there is a matching string at $.name . EXAMPLE 2 json:getString(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getString(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as a string as there is a matching element at $.age . EXAMPLE 4 json:getString(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as a string as there is a matching element at $.address . isExists (Function) Function checks whether there is a JSON element present in the given path or not. Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that needs to be searched for an elements. STRING OBJECT No Yes path The JSON path to check for the element. STRING No Yes Examples EXAMPLE 1 json:isExists(json, '$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns true as there is an element in the given path. EXAMPLE 2 json:isExists(json, '$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns false as there is no element in the given path. setElement (Function) Function sets JSON element into a given JSON at the specific path. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element) OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON to which a JSON element needs to be added/replaced. STRING OBJECT No Yes path The JSON path where the JSON element should be added/replaced. STRING No Yes json.element The JSON element being added. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No Yes key The key to be used to refer the newly added element in the input JSON. Assumes the element is added to a JSON array, or the element selected by the JSON path will be updated. STRING Yes Yes Examples EXAMPLE 1 json:setElement(json, '$', {'country' : 'USA'} , 'address') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}} by adding 'address' element and returns the updated JSON. EXAMPLE 2 json:setElement(json, '$', 40, 'age') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'age' : 40} by adding 'age' element and returns the updated JSON. EXAMPLE 3 json:setElement(json, '$', 45, 'age') If the json is the format {'name' : 'John', 'married' : true, 'age' : 40} , the function updates the json as {'name' : 'John', 'married' : true, 'age' : 45} by replacing 'age' element and returns the updated JSON. EXAMPLE 4 json:setElement(json, '$.items', 'book') If the json is the format {'name' : 'Stationary', 'items' : ['pen', 'pencil']} , the function updates the json as {'name' : 'John', 'items' : ['pen', 'pencil', 'book']} by adding 'book' in the items array and returns the updated JSON. EXAMPLE 5 json:setElement(json, '$.item', 'book') If the json is the format {'name' : 'Stationary', 'item' : 'pen'} , the function updates the json as {'name' : 'John', 'item' : 'book'} by replacing 'item' element and returns the updated JSON. EXAMPLE 6 json:setElement(json, '$.address', 'city', 'SF') If the json is the format {'name' : 'John', 'married' : true} ,the function will not update, but returns the original JSON as there are no valid path for $.address . toObject (Function) Function generate JSON object from the given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string that needs to be converted to a JSON object. STRING No Yes Examples EXAMPLE 1 json:toJson(json) This returns the JSON object corresponding to the given JSON string. toString (Function) Function generates a JSON string corresponding to a given JSON object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object to generates a JSON string. OBJECT No Yes Examples EXAMPLE 1 json:toString(json) This returns the JSON string corresponding to a given JSON object. tokenize (Stream Processor) Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events. Syntax json:tokenize( STRING|OBJECT json, STRING path) json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON string. If the 'path' selects a JSON array then the system returns each element in the array as a JSON string via a separate events. STRING Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary . tokenizeAsObject (Stream Processor) Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path) json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON object. If the 'path' selects a JSON array then the system returns each element in the array as a JSON object via a separate events. OBJECT Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"2.0.3"},{"location":"api/2.0.3/#api-docs-v203","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.3"},{"location":"api/2.0.3/#json","text":"","title":"Json"},{"location":"api/2.0.3/#group-aggregate-function","text":"This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:group( STRING json) OBJECT json:group( STRING json, BOOL distinct) OBJECT json:group( STRING json, STRING enclosing.element) OBJECT json:group( STRING json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:group( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:group( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:group( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:group( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'.","title":"group (Aggregate Function)"},{"location":"api/2.0.3/#groupasobject-aggregate-function","text":"This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:groupAsObject( STRING json) OBJECT json:groupAsObject( STRING json, BOOL distinct) OBJECT json:groupAsObject( STRING json, STRING enclosing.element) OBJECT json:groupAsObject( STRING json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:groupAsObject( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:groupAsObject( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:groupAsObject( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:groupAsObject( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'.","title":"groupAsObject (Aggregate Function)"},{"location":"api/2.0.3/#getbool-function","text":"Function retrieves the 'boolean' value specified in the given path of the JSON element. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing boolean value. STRING OBJECT No Yes path The JSON path to fetch the boolean value. STRING No Yes Examples EXAMPLE 1 json:getBool(json,'$.married') If the json is the format {'name' : 'John', 'married' : true} , the function returns true as there is a matching boolean at $.married . EXAMPLE 2 json:getBool(json,'$.name') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching boolean at $.name . EXAMPLE 3 json:getBool(json,'$.foo') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching element at $.foo .","title":"getBool (Function)"},{"location":"api/2.0.3/#getdouble-function","text":"Function retrieves the 'double' value specified in the given path of the JSON element. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing double value. STRING OBJECT No Yes path The JSON path to fetch the double value. STRING No Yes Examples EXAMPLE 1 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000.0 as there is a matching double at $.salary . EXAMPLE 2 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getDouble(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching double at $.name .","title":"getDouble (Function)"},{"location":"api/2.0.3/#getfloat-function","text":"Function retrieves the 'float' value specified in the given path of the JSON element. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing float value. STRING OBJECT No Yes path The JSON path to fetch the float value. STRING No Yes Examples EXAMPLE 1 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000 as there is a matching float at $.salary . EXAMPLE 2 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getFloat(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching float at $.name .","title":"getFloat (Function)"},{"location":"api/2.0.3/#getint-function","text":"Function retrieves the 'int' value specified in the given path of the JSON element. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing int value. STRING OBJECT No Yes path The JSON path to fetch the int value. STRING No Yes Examples EXAMPLE 1 json:getInt(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching int at $.age . EXAMPLE 2 json:getInt(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getInt(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching int at $.name .","title":"getInt (Function)"},{"location":"api/2.0.3/#getlong-function","text":"Function retrieves the 'long' value specified in the given path of the JSON element. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing long value. STRING OBJECT No Yes path The JSON path to fetch the long value. STRING No Yes Examples EXAMPLE 1 json:getLong(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching long at $.age . EXAMPLE 2 json:getLong(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getLong(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching long at $.name .","title":"getLong (Function)"},{"location":"api/2.0.3/#getobject-function","text":"Function retrieves the object specified in the given path of the JSON element. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing the object. STRING OBJECT No Yes path The JSON path to fetch the object. STRING No Yes Examples EXAMPLE 1 json:getObject(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as there is a matching object at $.address . EXAMPLE 2 json:getObject(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching object at $.age . EXAMPLE 3 json:getObject(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary .","title":"getObject (Function)"},{"location":"api/2.0.3/#getstring-function","text":"Function retrieves value specified in the given path of the JSON element as a string. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing value. STRING OBJECT No Yes path The JSON path to fetch the value. STRING No Yes Examples EXAMPLE 1 json:getString(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns John as there is a matching string at $.name . EXAMPLE 2 json:getString(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getString(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as a string as there is a matching element at $.age . EXAMPLE 4 json:getString(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as a string as there is a matching element at $.address .","title":"getString (Function)"},{"location":"api/2.0.3/#isexists-function","text":"Function checks whether there is a JSON element present in the given path or not. Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that needs to be searched for an elements. STRING OBJECT No Yes path The JSON path to check for the element. STRING No Yes Examples EXAMPLE 1 json:isExists(json, '$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns true as there is an element in the given path. EXAMPLE 2 json:isExists(json, '$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns false as there is no element in the given path.","title":"isExists (Function)"},{"location":"api/2.0.3/#setelement-function","text":"Function sets JSON element into a given JSON at the specific path. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element) OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON to which a JSON element needs to be added/replaced. STRING OBJECT No Yes path The JSON path where the JSON element should be added/replaced. STRING No Yes json.element The JSON element being added. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No Yes key The key to be used to refer the newly added element in the input JSON. Assumes the element is added to a JSON array, or the element selected by the JSON path will be updated. STRING Yes Yes Examples EXAMPLE 1 json:setElement(json, '$', {'country' : 'USA'} , 'address') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}} by adding 'address' element and returns the updated JSON. EXAMPLE 2 json:setElement(json, '$', 40, 'age') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'age' : 40} by adding 'age' element and returns the updated JSON. EXAMPLE 3 json:setElement(json, '$', 45, 'age') If the json is the format {'name' : 'John', 'married' : true, 'age' : 40} , the function updates the json as {'name' : 'John', 'married' : true, 'age' : 45} by replacing 'age' element and returns the updated JSON. EXAMPLE 4 json:setElement(json, '$.items', 'book') If the json is the format {'name' : 'Stationary', 'items' : ['pen', 'pencil']} , the function updates the json as {'name' : 'John', 'items' : ['pen', 'pencil', 'book']} by adding 'book' in the items array and returns the updated JSON. EXAMPLE 5 json:setElement(json, '$.item', 'book') If the json is the format {'name' : 'Stationary', 'item' : 'pen'} , the function updates the json as {'name' : 'John', 'item' : 'book'} by replacing 'item' element and returns the updated JSON. EXAMPLE 6 json:setElement(json, '$.address', 'city', 'SF') If the json is the format {'name' : 'John', 'married' : true} ,the function will not update, but returns the original JSON as there are no valid path for $.address .","title":"setElement (Function)"},{"location":"api/2.0.3/#toobject-function","text":"Function generate JSON object from the given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string that needs to be converted to a JSON object. STRING No Yes Examples EXAMPLE 1 json:toJson(json) This returns the JSON object corresponding to the given JSON string.","title":"toObject (Function)"},{"location":"api/2.0.3/#tostring-function","text":"Function generates a JSON string corresponding to a given JSON object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object to generates a JSON string. OBJECT No Yes Examples EXAMPLE 1 json:toString(json) This returns the JSON string corresponding to a given JSON object.","title":"toString (Function)"},{"location":"api/2.0.3/#tokenize-stream-processor","text":"Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events. Syntax json:tokenize( STRING|OBJECT json, STRING path) json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON string. If the 'path' selects a JSON array then the system returns each element in the array as a JSON string via a separate events. STRING Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"tokenize (Stream Processor)"},{"location":"api/2.0.3/#tokenizeasobject-stream-processor","text":"Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path) json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON object. If the 'path' selects a JSON array then the system returns each element in the array as a JSON object via a separate events. OBJECT Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"tokenizeAsObject (Stream Processor)"},{"location":"api/2.0.4/","text":"API Docs - v2.0.4 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Json group (Aggregate Function) This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:group( STRING|OBJECT json) OBJECT json:group( STRING|OBJECT json, BOOL distinct) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:group( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:group( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:group( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:group( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'. groupAsObject (Aggregate Function) This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:groupAsObject( STRING|OBJECT json) OBJECT json:groupAsObject( STRING|OBJECT json, BOOL distinct) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:groupAsObject( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:groupAsObject( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:groupAsObject( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:groupAsObject( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'. getBool (Function) Function retrieves the 'boolean' value specified in the given path of the JSON element. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing boolean value. STRING OBJECT No Yes path The JSON path to fetch the boolean value. STRING No Yes Examples EXAMPLE 1 json:getBool(json,'$.married') If the json is the format {'name' : 'John', 'married' : true} , the function returns true as there is a matching boolean at $.married . EXAMPLE 2 json:getBool(json,'$.name') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching boolean at $.name . EXAMPLE 3 json:getBool(json,'$.foo') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching element at $.foo . getDouble (Function) Function retrieves the 'double' value specified in the given path of the JSON element. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing double value. STRING OBJECT No Yes path The JSON path to fetch the double value. STRING No Yes Examples EXAMPLE 1 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000.0 as there is a matching double at $.salary . EXAMPLE 2 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getDouble(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching double at $.name . getFloat (Function) Function retrieves the 'float' value specified in the given path of the JSON element. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing float value. STRING OBJECT No Yes path The JSON path to fetch the float value. STRING No Yes Examples EXAMPLE 1 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000 as there is a matching float at $.salary . EXAMPLE 2 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getFloat(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching float at $.name . getInt (Function) Function retrieves the 'int' value specified in the given path of the JSON element. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing int value. STRING OBJECT No Yes path The JSON path to fetch the int value. STRING No Yes Examples EXAMPLE 1 json:getInt(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching int at $.age . EXAMPLE 2 json:getInt(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getInt(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching int at $.name . getLong (Function) Function retrieves the 'long' value specified in the given path of the JSON element. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing long value. STRING OBJECT No Yes path The JSON path to fetch the long value. STRING No Yes Examples EXAMPLE 1 json:getLong(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching long at $.age . EXAMPLE 2 json:getLong(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getLong(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching long at $.name . getObject (Function) Function retrieves the object specified in the given path of the JSON element. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing the object. STRING OBJECT No Yes path The JSON path to fetch the object. STRING No Yes Examples EXAMPLE 1 json:getObject(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as there is a matching object at $.address . EXAMPLE 2 json:getObject(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching object at $.age . EXAMPLE 3 json:getObject(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . getString (Function) Function retrieves value specified in the given path of the JSON element as a string. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing value. STRING OBJECT No Yes path The JSON path to fetch the value. STRING No Yes Examples EXAMPLE 1 json:getString(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns John as there is a matching string at $.name . EXAMPLE 2 json:getString(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getString(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as a string as there is a matching element at $.age . EXAMPLE 4 json:getString(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as a string as there is a matching element at $.address . isExists (Function) Function checks whether there is a JSON element present in the given path or not. Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that needs to be searched for an elements. STRING OBJECT No Yes path The JSON path to check for the element. STRING No Yes Examples EXAMPLE 1 json:isExists(json, '$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns true as there is an element in the given path. EXAMPLE 2 json:isExists(json, '$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns false as there is no element in the given path. setElement (Function) Function sets JSON element into a given JSON at the specific path. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element) OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON to which a JSON element needs to be added/replaced. STRING OBJECT No Yes path The JSON path where the JSON element should be added/replaced. STRING No Yes json.element The JSON element being added. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No Yes key The key to be used to refer the newly added element in the input JSON. Assumes the element is added to a JSON array, or the element selected by the JSON path will be updated. STRING Yes Yes Examples EXAMPLE 1 json:setElement(json, '$', {'country' : 'USA'} , 'address') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}} by adding 'address' element and returns the updated JSON. EXAMPLE 2 json:setElement(json, '$', 40, 'age') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'age' : 40} by adding 'age' element and returns the updated JSON. EXAMPLE 3 json:setElement(json, '$', 45, 'age') If the json is the format {'name' : 'John', 'married' : true, 'age' : 40} , the function updates the json as {'name' : 'John', 'married' : true, 'age' : 45} by replacing 'age' element and returns the updated JSON. EXAMPLE 4 json:setElement(json, '$.items', 'book') If the json is the format {'name' : 'Stationary', 'items' : ['pen', 'pencil']} , the function updates the json as {'name' : 'John', 'items' : ['pen', 'pencil', 'book']} by adding 'book' in the items array and returns the updated JSON. EXAMPLE 5 json:setElement(json, '$.item', 'book') If the json is the format {'name' : 'Stationary', 'item' : 'pen'} , the function updates the json as {'name' : 'John', 'item' : 'book'} by replacing 'item' element and returns the updated JSON. EXAMPLE 6 json:setElement(json, '$.address', 'city', 'SF') If the json is the format {'name' : 'John', 'married' : true} ,the function will not update, but returns the original JSON as there are no valid path for $.address . toObject (Function) Function generate JSON object from the given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string that needs to be converted to a JSON object. STRING No Yes Examples EXAMPLE 1 json:toJson(json) This returns the JSON object corresponding to the given JSON string. toString (Function) Function generates a JSON string corresponding to a given JSON object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object to generates a JSON string. OBJECT No Yes Examples EXAMPLE 1 json:toString(json) This returns the JSON string corresponding to a given JSON object. tokenize (Stream Processor) Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events. Syntax json:tokenize( STRING|OBJECT json, STRING path) json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON string. If the 'path' selects a JSON array then the system returns each element in the array as a JSON string via a separate events. STRING Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary . tokenizeAsObject (Stream Processor) Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path) json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON object. If the 'path' selects a JSON array then the system returns each element in the array as a JSON object via a separate events. OBJECT Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"2.0.4"},{"location":"api/2.0.4/#api-docs-v204","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.4"},{"location":"api/2.0.4/#json","text":"","title":"Json"},{"location":"api/2.0.4/#group-aggregate-function","text":"This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:group( STRING|OBJECT json) OBJECT json:group( STRING|OBJECT json, BOOL distinct) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:group( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:group( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:group( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:group( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'.","title":"group (Aggregate Function)"},{"location":"api/2.0.4/#groupasobject-aggregate-function","text":"This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:groupAsObject( STRING|OBJECT json) OBJECT json:groupAsObject( STRING|OBJECT json, BOOL distinct) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:groupAsObject( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:groupAsObject( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:groupAsObject( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:groupAsObject( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'.","title":"groupAsObject (Aggregate Function)"},{"location":"api/2.0.4/#getbool-function","text":"Function retrieves the 'boolean' value specified in the given path of the JSON element. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing boolean value. STRING OBJECT No Yes path The JSON path to fetch the boolean value. STRING No Yes Examples EXAMPLE 1 json:getBool(json,'$.married') If the json is the format {'name' : 'John', 'married' : true} , the function returns true as there is a matching boolean at $.married . EXAMPLE 2 json:getBool(json,'$.name') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching boolean at $.name . EXAMPLE 3 json:getBool(json,'$.foo') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching element at $.foo .","title":"getBool (Function)"},{"location":"api/2.0.4/#getdouble-function","text":"Function retrieves the 'double' value specified in the given path of the JSON element. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing double value. STRING OBJECT No Yes path The JSON path to fetch the double value. STRING No Yes Examples EXAMPLE 1 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000.0 as there is a matching double at $.salary . EXAMPLE 2 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getDouble(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching double at $.name .","title":"getDouble (Function)"},{"location":"api/2.0.4/#getfloat-function","text":"Function retrieves the 'float' value specified in the given path of the JSON element. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing float value. STRING OBJECT No Yes path The JSON path to fetch the float value. STRING No Yes Examples EXAMPLE 1 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000 as there is a matching float at $.salary . EXAMPLE 2 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getFloat(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching float at $.name .","title":"getFloat (Function)"},{"location":"api/2.0.4/#getint-function","text":"Function retrieves the 'int' value specified in the given path of the JSON element. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing int value. STRING OBJECT No Yes path The JSON path to fetch the int value. STRING No Yes Examples EXAMPLE 1 json:getInt(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching int at $.age . EXAMPLE 2 json:getInt(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getInt(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching int at $.name .","title":"getInt (Function)"},{"location":"api/2.0.4/#getlong-function","text":"Function retrieves the 'long' value specified in the given path of the JSON element. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing long value. STRING OBJECT No Yes path The JSON path to fetch the long value. STRING No Yes Examples EXAMPLE 1 json:getLong(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching long at $.age . EXAMPLE 2 json:getLong(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getLong(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching long at $.name .","title":"getLong (Function)"},{"location":"api/2.0.4/#getobject-function","text":"Function retrieves the object specified in the given path of the JSON element. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing the object. STRING OBJECT No Yes path The JSON path to fetch the object. STRING No Yes Examples EXAMPLE 1 json:getObject(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as there is a matching object at $.address . EXAMPLE 2 json:getObject(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching object at $.age . EXAMPLE 3 json:getObject(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary .","title":"getObject (Function)"},{"location":"api/2.0.4/#getstring-function","text":"Function retrieves value specified in the given path of the JSON element as a string. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing value. STRING OBJECT No Yes path The JSON path to fetch the value. STRING No Yes Examples EXAMPLE 1 json:getString(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns John as there is a matching string at $.name . EXAMPLE 2 json:getString(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getString(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as a string as there is a matching element at $.age . EXAMPLE 4 json:getString(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as a string as there is a matching element at $.address .","title":"getString (Function)"},{"location":"api/2.0.4/#isexists-function","text":"Function checks whether there is a JSON element present in the given path or not. Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that needs to be searched for an elements. STRING OBJECT No Yes path The JSON path to check for the element. STRING No Yes Examples EXAMPLE 1 json:isExists(json, '$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns true as there is an element in the given path. EXAMPLE 2 json:isExists(json, '$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns false as there is no element in the given path.","title":"isExists (Function)"},{"location":"api/2.0.4/#setelement-function","text":"Function sets JSON element into a given JSON at the specific path. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element) OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON to which a JSON element needs to be added/replaced. STRING OBJECT No Yes path The JSON path where the JSON element should be added/replaced. STRING No Yes json.element The JSON element being added. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No Yes key The key to be used to refer the newly added element in the input JSON. Assumes the element is added to a JSON array, or the element selected by the JSON path will be updated. STRING Yes Yes Examples EXAMPLE 1 json:setElement(json, '$', {'country' : 'USA'} , 'address') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}} by adding 'address' element and returns the updated JSON. EXAMPLE 2 json:setElement(json, '$', 40, 'age') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'age' : 40} by adding 'age' element and returns the updated JSON. EXAMPLE 3 json:setElement(json, '$', 45, 'age') If the json is the format {'name' : 'John', 'married' : true, 'age' : 40} , the function updates the json as {'name' : 'John', 'married' : true, 'age' : 45} by replacing 'age' element and returns the updated JSON. EXAMPLE 4 json:setElement(json, '$.items', 'book') If the json is the format {'name' : 'Stationary', 'items' : ['pen', 'pencil']} , the function updates the json as {'name' : 'John', 'items' : ['pen', 'pencil', 'book']} by adding 'book' in the items array and returns the updated JSON. EXAMPLE 5 json:setElement(json, '$.item', 'book') If the json is the format {'name' : 'Stationary', 'item' : 'pen'} , the function updates the json as {'name' : 'John', 'item' : 'book'} by replacing 'item' element and returns the updated JSON. EXAMPLE 6 json:setElement(json, '$.address', 'city', 'SF') If the json is the format {'name' : 'John', 'married' : true} ,the function will not update, but returns the original JSON as there are no valid path for $.address .","title":"setElement (Function)"},{"location":"api/2.0.4/#toobject-function","text":"Function generate JSON object from the given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string that needs to be converted to a JSON object. STRING No Yes Examples EXAMPLE 1 json:toJson(json) This returns the JSON object corresponding to the given JSON string.","title":"toObject (Function)"},{"location":"api/2.0.4/#tostring-function","text":"Function generates a JSON string corresponding to a given JSON object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object to generates a JSON string. OBJECT No Yes Examples EXAMPLE 1 json:toString(json) This returns the JSON string corresponding to a given JSON object.","title":"toString (Function)"},{"location":"api/2.0.4/#tokenize-stream-processor","text":"Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events. Syntax json:tokenize( STRING|OBJECT json, STRING path) json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON string. If the 'path' selects a JSON array then the system returns each element in the array as a JSON string via a separate events. STRING Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"tokenize (Stream Processor)"},{"location":"api/2.0.4/#tokenizeasobject-stream-processor","text":"Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path) json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON object. If the 'path' selects a JSON array then the system returns each element in the array as a JSON object via a separate events. OBJECT Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"tokenizeAsObject (Stream Processor)"},{"location":"api/2.0.5/","text":"API Docs - v2.0.5 Tested Siddhi Core version: 5.1.10 It could also support other Siddhi Core minor versions. Json group (Aggregate Function) This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:group( STRING|OBJECT json) OBJECT json:group( STRING|OBJECT json, BOOL distinct) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:group( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:group( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:group( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:group( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'. groupAsObject (Aggregate Function) This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:groupAsObject( STRING|OBJECT json) OBJECT json:groupAsObject( STRING|OBJECT json, BOOL distinct) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:groupAsObject( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:groupAsObject( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:groupAsObject( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:groupAsObject( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'. getBool (Function) Function retrieves the 'boolean' value specified in the given path of the JSON element. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing boolean value. STRING OBJECT No Yes path The JSON path to fetch the boolean value. STRING No Yes Examples EXAMPLE 1 json:getBool(json,'$.married') If the json is the format {'name' : 'John', 'married' : true} , the function returns true as there is a matching boolean at $.married . EXAMPLE 2 json:getBool(json,'$.name') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching boolean at $.name . EXAMPLE 3 json:getBool(json,'$.foo') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching element at $.foo . getDouble (Function) Function retrieves the 'double' value specified in the given path of the JSON element. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing double value. STRING OBJECT No Yes path The JSON path to fetch the double value. STRING No Yes Examples EXAMPLE 1 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000.0 as there is a matching double at $.salary . EXAMPLE 2 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getDouble(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching double at $.name . getFloat (Function) Function retrieves the 'float' value specified in the given path of the JSON element. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing float value. STRING OBJECT No Yes path The JSON path to fetch the float value. STRING No Yes Examples EXAMPLE 1 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000 as there is a matching float at $.salary . EXAMPLE 2 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getFloat(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching float at $.name . getInt (Function) Function retrieves the 'int' value specified in the given path of the JSON element. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing int value. STRING OBJECT No Yes path The JSON path to fetch the int value. STRING No Yes Examples EXAMPLE 1 json:getInt(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching int at $.age . EXAMPLE 2 json:getInt(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getInt(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching int at $.name . getLong (Function) Function retrieves the 'long' value specified in the given path of the JSON element. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing long value. STRING OBJECT No Yes path The JSON path to fetch the long value. STRING No Yes Examples EXAMPLE 1 json:getLong(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching long at $.age . EXAMPLE 2 json:getLong(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getLong(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching long at $.name . getObject (Function) Function retrieves the object specified in the given path of the JSON element. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing the object. STRING OBJECT No Yes path The JSON path to fetch the object. STRING No Yes Examples EXAMPLE 1 json:getObject(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as there is a matching object at $.address . EXAMPLE 2 json:getObject(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching object at $.age . EXAMPLE 3 json:getObject(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . getString (Function) Function retrieves value specified in the given path of the JSON element as a string. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing value. STRING OBJECT No Yes path The JSON path to fetch the value. STRING No Yes Examples EXAMPLE 1 json:getString(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns John as there is a matching string at $.name . EXAMPLE 2 json:getString(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getString(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as a string as there is a matching element at $.age . EXAMPLE 4 json:getString(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as a string as there is a matching element at $.address . isExists (Function) Function checks whether there is a JSON element present in the given path or not. Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that needs to be searched for an elements. STRING OBJECT No Yes path The JSON path to check for the element. STRING No Yes Examples EXAMPLE 1 json:isExists(json, '$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns true as there is an element in the given path. EXAMPLE 2 json:isExists(json, '$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns false as there is no element in the given path. setElement (Function) Function sets JSON element into a given JSON at the specific path. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element) OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON to which a JSON element needs to be added/replaced. STRING OBJECT No Yes path The JSON path where the JSON element should be added/replaced. STRING No Yes json.element The JSON element being added. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No Yes key The key to be used to refer the newly added element in the input JSON. Assumes the element is added to a JSON array, or the element selected by the JSON path will be updated. STRING Yes Yes Examples EXAMPLE 1 json:setElement(json, '$', {'country' : 'USA'} , 'address') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}} by adding 'address' element and returns the updated JSON. EXAMPLE 2 json:setElement(json, '$', 40, 'age') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'age' : 40} by adding 'age' element and returns the updated JSON. EXAMPLE 3 json:setElement(json, '$', 45, 'age') If the json is the format {'name' : 'John', 'married' : true, 'age' : 40} , the function updates the json as {'name' : 'John', 'married' : true, 'age' : 45} by replacing 'age' element and returns the updated JSON. EXAMPLE 4 json:setElement(json, '$.items', 'book') If the json is the format {'name' : 'Stationary', 'items' : ['pen', 'pencil']} , the function updates the json as {'name' : 'John', 'items' : ['pen', 'pencil', 'book']} by adding 'book' in the items array and returns the updated JSON. EXAMPLE 5 json:setElement(json, '$.item', 'book') If the json is the format {'name' : 'Stationary', 'item' : 'pen'} , the function updates the json as {'name' : 'John', 'item' : 'book'} by replacing 'item' element and returns the updated JSON. EXAMPLE 6 json:setElement(json, '$.address', 'city', 'SF') If the json is the format {'name' : 'John', 'married' : true} ,the function will not update, but returns the original JSON as there are no valid path for $.address . toObject (Function) Function generate JSON object from the given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string that needs to be converted to a JSON object. STRING No Yes Examples EXAMPLE 1 json:toJson(json) This returns the JSON object corresponding to the given JSON string. toString (Function) Function generates a JSON string corresponding to a given JSON object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object to generates a JSON string. OBJECT No Yes Examples EXAMPLE 1 json:toString(json) This returns the JSON string corresponding to a given JSON object. tokenize (Stream Processor) Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events. Syntax json:tokenize( STRING|OBJECT json, STRING path) json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON string. If the 'path' selects a JSON array then the system returns each element in the array as a JSON string via a separate events. STRING Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary . tokenizeAsObject (Stream Processor) Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path) json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON object. If the 'path' selects a JSON array then the system returns each element in the array as a JSON object via a separate events. OBJECT Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"2.0.5"},{"location":"api/2.0.5/#api-docs-v205","text":"Tested Siddhi Core version: 5.1.10 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.5"},{"location":"api/2.0.5/#json","text":"","title":"Json"},{"location":"api/2.0.5/#group-aggregate-function","text":"This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:group( STRING|OBJECT json) OBJECT json:group( STRING|OBJECT json, BOOL distinct) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:group( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:group( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:group( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:group( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'.","title":"group (Aggregate Function)"},{"location":"api/2.0.5/#groupasobject-aggregate-function","text":"This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:groupAsObject( STRING|OBJECT json) OBJECT json:groupAsObject( STRING|OBJECT json, BOOL distinct) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:groupAsObject( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:groupAsObject( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:groupAsObject( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:groupAsObject( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'.","title":"groupAsObject (Aggregate Function)"},{"location":"api/2.0.5/#getbool-function","text":"Function retrieves the 'boolean' value specified in the given path of the JSON element. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing boolean value. STRING OBJECT No Yes path The JSON path to fetch the boolean value. STRING No Yes Examples EXAMPLE 1 json:getBool(json,'$.married') If the json is the format {'name' : 'John', 'married' : true} , the function returns true as there is a matching boolean at $.married . EXAMPLE 2 json:getBool(json,'$.name') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching boolean at $.name . EXAMPLE 3 json:getBool(json,'$.foo') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching element at $.foo .","title":"getBool (Function)"},{"location":"api/2.0.5/#getdouble-function","text":"Function retrieves the 'double' value specified in the given path of the JSON element. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing double value. STRING OBJECT No Yes path The JSON path to fetch the double value. STRING No Yes Examples EXAMPLE 1 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000.0 as there is a matching double at $.salary . EXAMPLE 2 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getDouble(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching double at $.name .","title":"getDouble (Function)"},{"location":"api/2.0.5/#getfloat-function","text":"Function retrieves the 'float' value specified in the given path of the JSON element. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing float value. STRING OBJECT No Yes path The JSON path to fetch the float value. STRING No Yes Examples EXAMPLE 1 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000 as there is a matching float at $.salary . EXAMPLE 2 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getFloat(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching float at $.name .","title":"getFloat (Function)"},{"location":"api/2.0.5/#getint-function","text":"Function retrieves the 'int' value specified in the given path of the JSON element. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing int value. STRING OBJECT No Yes path The JSON path to fetch the int value. STRING No Yes Examples EXAMPLE 1 json:getInt(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching int at $.age . EXAMPLE 2 json:getInt(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getInt(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching int at $.name .","title":"getInt (Function)"},{"location":"api/2.0.5/#getlong-function","text":"Function retrieves the 'long' value specified in the given path of the JSON element. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing long value. STRING OBJECT No Yes path The JSON path to fetch the long value. STRING No Yes Examples EXAMPLE 1 json:getLong(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching long at $.age . EXAMPLE 2 json:getLong(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getLong(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching long at $.name .","title":"getLong (Function)"},{"location":"api/2.0.5/#getobject-function","text":"Function retrieves the object specified in the given path of the JSON element. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing the object. STRING OBJECT No Yes path The JSON path to fetch the object. STRING No Yes Examples EXAMPLE 1 json:getObject(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as there is a matching object at $.address . EXAMPLE 2 json:getObject(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching object at $.age . EXAMPLE 3 json:getObject(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary .","title":"getObject (Function)"},{"location":"api/2.0.5/#getstring-function","text":"Function retrieves value specified in the given path of the JSON element as a string. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing value. STRING OBJECT No Yes path The JSON path to fetch the value. STRING No Yes Examples EXAMPLE 1 json:getString(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns John as there is a matching string at $.name . EXAMPLE 2 json:getString(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getString(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as a string as there is a matching element at $.age . EXAMPLE 4 json:getString(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as a string as there is a matching element at $.address .","title":"getString (Function)"},{"location":"api/2.0.5/#isexists-function","text":"Function checks whether there is a JSON element present in the given path or not. Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that needs to be searched for an elements. STRING OBJECT No Yes path The JSON path to check for the element. STRING No Yes Examples EXAMPLE 1 json:isExists(json, '$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns true as there is an element in the given path. EXAMPLE 2 json:isExists(json, '$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns false as there is no element in the given path.","title":"isExists (Function)"},{"location":"api/2.0.5/#setelement-function","text":"Function sets JSON element into a given JSON at the specific path. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element) OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON to which a JSON element needs to be added/replaced. STRING OBJECT No Yes path The JSON path where the JSON element should be added/replaced. STRING No Yes json.element The JSON element being added. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No Yes key The key to be used to refer the newly added element in the input JSON. Assumes the element is added to a JSON array, or the element selected by the JSON path will be updated. STRING Yes Yes Examples EXAMPLE 1 json:setElement(json, '$', {'country' : 'USA'} , 'address') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}} by adding 'address' element and returns the updated JSON. EXAMPLE 2 json:setElement(json, '$', 40, 'age') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'age' : 40} by adding 'age' element and returns the updated JSON. EXAMPLE 3 json:setElement(json, '$', 45, 'age') If the json is the format {'name' : 'John', 'married' : true, 'age' : 40} , the function updates the json as {'name' : 'John', 'married' : true, 'age' : 45} by replacing 'age' element and returns the updated JSON. EXAMPLE 4 json:setElement(json, '$.items', 'book') If the json is the format {'name' : 'Stationary', 'items' : ['pen', 'pencil']} , the function updates the json as {'name' : 'John', 'items' : ['pen', 'pencil', 'book']} by adding 'book' in the items array and returns the updated JSON. EXAMPLE 5 json:setElement(json, '$.item', 'book') If the json is the format {'name' : 'Stationary', 'item' : 'pen'} , the function updates the json as {'name' : 'John', 'item' : 'book'} by replacing 'item' element and returns the updated JSON. EXAMPLE 6 json:setElement(json, '$.address', 'city', 'SF') If the json is the format {'name' : 'John', 'married' : true} ,the function will not update, but returns the original JSON as there are no valid path for $.address .","title":"setElement (Function)"},{"location":"api/2.0.5/#toobject-function","text":"Function generate JSON object from the given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string that needs to be converted to a JSON object. STRING No Yes Examples EXAMPLE 1 json:toJson(json) This returns the JSON object corresponding to the given JSON string.","title":"toObject (Function)"},{"location":"api/2.0.5/#tostring-function","text":"Function generates a JSON string corresponding to a given JSON object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object to generates a JSON string. OBJECT No Yes Examples EXAMPLE 1 json:toString(json) This returns the JSON string corresponding to a given JSON object.","title":"toString (Function)"},{"location":"api/2.0.5/#tokenize-stream-processor","text":"Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events. Syntax json:tokenize( STRING|OBJECT json, STRING path) json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON string. If the 'path' selects a JSON array then the system returns each element in the array as a JSON string via a separate events. STRING Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"tokenize (Stream Processor)"},{"location":"api/2.0.5/#tokenizeasobject-stream-processor","text":"Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path) json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON object. If the 'path' selects a JSON array then the system returns each element in the array as a JSON object via a separate events. OBJECT Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"tokenizeAsObject (Stream Processor)"},{"location":"api/2.0.6/","text":"API Docs - v2.0.6 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Json group (Aggregate Function) This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:group( STRING|OBJECT json) OBJECT json:group( STRING|OBJECT json, BOOL distinct) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:group( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:group( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:group( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:group( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'. groupAsObject (Aggregate Function) This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:groupAsObject( STRING|OBJECT json) OBJECT json:groupAsObject( STRING|OBJECT json, BOOL distinct) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:groupAsObject( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:groupAsObject( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:groupAsObject( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:groupAsObject( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'. getBool (Function) Function retrieves the 'boolean' value specified in the given path of the JSON element. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing boolean value. STRING OBJECT No Yes path The JSON path to fetch the boolean value. STRING No Yes Examples EXAMPLE 1 json:getBool(json,'$.married') If the json is the format {'name' : 'John', 'married' : true} , the function returns true as there is a matching boolean at $.married . EXAMPLE 2 json:getBool(json,'$.name') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching boolean at $.name . EXAMPLE 3 json:getBool(json,'$.foo') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching element at $.foo . getDouble (Function) Function retrieves the 'double' value specified in the given path of the JSON element. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing double value. STRING OBJECT No Yes path The JSON path to fetch the double value. STRING No Yes Examples EXAMPLE 1 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000.0 as there is a matching double at $.salary . EXAMPLE 2 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getDouble(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching double at $.name . getFloat (Function) Function retrieves the 'float' value specified in the given path of the JSON element. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing float value. STRING OBJECT No Yes path The JSON path to fetch the float value. STRING No Yes Examples EXAMPLE 1 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000 as there is a matching float at $.salary . EXAMPLE 2 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getFloat(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching float at $.name . getInt (Function) Function retrieves the 'int' value specified in the given path of the JSON element. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing int value. STRING OBJECT No Yes path The JSON path to fetch the int value. STRING No Yes Examples EXAMPLE 1 json:getInt(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching int at $.age . EXAMPLE 2 json:getInt(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getInt(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching int at $.name . getLong (Function) Function retrieves the 'long' value specified in the given path of the JSON element. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing long value. STRING OBJECT No Yes path The JSON path to fetch the long value. STRING No Yes Examples EXAMPLE 1 json:getLong(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching long at $.age . EXAMPLE 2 json:getLong(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getLong(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching long at $.name . getObject (Function) Function retrieves the object specified in the given path of the JSON element. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing the object. STRING OBJECT No Yes path The JSON path to fetch the object. STRING No Yes Examples EXAMPLE 1 json:getObject(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as there is a matching object at $.address . EXAMPLE 2 json:getObject(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching object at $.age . EXAMPLE 3 json:getObject(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . getString (Function) Function retrieves value specified in the given path of the JSON element as a string. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing value. STRING OBJECT No Yes path The JSON path to fetch the value. STRING No Yes Examples EXAMPLE 1 json:getString(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns John as there is a matching string at $.name . EXAMPLE 2 json:getString(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getString(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as a string as there is a matching element at $.age . EXAMPLE 4 json:getString(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as a string as there is a matching element at $.address . isExists (Function) Function checks whether there is a JSON element present in the given path or not. Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that needs to be searched for an elements. STRING OBJECT No Yes path The JSON path to check for the element. STRING No Yes Examples EXAMPLE 1 json:isExists(json, '$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns true as there is an element in the given path. EXAMPLE 2 json:isExists(json, '$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns false as there is no element in the given path. setElement (Function) Function sets JSON element into a given JSON at the specific path. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element) OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON to which a JSON element needs to be added/replaced. STRING OBJECT No Yes path The JSON path where the JSON element should be added/replaced. STRING No Yes json.element The JSON element being added. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No Yes key The key to be used to refer the newly added element in the input JSON. Assumes the element is added to a JSON array, or the element selected by the JSON path will be updated. STRING Yes Yes Examples EXAMPLE 1 json:setElement(json, '$', {'country' : 'USA'} , 'address') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}} by adding 'address' element and returns the updated JSON. EXAMPLE 2 json:setElement(json, '$', 40, 'age') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'age' : 40} by adding 'age' element and returns the updated JSON. EXAMPLE 3 json:setElement(json, '$', 45, 'age') If the json is the format {'name' : 'John', 'married' : true, 'age' : 40} , the function updates the json as {'name' : 'John', 'married' : true, 'age' : 45} by replacing 'age' element and returns the updated JSON. EXAMPLE 4 json:setElement(json, '$.items', 'book') If the json is the format {'name' : 'Stationary', 'items' : ['pen', 'pencil']} , the function updates the json as {'name' : 'John', 'items' : ['pen', 'pencil', 'book']} by adding 'book' in the items array and returns the updated JSON. EXAMPLE 5 json:setElement(json, '$.item', 'book') If the json is the format {'name' : 'Stationary', 'item' : 'pen'} , the function updates the json as {'name' : 'John', 'item' : 'book'} by replacing 'item' element and returns the updated JSON. EXAMPLE 6 json:setElement(json, '$.address', 'city', 'SF') If the json is the format {'name' : 'John', 'married' : true} ,the function will not update, but returns the original JSON as there are no valid path for $.address . toObject (Function) Function generate JSON object from the given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string that needs to be converted to a JSON object. STRING No Yes Examples EXAMPLE 1 json:toJson(json) This returns the JSON object corresponding to the given JSON string. toString (Function) Function generates a JSON string corresponding to a given JSON object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object to generates a JSON string. OBJECT No Yes Examples EXAMPLE 1 json:toString(json) This returns the JSON string corresponding to a given JSON object. tokenize (Stream Processor) Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events. Syntax json:tokenize( STRING|OBJECT json, STRING path) json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON string. If the 'path' selects a JSON array then the system returns each element in the array as a JSON string via a separate events. STRING Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary . tokenizeAsObject (Stream Processor) Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path) json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON object. If the 'path' selects a JSON array then the system returns each element in the array as a JSON object via a separate events. OBJECT Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"2.0.6"},{"location":"api/2.0.6/#api-docs-v206","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.6"},{"location":"api/2.0.6/#json","text":"","title":"Json"},{"location":"api/2.0.6/#group-aggregate-function","text":"This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:group( STRING|OBJECT json) OBJECT json:group( STRING|OBJECT json, BOOL distinct) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:group( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:group( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:group( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:group( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'.","title":"group (Aggregate Function)"},{"location":"api/2.0.6/#groupasobject-aggregate-function","text":"This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:groupAsObject( STRING|OBJECT json) OBJECT json:groupAsObject( STRING|OBJECT json, BOOL distinct) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:groupAsObject( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:groupAsObject( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:groupAsObject( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:groupAsObject( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'.","title":"groupAsObject (Aggregate Function)"},{"location":"api/2.0.6/#getbool-function","text":"Function retrieves the 'boolean' value specified in the given path of the JSON element. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing boolean value. STRING OBJECT No Yes path The JSON path to fetch the boolean value. STRING No Yes Examples EXAMPLE 1 json:getBool(json,'$.married') If the json is the format {'name' : 'John', 'married' : true} , the function returns true as there is a matching boolean at $.married . EXAMPLE 2 json:getBool(json,'$.name') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching boolean at $.name . EXAMPLE 3 json:getBool(json,'$.foo') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching element at $.foo .","title":"getBool (Function)"},{"location":"api/2.0.6/#getdouble-function","text":"Function retrieves the 'double' value specified in the given path of the JSON element. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing double value. STRING OBJECT No Yes path The JSON path to fetch the double value. STRING No Yes Examples EXAMPLE 1 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000.0 as there is a matching double at $.salary . EXAMPLE 2 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getDouble(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching double at $.name .","title":"getDouble (Function)"},{"location":"api/2.0.6/#getfloat-function","text":"Function retrieves the 'float' value specified in the given path of the JSON element. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing float value. STRING OBJECT No Yes path The JSON path to fetch the float value. STRING No Yes Examples EXAMPLE 1 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000 as there is a matching float at $.salary . EXAMPLE 2 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getFloat(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching float at $.name .","title":"getFloat (Function)"},{"location":"api/2.0.6/#getint-function","text":"Function retrieves the 'int' value specified in the given path of the JSON element. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing int value. STRING OBJECT No Yes path The JSON path to fetch the int value. STRING No Yes Examples EXAMPLE 1 json:getInt(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching int at $.age . EXAMPLE 2 json:getInt(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getInt(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching int at $.name .","title":"getInt (Function)"},{"location":"api/2.0.6/#getlong-function","text":"Function retrieves the 'long' value specified in the given path of the JSON element. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing long value. STRING OBJECT No Yes path The JSON path to fetch the long value. STRING No Yes Examples EXAMPLE 1 json:getLong(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching long at $.age . EXAMPLE 2 json:getLong(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getLong(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching long at $.name .","title":"getLong (Function)"},{"location":"api/2.0.6/#getobject-function","text":"Function retrieves the object specified in the given path of the JSON element. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing the object. STRING OBJECT No Yes path The JSON path to fetch the object. STRING No Yes Examples EXAMPLE 1 json:getObject(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as there is a matching object at $.address . EXAMPLE 2 json:getObject(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching object at $.age . EXAMPLE 3 json:getObject(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary .","title":"getObject (Function)"},{"location":"api/2.0.6/#getstring-function","text":"Function retrieves value specified in the given path of the JSON element as a string. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing value. STRING OBJECT No Yes path The JSON path to fetch the value. STRING No Yes Examples EXAMPLE 1 json:getString(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns John as there is a matching string at $.name . EXAMPLE 2 json:getString(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getString(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as a string as there is a matching element at $.age . EXAMPLE 4 json:getString(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as a string as there is a matching element at $.address .","title":"getString (Function)"},{"location":"api/2.0.6/#isexists-function","text":"Function checks whether there is a JSON element present in the given path or not. Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that needs to be searched for an elements. STRING OBJECT No Yes path The JSON path to check for the element. STRING No Yes Examples EXAMPLE 1 json:isExists(json, '$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns true as there is an element in the given path. EXAMPLE 2 json:isExists(json, '$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns false as there is no element in the given path.","title":"isExists (Function)"},{"location":"api/2.0.6/#setelement-function","text":"Function sets JSON element into a given JSON at the specific path. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element) OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON to which a JSON element needs to be added/replaced. STRING OBJECT No Yes path The JSON path where the JSON element should be added/replaced. STRING No Yes json.element The JSON element being added. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No Yes key The key to be used to refer the newly added element in the input JSON. Assumes the element is added to a JSON array, or the element selected by the JSON path will be updated. STRING Yes Yes Examples EXAMPLE 1 json:setElement(json, '$', {'country' : 'USA'} , 'address') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}} by adding 'address' element and returns the updated JSON. EXAMPLE 2 json:setElement(json, '$', 40, 'age') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'age' : 40} by adding 'age' element and returns the updated JSON. EXAMPLE 3 json:setElement(json, '$', 45, 'age') If the json is the format {'name' : 'John', 'married' : true, 'age' : 40} , the function updates the json as {'name' : 'John', 'married' : true, 'age' : 45} by replacing 'age' element and returns the updated JSON. EXAMPLE 4 json:setElement(json, '$.items', 'book') If the json is the format {'name' : 'Stationary', 'items' : ['pen', 'pencil']} , the function updates the json as {'name' : 'John', 'items' : ['pen', 'pencil', 'book']} by adding 'book' in the items array and returns the updated JSON. EXAMPLE 5 json:setElement(json, '$.item', 'book') If the json is the format {'name' : 'Stationary', 'item' : 'pen'} , the function updates the json as {'name' : 'John', 'item' : 'book'} by replacing 'item' element and returns the updated JSON. EXAMPLE 6 json:setElement(json, '$.address', 'city', 'SF') If the json is the format {'name' : 'John', 'married' : true} ,the function will not update, but returns the original JSON as there are no valid path for $.address .","title":"setElement (Function)"},{"location":"api/2.0.6/#toobject-function","text":"Function generate JSON object from the given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string that needs to be converted to a JSON object. STRING No Yes Examples EXAMPLE 1 json:toJson(json) This returns the JSON object corresponding to the given JSON string.","title":"toObject (Function)"},{"location":"api/2.0.6/#tostring-function","text":"Function generates a JSON string corresponding to a given JSON object. Syntax STRING json:toString( OBJECT json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object to generates a JSON string. OBJECT No Yes Examples EXAMPLE 1 json:toString(json) This returns the JSON string corresponding to a given JSON object.","title":"toString (Function)"},{"location":"api/2.0.6/#tokenize-stream-processor","text":"Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events. Syntax json:tokenize( STRING|OBJECT json, STRING path) json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON string. If the 'path' selects a JSON array then the system returns each element in the array as a JSON string via a separate events. STRING Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"tokenize (Stream Processor)"},{"location":"api/2.0.6/#tokenizeasobject-stream-processor","text":"Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path) json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON object. If the 'path' selects a JSON array then the system returns each element in the array as a JSON object via a separate events. OBJECT Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"tokenizeAsObject (Stream Processor)"},{"location":"api/2.0.7/","text":"API Docs - v2.0.7 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Json group (Aggregate Function) This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:group( STRING|OBJECT json) OBJECT json:group( STRING|OBJECT json, BOOL distinct) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:group( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:group( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:group( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:group( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'. groupAsObject (Aggregate Function) This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:groupAsObject( STRING|OBJECT json) OBJECT json:groupAsObject( STRING|OBJECT json, BOOL distinct) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:groupAsObject( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:groupAsObject( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:groupAsObject( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:groupAsObject( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'. getBool (Function) Function retrieves the 'boolean' value specified in the given path of the JSON element. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing boolean value. STRING OBJECT No Yes path The JSON path to fetch the boolean value. STRING No Yes Examples EXAMPLE 1 json:getBool(json,'$.married') If the json is the format {'name' : 'John', 'married' : true} , the function returns true as there is a matching boolean at $.married . EXAMPLE 2 json:getBool(json,'$.name') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching boolean at $.name . EXAMPLE 3 json:getBool(json,'$.foo') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching element at $.foo . getDouble (Function) Function retrieves the 'double' value specified in the given path of the JSON element. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing double value. STRING OBJECT No Yes path The JSON path to fetch the double value. STRING No Yes Examples EXAMPLE 1 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000.0 as there is a matching double at $.salary . EXAMPLE 2 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getDouble(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching double at $.name . getFloat (Function) Function retrieves the 'float' value specified in the given path of the JSON element. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing float value. STRING OBJECT No Yes path The JSON path to fetch the float value. STRING No Yes Examples EXAMPLE 1 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000 as there is a matching float at $.salary . EXAMPLE 2 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getFloat(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching float at $.name . getInt (Function) Function retrieves the 'int' value specified in the given path of the JSON element. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing int value. STRING OBJECT No Yes path The JSON path to fetch the int value. STRING No Yes Examples EXAMPLE 1 json:getInt(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching int at $.age . EXAMPLE 2 json:getInt(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getInt(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching int at $.name . getLong (Function) Function retrieves the 'long' value specified in the given path of the JSON element. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing long value. STRING OBJECT No Yes path The JSON path to fetch the long value. STRING No Yes Examples EXAMPLE 1 json:getLong(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching long at $.age . EXAMPLE 2 json:getLong(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getLong(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching long at $.name . getObject (Function) Function retrieves the object specified in the given path of the JSON element. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing the object. STRING OBJECT No Yes path The JSON path to fetch the object. STRING No Yes Examples EXAMPLE 1 json:getObject(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as there is a matching object at $.address . EXAMPLE 2 json:getObject(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching object at $.age . EXAMPLE 3 json:getObject(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . getString (Function) Function retrieves value specified in the given path of the JSON element as a string. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing value. STRING OBJECT No Yes path The JSON path to fetch the value. STRING No Yes Examples EXAMPLE 1 json:getString(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns John as there is a matching string at $.name . EXAMPLE 2 json:getString(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getString(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as a string as there is a matching element at $.age . EXAMPLE 4 json:getString(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as a string as there is a matching element at $.address . isExists (Function) Function checks whether there is a JSON element present in the given path or not. Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that needs to be searched for an elements. STRING OBJECT No Yes path The JSON path to check for the element. STRING No Yes Examples EXAMPLE 1 json:isExists(json, '$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns true as there is an element in the given path. EXAMPLE 2 json:isExists(json, '$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns false as there is no element in the given path. setElement (Function) Function sets JSON element into a given JSON at the specific path. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element) OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON to which a JSON element needs to be added/replaced. STRING OBJECT No Yes path The JSON path where the JSON element should be added/replaced. STRING No Yes json.element The JSON element being added. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No Yes key The key to be used to refer the newly added element in the input JSON. Assumes the element is added to a JSON array, or the element selected by the JSON path will be updated. STRING Yes Yes Examples EXAMPLE 1 json:setElement(json, '$', {'country' : 'USA'} , 'address') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}} by adding 'address' element and returns the updated JSON. EXAMPLE 2 json:setElement(json, '$', 40, 'age') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'age' : 40} by adding 'age' element and returns the updated JSON. EXAMPLE 3 json:setElement(json, '$', 45, 'age') If the json is the format {'name' : 'John', 'married' : true, 'age' : 40} , the function updates the json as {'name' : 'John', 'married' : true, 'age' : 45} by replacing 'age' element and returns the updated JSON. EXAMPLE 4 json:setElement(json, '$.items', 'book') If the json is the format {'name' : 'Stationary', 'items' : ['pen', 'pencil']} , the function updates the json as {'name' : 'John', 'items' : ['pen', 'pencil', 'book']} by adding 'book' in the items array and returns the updated JSON. EXAMPLE 5 json:setElement(json, '$.item', 'book') If the json is the format {'name' : 'Stationary', 'item' : 'pen'} , the function updates the json as {'name' : 'John', 'item' : 'book'} by replacing 'item' element and returns the updated JSON. EXAMPLE 6 json:setElement(json, '$.address', 'city', 'SF') If the json is the format {'name' : 'John', 'married' : true} ,the function will not update, but returns the original JSON as there are no valid path for $.address . toObject (Function) Function generate JSON object from the given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string that needs to be converted to a JSON object. STRING No Yes Examples EXAMPLE 1 json:toJson(json) This returns the JSON object corresponding to the given JSON string. toString (Function) Function generates a JSON string corresponding to a given JSON object. Syntax STRING json:toString( OBJECT json) STRING json:toString( OBJECT json, BOOL allow.escape) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object to generates a JSON string. OBJECT No Yes allow.escape If this is set to true, quotes will be escaped in the resulting string. Otherwise quotes will not be escaped. false BOOL Yes Yes Examples EXAMPLE 1 json:toString(json) This returns the JSON string corresponding to a given JSON object. EXAMPLE 2 json:toString(json, true) Assume the json object has the field 'user' with value 'david'. With the allowEscape parameter set to true, this will return the string \"{\\\"user\\\":\\\"david\\\"}\" EXAMPLE 3 json:toString(json, false) Assume the json object has the field 'user' with value 'david'. With the allowEscape parameter set to false, this will return the string {\"user\":\"david\"} tokenize (Stream Processor) Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events. Syntax json:tokenize( STRING|OBJECT json, STRING path) json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON string. If the 'path' selects a JSON array then the system returns each element in the array as a JSON string via a separate events. STRING Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary . tokenizeAsObject (Stream Processor) Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path) json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON object. If the 'path' selects a JSON array then the system returns each element in the array as a JSON object via a separate events. OBJECT Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"2.0.7"},{"location":"api/2.0.7/#api-docs-v207","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.7"},{"location":"api/2.0.7/#json","text":"","title":"Json"},{"location":"api/2.0.7/#group-aggregate-function","text":"This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:group( STRING|OBJECT json) OBJECT json:group( STRING|OBJECT json, BOOL distinct) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:group( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:group( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:group( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:group( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'.","title":"group (Aggregate Function)"},{"location":"api/2.0.7/#groupasobject-aggregate-function","text":"This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:groupAsObject( STRING|OBJECT json) OBJECT json:groupAsObject( STRING|OBJECT json, BOOL distinct) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:groupAsObject( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:groupAsObject( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:groupAsObject( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:groupAsObject( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'.","title":"groupAsObject (Aggregate Function)"},{"location":"api/2.0.7/#getbool-function","text":"Function retrieves the 'boolean' value specified in the given path of the JSON element. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing boolean value. STRING OBJECT No Yes path The JSON path to fetch the boolean value. STRING No Yes Examples EXAMPLE 1 json:getBool(json,'$.married') If the json is the format {'name' : 'John', 'married' : true} , the function returns true as there is a matching boolean at $.married . EXAMPLE 2 json:getBool(json,'$.name') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching boolean at $.name . EXAMPLE 3 json:getBool(json,'$.foo') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching element at $.foo .","title":"getBool (Function)"},{"location":"api/2.0.7/#getdouble-function","text":"Function retrieves the 'double' value specified in the given path of the JSON element. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing double value. STRING OBJECT No Yes path The JSON path to fetch the double value. STRING No Yes Examples EXAMPLE 1 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000.0 as there is a matching double at $.salary . EXAMPLE 2 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getDouble(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching double at $.name .","title":"getDouble (Function)"},{"location":"api/2.0.7/#getfloat-function","text":"Function retrieves the 'float' value specified in the given path of the JSON element. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing float value. STRING OBJECT No Yes path The JSON path to fetch the float value. STRING No Yes Examples EXAMPLE 1 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000 as there is a matching float at $.salary . EXAMPLE 2 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getFloat(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching float at $.name .","title":"getFloat (Function)"},{"location":"api/2.0.7/#getint-function","text":"Function retrieves the 'int' value specified in the given path of the JSON element. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing int value. STRING OBJECT No Yes path The JSON path to fetch the int value. STRING No Yes Examples EXAMPLE 1 json:getInt(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching int at $.age . EXAMPLE 2 json:getInt(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getInt(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching int at $.name .","title":"getInt (Function)"},{"location":"api/2.0.7/#getlong-function","text":"Function retrieves the 'long' value specified in the given path of the JSON element. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing long value. STRING OBJECT No Yes path The JSON path to fetch the long value. STRING No Yes Examples EXAMPLE 1 json:getLong(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching long at $.age . EXAMPLE 2 json:getLong(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getLong(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching long at $.name .","title":"getLong (Function)"},{"location":"api/2.0.7/#getobject-function","text":"Function retrieves the object specified in the given path of the JSON element. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing the object. STRING OBJECT No Yes path The JSON path to fetch the object. STRING No Yes Examples EXAMPLE 1 json:getObject(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as there is a matching object at $.address . EXAMPLE 2 json:getObject(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching object at $.age . EXAMPLE 3 json:getObject(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary .","title":"getObject (Function)"},{"location":"api/2.0.7/#getstring-function","text":"Function retrieves value specified in the given path of the JSON element as a string. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing value. STRING OBJECT No Yes path The JSON path to fetch the value. STRING No Yes Examples EXAMPLE 1 json:getString(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns John as there is a matching string at $.name . EXAMPLE 2 json:getString(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getString(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as a string as there is a matching element at $.age . EXAMPLE 4 json:getString(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as a string as there is a matching element at $.address .","title":"getString (Function)"},{"location":"api/2.0.7/#isexists-function","text":"Function checks whether there is a JSON element present in the given path or not. Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that needs to be searched for an elements. STRING OBJECT No Yes path The JSON path to check for the element. STRING No Yes Examples EXAMPLE 1 json:isExists(json, '$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns true as there is an element in the given path. EXAMPLE 2 json:isExists(json, '$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns false as there is no element in the given path.","title":"isExists (Function)"},{"location":"api/2.0.7/#setelement-function","text":"Function sets JSON element into a given JSON at the specific path. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element) OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON to which a JSON element needs to be added/replaced. STRING OBJECT No Yes path The JSON path where the JSON element should be added/replaced. STRING No Yes json.element The JSON element being added. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No Yes key The key to be used to refer the newly added element in the input JSON. Assumes the element is added to a JSON array, or the element selected by the JSON path will be updated. STRING Yes Yes Examples EXAMPLE 1 json:setElement(json, '$', {'country' : 'USA'} , 'address') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}} by adding 'address' element and returns the updated JSON. EXAMPLE 2 json:setElement(json, '$', 40, 'age') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'age' : 40} by adding 'age' element and returns the updated JSON. EXAMPLE 3 json:setElement(json, '$', 45, 'age') If the json is the format {'name' : 'John', 'married' : true, 'age' : 40} , the function updates the json as {'name' : 'John', 'married' : true, 'age' : 45} by replacing 'age' element and returns the updated JSON. EXAMPLE 4 json:setElement(json, '$.items', 'book') If the json is the format {'name' : 'Stationary', 'items' : ['pen', 'pencil']} , the function updates the json as {'name' : 'John', 'items' : ['pen', 'pencil', 'book']} by adding 'book' in the items array and returns the updated JSON. EXAMPLE 5 json:setElement(json, '$.item', 'book') If the json is the format {'name' : 'Stationary', 'item' : 'pen'} , the function updates the json as {'name' : 'John', 'item' : 'book'} by replacing 'item' element and returns the updated JSON. EXAMPLE 6 json:setElement(json, '$.address', 'city', 'SF') If the json is the format {'name' : 'John', 'married' : true} ,the function will not update, but returns the original JSON as there are no valid path for $.address .","title":"setElement (Function)"},{"location":"api/2.0.7/#toobject-function","text":"Function generate JSON object from the given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string that needs to be converted to a JSON object. STRING No Yes Examples EXAMPLE 1 json:toJson(json) This returns the JSON object corresponding to the given JSON string.","title":"toObject (Function)"},{"location":"api/2.0.7/#tostring-function","text":"Function generates a JSON string corresponding to a given JSON object. Syntax STRING json:toString( OBJECT json) STRING json:toString( OBJECT json, BOOL allow.escape) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object to generates a JSON string. OBJECT No Yes allow.escape If this is set to true, quotes will be escaped in the resulting string. Otherwise quotes will not be escaped. false BOOL Yes Yes Examples EXAMPLE 1 json:toString(json) This returns the JSON string corresponding to a given JSON object. EXAMPLE 2 json:toString(json, true) Assume the json object has the field 'user' with value 'david'. With the allowEscape parameter set to true, this will return the string \"{\\\"user\\\":\\\"david\\\"}\" EXAMPLE 3 json:toString(json, false) Assume the json object has the field 'user' with value 'david'. With the allowEscape parameter set to false, this will return the string {\"user\":\"david\"}","title":"toString (Function)"},{"location":"api/2.0.7/#tokenize-stream-processor","text":"Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events. Syntax json:tokenize( STRING|OBJECT json, STRING path) json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON string. If the 'path' selects a JSON array then the system returns each element in the array as a JSON string via a separate events. STRING Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"tokenize (Stream Processor)"},{"location":"api/2.0.7/#tokenizeasobject-stream-processor","text":"Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path) json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON object. If the 'path' selects a JSON array then the system returns each element in the array as a JSON object via a separate events. OBJECT Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"tokenizeAsObject (Stream Processor)"},{"location":"api/2.0.8/","text":"API Docs - v2.0.8 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Json group (Aggregate Function) This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:group( STRING|OBJECT json) OBJECT json:group( STRING|OBJECT json, BOOL distinct) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:group( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:group( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:group( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:group( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'. groupAsObject (Aggregate Function) This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:groupAsObject( STRING|OBJECT json) OBJECT json:groupAsObject( STRING|OBJECT json, BOOL distinct) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:groupAsObject( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:groupAsObject( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:groupAsObject( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:groupAsObject( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'. getBool (Function) Function retrieves the 'boolean' value specified in the given path of the JSON element. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing boolean value. STRING OBJECT No Yes path The JSON path to fetch the boolean value. STRING No Yes Examples EXAMPLE 1 json:getBool(json,'$.married') If the json is the format {'name' : 'John', 'married' : true} , the function returns true as there is a matching boolean at $.married . EXAMPLE 2 json:getBool(json,'$.name') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching boolean at $.name . EXAMPLE 3 json:getBool(json,'$.foo') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching element at $.foo . getDouble (Function) Function retrieves the 'double' value specified in the given path of the JSON element. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing double value. STRING OBJECT No Yes path The JSON path to fetch the double value. STRING No Yes Examples EXAMPLE 1 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000.0 as there is a matching double at $.salary . EXAMPLE 2 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getDouble(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching double at $.name . getFloat (Function) Function retrieves the 'float' value specified in the given path of the JSON element. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing float value. STRING OBJECT No Yes path The JSON path to fetch the float value. STRING No Yes Examples EXAMPLE 1 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000 as there is a matching float at $.salary . EXAMPLE 2 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getFloat(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching float at $.name . getInt (Function) Function retrieves the 'int' value specified in the given path of the JSON element. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing int value. STRING OBJECT No Yes path The JSON path to fetch the int value. STRING No Yes Examples EXAMPLE 1 json:getInt(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching int at $.age . EXAMPLE 2 json:getInt(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getInt(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching int at $.name . getLong (Function) Function retrieves the 'long' value specified in the given path of the JSON element. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing long value. STRING OBJECT No Yes path The JSON path to fetch the long value. STRING No Yes Examples EXAMPLE 1 json:getLong(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching long at $.age . EXAMPLE 2 json:getLong(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getLong(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching long at $.name . getObject (Function) Function retrieves the object specified in the given path of the JSON element. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing the object. STRING OBJECT No Yes path The JSON path to fetch the object. STRING No Yes Examples EXAMPLE 1 json:getObject(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as there is a matching object at $.address . EXAMPLE 2 json:getObject(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching object at $.age . EXAMPLE 3 json:getObject(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . getString (Function) Function retrieves value specified in the given path of the JSON element as a string. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing value. STRING OBJECT No Yes path The JSON path to fetch the value. STRING No Yes Examples EXAMPLE 1 json:getString(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns John as there is a matching string at $.name . EXAMPLE 2 json:getString(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getString(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as a string as there is a matching element at $.age . EXAMPLE 4 json:getString(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as a string as there is a matching element at $.address . isExists (Function) Function checks whether there is a JSON element present in the given path or not. Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that needs to be searched for an elements. STRING OBJECT No Yes path The JSON path to check for the element. STRING No Yes Examples EXAMPLE 1 json:isExists(json, '$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns true as there is an element in the given path. EXAMPLE 2 json:isExists(json, '$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns false as there is no element in the given path. setElement (Function) Function sets JSON element into a given JSON at the specific path. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element) OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON to which a JSON element needs to be added/replaced. STRING OBJECT No Yes path The JSON path where the JSON element should be added/replaced. STRING No Yes json.element The JSON element being added. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No Yes key The key to be used to refer the newly added element in the input JSON. Assumes the element is added to a JSON array, or the element selected by the JSON path will be updated. STRING Yes Yes Examples EXAMPLE 1 json:setElement(json, '$', {'country' : 'USA'} , 'address') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}} by adding 'address' element and returns the updated JSON. EXAMPLE 2 json:setElement(json, '$', 40, 'age') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'age' : 40} by adding 'age' element and returns the updated JSON. EXAMPLE 3 json:setElement(json, '$', 45, 'age') If the json is the format {'name' : 'John', 'married' : true, 'age' : 40} , the function updates the json as {'name' : 'John', 'married' : true, 'age' : 45} by replacing 'age' element and returns the updated JSON. EXAMPLE 4 json:setElement(json, '$.items', 'book') If the json is the format {'name' : 'Stationary', 'items' : ['pen', 'pencil']} , the function updates the json as {'name' : 'John', 'items' : ['pen', 'pencil', 'book']} by adding 'book' in the items array and returns the updated JSON. EXAMPLE 5 json:setElement(json, '$.item', 'book') If the json is the format {'name' : 'Stationary', 'item' : 'pen'} , the function updates the json as {'name' : 'John', 'item' : 'book'} by replacing 'item' element and returns the updated JSON. EXAMPLE 6 json:setElement(json, '$.address', 'city', 'SF') If the json is the format {'name' : 'John', 'married' : true} ,the function will not update, but returns the original JSON as there are no valid path for $.address . toObject (Function) Function generate JSON object from the given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string that needs to be converted to a JSON object. STRING No Yes Examples EXAMPLE 1 json:toJson(json) This returns the JSON object corresponding to the given JSON string. toString (Function) Function generates a JSON string corresponding to a given JSON object. Syntax STRING json:toString( OBJECT json) STRING json:toString( OBJECT json, BOOL allow.escape) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object to generates a JSON string. OBJECT No Yes allow.escape If this is set to true, quotes will be escaped in the resulting string. Otherwise quotes will not be escaped. false BOOL Yes Yes Examples EXAMPLE 1 json:toString(json) This returns the JSON string corresponding to a given JSON object. EXAMPLE 2 json:toString(json, true) Assume the json object has the field 'user' with value 'david'. With the allowEscape parameter set to true, this will return the string \"{\\\"user\\\":\\\"david\\\"}\" EXAMPLE 3 json:toString(json, false) Assume the json object has the field 'user' with value 'david'. With the allowEscape parameter set to false, this will return the string {\"user\":\"david\"} tokenize (Stream Processor) Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events. Syntax json:tokenize( STRING|OBJECT json, STRING path) json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON string. If the 'path' selects a JSON array then the system returns each element in the array as a JSON string via a separate events. STRING Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary . tokenizeAsObject (Stream Processor) Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path) json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON object. If the 'path' selects a JSON array then the system returns each element in the array as a JSON object via a separate events. OBJECT Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"2.0.8"},{"location":"api/2.0.8/#api-docs-v208","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.8"},{"location":"api/2.0.8/#json","text":"","title":"Json"},{"location":"api/2.0.8/#group-aggregate-function","text":"This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:group( STRING|OBJECT json) OBJECT json:group( STRING|OBJECT json, BOOL distinct) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:group( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:group( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:group( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:group( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'.","title":"group (Aggregate Function)"},{"location":"api/2.0.8/#groupasobject-aggregate-function","text":"This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:groupAsObject( STRING|OBJECT json) OBJECT json:groupAsObject( STRING|OBJECT json, BOOL distinct) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:groupAsObject( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:groupAsObject( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:groupAsObject( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:groupAsObject( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'.","title":"groupAsObject (Aggregate Function)"},{"location":"api/2.0.8/#getbool-function","text":"Function retrieves the 'boolean' value specified in the given path of the JSON element. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing boolean value. STRING OBJECT No Yes path The JSON path to fetch the boolean value. STRING No Yes Examples EXAMPLE 1 json:getBool(json,'$.married') If the json is the format {'name' : 'John', 'married' : true} , the function returns true as there is a matching boolean at $.married . EXAMPLE 2 json:getBool(json,'$.name') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching boolean at $.name . EXAMPLE 3 json:getBool(json,'$.foo') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching element at $.foo .","title":"getBool (Function)"},{"location":"api/2.0.8/#getdouble-function","text":"Function retrieves the 'double' value specified in the given path of the JSON element. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing double value. STRING OBJECT No Yes path The JSON path to fetch the double value. STRING No Yes Examples EXAMPLE 1 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000.0 as there is a matching double at $.salary . EXAMPLE 2 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getDouble(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching double at $.name .","title":"getDouble (Function)"},{"location":"api/2.0.8/#getfloat-function","text":"Function retrieves the 'float' value specified in the given path of the JSON element. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing float value. STRING OBJECT No Yes path The JSON path to fetch the float value. STRING No Yes Examples EXAMPLE 1 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000 as there is a matching float at $.salary . EXAMPLE 2 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getFloat(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching float at $.name .","title":"getFloat (Function)"},{"location":"api/2.0.8/#getint-function","text":"Function retrieves the 'int' value specified in the given path of the JSON element. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing int value. STRING OBJECT No Yes path The JSON path to fetch the int value. STRING No Yes Examples EXAMPLE 1 json:getInt(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching int at $.age . EXAMPLE 2 json:getInt(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getInt(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching int at $.name .","title":"getInt (Function)"},{"location":"api/2.0.8/#getlong-function","text":"Function retrieves the 'long' value specified in the given path of the JSON element. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing long value. STRING OBJECT No Yes path The JSON path to fetch the long value. STRING No Yes Examples EXAMPLE 1 json:getLong(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching long at $.age . EXAMPLE 2 json:getLong(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getLong(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching long at $.name .","title":"getLong (Function)"},{"location":"api/2.0.8/#getobject-function","text":"Function retrieves the object specified in the given path of the JSON element. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing the object. STRING OBJECT No Yes path The JSON path to fetch the object. STRING No Yes Examples EXAMPLE 1 json:getObject(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as there is a matching object at $.address . EXAMPLE 2 json:getObject(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching object at $.age . EXAMPLE 3 json:getObject(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary .","title":"getObject (Function)"},{"location":"api/2.0.8/#getstring-function","text":"Function retrieves value specified in the given path of the JSON element as a string. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing value. STRING OBJECT No Yes path The JSON path to fetch the value. STRING No Yes Examples EXAMPLE 1 json:getString(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns John as there is a matching string at $.name . EXAMPLE 2 json:getString(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getString(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as a string as there is a matching element at $.age . EXAMPLE 4 json:getString(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as a string as there is a matching element at $.address .","title":"getString (Function)"},{"location":"api/2.0.8/#isexists-function","text":"Function checks whether there is a JSON element present in the given path or not. Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that needs to be searched for an elements. STRING OBJECT No Yes path The JSON path to check for the element. STRING No Yes Examples EXAMPLE 1 json:isExists(json, '$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns true as there is an element in the given path. EXAMPLE 2 json:isExists(json, '$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns false as there is no element in the given path.","title":"isExists (Function)"},{"location":"api/2.0.8/#setelement-function","text":"Function sets JSON element into a given JSON at the specific path. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element) OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON to which a JSON element needs to be added/replaced. STRING OBJECT No Yes path The JSON path where the JSON element should be added/replaced. STRING No Yes json.element The JSON element being added. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No Yes key The key to be used to refer the newly added element in the input JSON. Assumes the element is added to a JSON array, or the element selected by the JSON path will be updated. STRING Yes Yes Examples EXAMPLE 1 json:setElement(json, '$', {'country' : 'USA'} , 'address') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}} by adding 'address' element and returns the updated JSON. EXAMPLE 2 json:setElement(json, '$', 40, 'age') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'age' : 40} by adding 'age' element and returns the updated JSON. EXAMPLE 3 json:setElement(json, '$', 45, 'age') If the json is the format {'name' : 'John', 'married' : true, 'age' : 40} , the function updates the json as {'name' : 'John', 'married' : true, 'age' : 45} by replacing 'age' element and returns the updated JSON. EXAMPLE 4 json:setElement(json, '$.items', 'book') If the json is the format {'name' : 'Stationary', 'items' : ['pen', 'pencil']} , the function updates the json as {'name' : 'John', 'items' : ['pen', 'pencil', 'book']} by adding 'book' in the items array and returns the updated JSON. EXAMPLE 5 json:setElement(json, '$.item', 'book') If the json is the format {'name' : 'Stationary', 'item' : 'pen'} , the function updates the json as {'name' : 'John', 'item' : 'book'} by replacing 'item' element and returns the updated JSON. EXAMPLE 6 json:setElement(json, '$.address', 'city', 'SF') If the json is the format {'name' : 'John', 'married' : true} ,the function will not update, but returns the original JSON as there are no valid path for $.address .","title":"setElement (Function)"},{"location":"api/2.0.8/#toobject-function","text":"Function generate JSON object from the given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string that needs to be converted to a JSON object. STRING No Yes Examples EXAMPLE 1 json:toJson(json) This returns the JSON object corresponding to the given JSON string.","title":"toObject (Function)"},{"location":"api/2.0.8/#tostring-function","text":"Function generates a JSON string corresponding to a given JSON object. Syntax STRING json:toString( OBJECT json) STRING json:toString( OBJECT json, BOOL allow.escape) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object to generates a JSON string. OBJECT No Yes allow.escape If this is set to true, quotes will be escaped in the resulting string. Otherwise quotes will not be escaped. false BOOL Yes Yes Examples EXAMPLE 1 json:toString(json) This returns the JSON string corresponding to a given JSON object. EXAMPLE 2 json:toString(json, true) Assume the json object has the field 'user' with value 'david'. With the allowEscape parameter set to true, this will return the string \"{\\\"user\\\":\\\"david\\\"}\" EXAMPLE 3 json:toString(json, false) Assume the json object has the field 'user' with value 'david'. With the allowEscape parameter set to false, this will return the string {\"user\":\"david\"}","title":"toString (Function)"},{"location":"api/2.0.8/#tokenize-stream-processor","text":"Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events. Syntax json:tokenize( STRING|OBJECT json, STRING path) json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON string. If the 'path' selects a JSON array then the system returns each element in the array as a JSON string via a separate events. STRING Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"tokenize (Stream Processor)"},{"location":"api/2.0.8/#tokenizeasobject-stream-processor","text":"Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path) json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON object. If the 'path' selects a JSON array then the system returns each element in the array as a JSON object via a separate events. OBJECT Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"tokenizeAsObject (Stream Processor)"},{"location":"api/2.0.9/","text":"API Docs - v2.0.9 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Json group (Aggregate Function) This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:group( STRING|OBJECT json) OBJECT json:group( STRING|OBJECT json, BOOL distinct) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:group( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:group( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:group( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:group( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'. groupAsObject (Aggregate Function) This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:groupAsObject( STRING|OBJECT json) OBJECT json:groupAsObject( STRING|OBJECT json, BOOL distinct) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:groupAsObject( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:groupAsObject( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:groupAsObject( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:groupAsObject( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'. getBool (Function) Function retrieves the 'boolean' value specified in the given path of the JSON element. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing boolean value. STRING OBJECT No Yes path The JSON path to fetch the boolean value. STRING No Yes Examples EXAMPLE 1 json:getBool(json,'$.married') If the json is the format {'name' : 'John', 'married' : true} , the function returns true as there is a matching boolean at $.married . EXAMPLE 2 json:getBool(json,'$.name') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching boolean at $.name . EXAMPLE 3 json:getBool(json,'$.foo') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching element at $.foo . getDouble (Function) Function retrieves the 'double' value specified in the given path of the JSON element. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing double value. STRING OBJECT No Yes path The JSON path to fetch the double value. STRING No Yes Examples EXAMPLE 1 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000.0 as there is a matching double at $.salary . EXAMPLE 2 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getDouble(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching double at $.name . getFloat (Function) Function retrieves the 'float' value specified in the given path of the JSON element. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing float value. STRING OBJECT No Yes path The JSON path to fetch the float value. STRING No Yes Examples EXAMPLE 1 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000 as there is a matching float at $.salary . EXAMPLE 2 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getFloat(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching float at $.name . getInt (Function) Function retrieves the 'int' value specified in the given path of the JSON element. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing int value. STRING OBJECT No Yes path The JSON path to fetch the int value. STRING No Yes Examples EXAMPLE 1 json:getInt(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching int at $.age . EXAMPLE 2 json:getInt(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getInt(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching int at $.name . getLong (Function) Function retrieves the 'long' value specified in the given path of the JSON element. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing long value. STRING OBJECT No Yes path The JSON path to fetch the long value. STRING No Yes Examples EXAMPLE 1 json:getLong(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching long at $.age . EXAMPLE 2 json:getLong(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getLong(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching long at $.name . getObject (Function) Function retrieves the object specified in the given path of the JSON element. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing the object. STRING OBJECT No Yes path The JSON path to fetch the object. STRING No Yes Examples EXAMPLE 1 json:getObject(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as there is a matching object at $.address . EXAMPLE 2 json:getObject(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching object at $.age . EXAMPLE 3 json:getObject(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . getString (Function) Function retrieves value specified in the given path of the JSON element as a string. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing value. STRING OBJECT No Yes path The JSON path to fetch the value. STRING No Yes Examples EXAMPLE 1 json:getString(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns John as there is a matching string at $.name . EXAMPLE 2 json:getString(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getString(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as a string as there is a matching element at $.age . EXAMPLE 4 json:getString(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as a string as there is a matching element at $.address . isExists (Function) Function checks whether there is a JSON element present in the given path or not. Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that needs to be searched for an elements. STRING OBJECT No Yes path The JSON path to check for the element. STRING No Yes Examples EXAMPLE 1 json:isExists(json, '$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns true as there is an element in the given path. EXAMPLE 2 json:isExists(json, '$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns false as there is no element in the given path. setElement (Function) Function sets JSON element into a given JSON at the specific path. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element) OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON to which a JSON element needs to be added/replaced. STRING OBJECT No Yes path The JSON path where the JSON element should be added/replaced. STRING No Yes json.element The JSON element being added. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No Yes key The key to be used to refer the newly added element in the input JSON. Assumes the element is added to a JSON array, or the element selected by the JSON path will be updated. STRING Yes Yes Examples EXAMPLE 1 json:setElement(json, '$', {'country' : 'USA'} , 'address') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}} by adding 'address' element and returns the updated JSON. EXAMPLE 2 json:setElement(json, '$', 40, 'age') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'age' : 40} by adding 'age' element and returns the updated JSON. EXAMPLE 3 json:setElement(json, '$', 45, 'age') If the json is the format {'name' : 'John', 'married' : true, 'age' : 40} , the function updates the json as {'name' : 'John', 'married' : true, 'age' : 45} by replacing 'age' element and returns the updated JSON. EXAMPLE 4 json:setElement(json, '$.items', 'book') If the json is the format {'name' : 'Stationary', 'items' : ['pen', 'pencil']} , the function updates the json as {'name' : 'John', 'items' : ['pen', 'pencil', 'book']} by adding 'book' in the items array and returns the updated JSON. EXAMPLE 5 json:setElement(json, '$.item', 'book') If the json is the format {'name' : 'Stationary', 'item' : 'pen'} , the function updates the json as {'name' : 'John', 'item' : 'book'} by replacing 'item' element and returns the updated JSON. EXAMPLE 6 json:setElement(json, '$.address', 'city', 'SF') If the json is the format {'name' : 'John', 'married' : true} ,the function will not update, but returns the original JSON as there are no valid path for $.address . toObject (Function) Function generate JSON object from the given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string that needs to be converted to a JSON object. STRING No Yes Examples EXAMPLE 1 json:toJson(json) This returns the JSON object corresponding to the given JSON string. toString (Function) Function generates a JSON string corresponding to a given JSON object. Syntax STRING json:toString( OBJECT json) STRING json:toString( OBJECT json, BOOL allow.escape) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object to generates a JSON string. OBJECT No Yes allow.escape If this is set to true, quotes will be escaped in the resulting string. Otherwise quotes will not be escaped. false BOOL Yes Yes Examples EXAMPLE 1 json:toString(json) This returns the JSON string corresponding to a given JSON object. EXAMPLE 2 json:toString(json, true) Assume the json object has the field 'user' with value 'david'. With the allowEscape parameter set to true, this will return the string \"{\\\"user\\\":\\\"david\\\"}\" EXAMPLE 3 json:toString(json, false) Assume the json object has the field 'user' with value 'david'. With the allowEscape parameter set to false, this will return the string {\"user\":\"david\"} tokenize (Stream Processor) Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events. Syntax json:tokenize( STRING|OBJECT json, STRING path) json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON string. If the 'path' selects a JSON array then the system returns each element in the array as a JSON string via a separate events. STRING Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary . tokenizeAsObject (Stream Processor) Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path) json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON object. If the 'path' selects a JSON array then the system returns each element in the array as a JSON object via a separate events. OBJECT Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"2.0.9"},{"location":"api/2.0.9/#api-docs-v209","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.9"},{"location":"api/2.0.9/#json","text":"","title":"Json"},{"location":"api/2.0.9/#group-aggregate-function","text":"This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:group( STRING|OBJECT json) OBJECT json:group( STRING|OBJECT json, BOOL distinct) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:group( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:group( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:group( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:group( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'.","title":"group (Aggregate Function)"},{"location":"api/2.0.9/#groupasobject-aggregate-function","text":"This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:groupAsObject( STRING|OBJECT json) OBJECT json:groupAsObject( STRING|OBJECT json, BOOL distinct) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:groupAsObject( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:groupAsObject( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:groupAsObject( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:groupAsObject( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'.","title":"groupAsObject (Aggregate Function)"},{"location":"api/2.0.9/#getbool-function","text":"Function retrieves the 'boolean' value specified in the given path of the JSON element. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing boolean value. STRING OBJECT No Yes path The JSON path to fetch the boolean value. STRING No Yes Examples EXAMPLE 1 json:getBool(json,'$.married') If the json is the format {'name' : 'John', 'married' : true} , the function returns true as there is a matching boolean at $.married . EXAMPLE 2 json:getBool(json,'$.name') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching boolean at $.name . EXAMPLE 3 json:getBool(json,'$.foo') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching element at $.foo .","title":"getBool (Function)"},{"location":"api/2.0.9/#getdouble-function","text":"Function retrieves the 'double' value specified in the given path of the JSON element. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing double value. STRING OBJECT No Yes path The JSON path to fetch the double value. STRING No Yes Examples EXAMPLE 1 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000.0 as there is a matching double at $.salary . EXAMPLE 2 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getDouble(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching double at $.name .","title":"getDouble (Function)"},{"location":"api/2.0.9/#getfloat-function","text":"Function retrieves the 'float' value specified in the given path of the JSON element. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing float value. STRING OBJECT No Yes path The JSON path to fetch the float value. STRING No Yes Examples EXAMPLE 1 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000 as there is a matching float at $.salary . EXAMPLE 2 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getFloat(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching float at $.name .","title":"getFloat (Function)"},{"location":"api/2.0.9/#getint-function","text":"Function retrieves the 'int' value specified in the given path of the JSON element. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing int value. STRING OBJECT No Yes path The JSON path to fetch the int value. STRING No Yes Examples EXAMPLE 1 json:getInt(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching int at $.age . EXAMPLE 2 json:getInt(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getInt(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching int at $.name .","title":"getInt (Function)"},{"location":"api/2.0.9/#getlong-function","text":"Function retrieves the 'long' value specified in the given path of the JSON element. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing long value. STRING OBJECT No Yes path The JSON path to fetch the long value. STRING No Yes Examples EXAMPLE 1 json:getLong(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching long at $.age . EXAMPLE 2 json:getLong(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getLong(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching long at $.name .","title":"getLong (Function)"},{"location":"api/2.0.9/#getobject-function","text":"Function retrieves the object specified in the given path of the JSON element. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing the object. STRING OBJECT No Yes path The JSON path to fetch the object. STRING No Yes Examples EXAMPLE 1 json:getObject(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as there is a matching object at $.address . EXAMPLE 2 json:getObject(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching object at $.age . EXAMPLE 3 json:getObject(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary .","title":"getObject (Function)"},{"location":"api/2.0.9/#getstring-function","text":"Function retrieves value specified in the given path of the JSON element as a string. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing value. STRING OBJECT No Yes path The JSON path to fetch the value. STRING No Yes Examples EXAMPLE 1 json:getString(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns John as there is a matching string at $.name . EXAMPLE 2 json:getString(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getString(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as a string as there is a matching element at $.age . EXAMPLE 4 json:getString(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as a string as there is a matching element at $.address .","title":"getString (Function)"},{"location":"api/2.0.9/#isexists-function","text":"Function checks whether there is a JSON element present in the given path or not. Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that needs to be searched for an elements. STRING OBJECT No Yes path The JSON path to check for the element. STRING No Yes Examples EXAMPLE 1 json:isExists(json, '$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns true as there is an element in the given path. EXAMPLE 2 json:isExists(json, '$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns false as there is no element in the given path.","title":"isExists (Function)"},{"location":"api/2.0.9/#setelement-function","text":"Function sets JSON element into a given JSON at the specific path. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element) OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON to which a JSON element needs to be added/replaced. STRING OBJECT No Yes path The JSON path where the JSON element should be added/replaced. STRING No Yes json.element The JSON element being added. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No Yes key The key to be used to refer the newly added element in the input JSON. Assumes the element is added to a JSON array, or the element selected by the JSON path will be updated. STRING Yes Yes Examples EXAMPLE 1 json:setElement(json, '$', {'country' : 'USA'} , 'address') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}} by adding 'address' element and returns the updated JSON. EXAMPLE 2 json:setElement(json, '$', 40, 'age') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'age' : 40} by adding 'age' element and returns the updated JSON. EXAMPLE 3 json:setElement(json, '$', 45, 'age') If the json is the format {'name' : 'John', 'married' : true, 'age' : 40} , the function updates the json as {'name' : 'John', 'married' : true, 'age' : 45} by replacing 'age' element and returns the updated JSON. EXAMPLE 4 json:setElement(json, '$.items', 'book') If the json is the format {'name' : 'Stationary', 'items' : ['pen', 'pencil']} , the function updates the json as {'name' : 'John', 'items' : ['pen', 'pencil', 'book']} by adding 'book' in the items array and returns the updated JSON. EXAMPLE 5 json:setElement(json, '$.item', 'book') If the json is the format {'name' : 'Stationary', 'item' : 'pen'} , the function updates the json as {'name' : 'John', 'item' : 'book'} by replacing 'item' element and returns the updated JSON. EXAMPLE 6 json:setElement(json, '$.address', 'city', 'SF') If the json is the format {'name' : 'John', 'married' : true} ,the function will not update, but returns the original JSON as there are no valid path for $.address .","title":"setElement (Function)"},{"location":"api/2.0.9/#toobject-function","text":"Function generate JSON object from the given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string that needs to be converted to a JSON object. STRING No Yes Examples EXAMPLE 1 json:toJson(json) This returns the JSON object corresponding to the given JSON string.","title":"toObject (Function)"},{"location":"api/2.0.9/#tostring-function","text":"Function generates a JSON string corresponding to a given JSON object. Syntax STRING json:toString( OBJECT json) STRING json:toString( OBJECT json, BOOL allow.escape) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object to generates a JSON string. OBJECT No Yes allow.escape If this is set to true, quotes will be escaped in the resulting string. Otherwise quotes will not be escaped. false BOOL Yes Yes Examples EXAMPLE 1 json:toString(json) This returns the JSON string corresponding to a given JSON object. EXAMPLE 2 json:toString(json, true) Assume the json object has the field 'user' with value 'david'. With the allowEscape parameter set to true, this will return the string \"{\\\"user\\\":\\\"david\\\"}\" EXAMPLE 3 json:toString(json, false) Assume the json object has the field 'user' with value 'david'. With the allowEscape parameter set to false, this will return the string {\"user\":\"david\"}","title":"toString (Function)"},{"location":"api/2.0.9/#tokenize-stream-processor","text":"Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events. Syntax json:tokenize( STRING|OBJECT json, STRING path) json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON string. If the 'path' selects a JSON array then the system returns each element in the array as a JSON string via a separate events. STRING Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"tokenize (Stream Processor)"},{"location":"api/2.0.9/#tokenizeasobject-stream-processor","text":"Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path) json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON object. If the 'path' selects a JSON array then the system returns each element in the array as a JSON object via a separate events. OBJECT Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"tokenizeAsObject (Stream Processor)"},{"location":"api/latest/","text":"API Docs - v2.0.11 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. Json group (Aggregate Function) This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:group( STRING|OBJECT json) OBJECT json:group( STRING|OBJECT json, BOOL distinct) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:group( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:group( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:group( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:group( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'. groupAsObject (Aggregate Function) This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:groupAsObject( STRING|OBJECT json) OBJECT json:groupAsObject( STRING|OBJECT json, BOOL distinct) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:groupAsObject( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:groupAsObject( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:groupAsObject( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:groupAsObject( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'. getBool (Function) Function retrieves the 'boolean' value specified in the given path of the JSON element. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing boolean value. STRING OBJECT No Yes path The JSON path to fetch the boolean value. STRING No Yes Examples EXAMPLE 1 json:getBool(json,'$.married') If the json is the format {'name' : 'John', 'married' : true} , the function returns true as there is a matching boolean at $.married . EXAMPLE 2 json:getBool(json,'$.name') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching boolean at $.name . EXAMPLE 3 json:getBool(json,'$.foo') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching element at $.foo . getDouble (Function) Function retrieves the 'double' value specified in the given path of the JSON element. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing double value. STRING OBJECT No Yes path The JSON path to fetch the double value. STRING No Yes Examples EXAMPLE 1 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000.0 as there is a matching double at $.salary . EXAMPLE 2 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getDouble(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching double at $.name . getFloat (Function) Function retrieves the 'float' value specified in the given path of the JSON element. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing float value. STRING OBJECT No Yes path The JSON path to fetch the float value. STRING No Yes Examples EXAMPLE 1 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000 as there is a matching float at $.salary . EXAMPLE 2 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getFloat(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching float at $.name . getInt (Function) Function retrieves the 'int' value specified in the given path of the JSON element. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing int value. STRING OBJECT No Yes path The JSON path to fetch the int value. STRING No Yes Examples EXAMPLE 1 json:getInt(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching int at $.age . EXAMPLE 2 json:getInt(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getInt(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching int at $.name . getLong (Function) Function retrieves the 'long' value specified in the given path of the JSON element. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing long value. STRING OBJECT No Yes path The JSON path to fetch the long value. STRING No Yes Examples EXAMPLE 1 json:getLong(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching long at $.age . EXAMPLE 2 json:getLong(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getLong(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching long at $.name . getObject (Function) Function retrieves the object specified in the given path of the JSON element. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing the object. STRING OBJECT No Yes path The JSON path to fetch the object. STRING No Yes Examples EXAMPLE 1 json:getObject(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as there is a matching object at $.address . EXAMPLE 2 json:getObject(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching object at $.age . EXAMPLE 3 json:getObject(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . getString (Function) Function retrieves value specified in the given path of the JSON element as a string. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing value. STRING OBJECT No Yes path The JSON path to fetch the value. STRING No Yes Examples EXAMPLE 1 json:getString(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns John as there is a matching string at $.name . EXAMPLE 2 json:getString(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getString(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as a string as there is a matching element at $.age . EXAMPLE 4 json:getString(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as a string as there is a matching element at $.address . isExists (Function) Function checks whether there is a JSON element present in the given path or not. Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that needs to be searched for an elements. STRING OBJECT No Yes path The JSON path to check for the element. STRING No Yes Examples EXAMPLE 1 json:isExists(json, '$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns true as there is an element in the given path. EXAMPLE 2 json:isExists(json, '$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns false as there is no element in the given path. setElement (Function) Function sets JSON element into a given JSON at the specific path. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element) OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON to which a JSON element needs to be added/replaced. STRING OBJECT No Yes path The JSON path where the JSON element should be added/replaced. STRING No Yes json.element The JSON element being added. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No Yes key The key to be used to refer the newly added element in the input JSON. Assumes the element is added to a JSON array, or the element selected by the JSON path will be updated. STRING Yes Yes Examples EXAMPLE 1 json:setElement(json, '$', {'country' : 'USA'} , 'address') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}} by adding 'address' element and returns the updated JSON. EXAMPLE 2 json:setElement(json, '$', 40, 'age') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'age' : 40} by adding 'age' element and returns the updated JSON. EXAMPLE 3 json:setElement(json, '$', 45, 'age') If the json is the format {'name' : 'John', 'married' : true, 'age' : 40} , the function updates the json as {'name' : 'John', 'married' : true, 'age' : 45} by replacing 'age' element and returns the updated JSON. EXAMPLE 4 json:setElement(json, '$.items', 'book') If the json is the format {'name' : 'Stationary', 'items' : ['pen', 'pencil']} , the function updates the json as {'name' : 'John', 'items' : ['pen', 'pencil', 'book']} by adding 'book' in the items array and returns the updated JSON. EXAMPLE 5 json:setElement(json, '$.item', 'book') If the json is the format {'name' : 'Stationary', 'item' : 'pen'} , the function updates the json as {'name' : 'John', 'item' : 'book'} by replacing 'item' element and returns the updated JSON. EXAMPLE 6 json:setElement(json, '$.address', 'city', 'SF') If the json is the format {'name' : 'John', 'married' : true} ,the function will not update, but returns the original JSON as there are no valid path for $.address . toObject (Function) Function generate JSON object from the given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string that needs to be converted to a JSON object. STRING No Yes Examples EXAMPLE 1 json:toJson(json) This returns the JSON object corresponding to the given JSON string. toString (Function) Function generates a JSON string corresponding to a given JSON object. Syntax STRING json:toString( STRING|OBJECT json) STRING json:toString( STRING|OBJECT json, BOOL allow.escape) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object to generates a JSON string. STRING OBJECT No Yes allow.escape If this is set to true, quotes will be escaped in the resulting string. Otherwise quotes will not be escaped. false BOOL Yes Yes Examples EXAMPLE 1 json:toString(json) This returns the JSON string corresponding to a given JSON object. EXAMPLE 2 json:toString(json, true) Assume the json object has the field 'user' with value 'david'. With the allowEscape parameter set to true, this will return the string \"{\\\"user\\\":\\\"david\\\"}\" EXAMPLE 3 json:toString(json, false) Assume the json object has the field 'user' with value 'david'. With the allowEscape parameter set to false, this will return the string {\"user\":\"david\"} tokenize (Stream Processor) Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events. Syntax json:tokenize( STRING|OBJECT json, STRING path) json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON string. If the 'path' selects a JSON array then the system returns each element in the array as a JSON string via a separate events. STRING Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary . tokenizeAsObject (Stream Processor) Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path) json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON object. If the 'path' selects a JSON array then the system returns each element in the array as a JSON object via a separate events. OBJECT Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"latest"},{"location":"api/latest/#api-docs-v2011","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.11"},{"location":"api/latest/#json","text":"","title":"Json"},{"location":"api/latest/#group-aggregate-function","text":"This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:group( STRING|OBJECT json) OBJECT json:group( STRING|OBJECT json, BOOL distinct) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element) OBJECT json:group( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:group( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:group( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:group( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:group( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'.","title":"group (Aggregate Function)"},{"location":"api/latest/#groupasobject-aggregate-function","text":"This function aggregates the JSON elements and returns a JSON object by adding enclosing.element if it is provided. If enclosing.element is not provided it aggregate the JSON elements returns a JSON array. Syntax OBJECT json:groupAsObject( STRING|OBJECT json) OBJECT json:groupAsObject( STRING|OBJECT json, BOOL distinct) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element) OBJECT json:groupAsObject( STRING|OBJECT json, STRING enclosing.element, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON element that needs to be aggregated. STRING OBJECT No Yes enclosing.element The JSON element used to enclose the aggregated JSON elements. EMPTY_STRING STRING Yes Yes distinct This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned. false BOOL Yes Yes Examples EXAMPLE 1 from InputStream#window.length(5) select json:groupAsObject( json ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}{\"date\":\"2013-11-19\",\"time\":\"12:20\"}] to the 'OutputStream'. EXAMPLE 2 from InputStream#window.length(5) select json:groupAsObject( json , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns [{\"date\":\"2013-11-19\",\"time\":\"10:30\"}] to the 'OutputStream'. EXAMPLE 3 from InputStream#window.length(5) select json:groupAsObject( json , result ) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"12:20\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"},{\"date\":\"2013-11-19\",\"time\":\"12:20\"}} to the 'OutputStream'. EXAMPLE 4 from InputStream#window.length(5) select json:groupAsObject( json , result , true) as groupedJSONArray input OutputStream; When we input events having values for the json as {\"date\":\"2013-11-19\",\"time\":\"10:30\"} and {\"date\":\"2013-11-19\",\"time\":\"10:30\"} , it returns {\"result\":[{\"date\":\"2013-11-19\",\"time\":\"10:30\"}]} to the 'OutputStream'.","title":"groupAsObject (Aggregate Function)"},{"location":"api/latest/#getbool-function","text":"Function retrieves the 'boolean' value specified in the given path of the JSON element. Syntax BOOL json:getBool( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing boolean value. STRING OBJECT No Yes path The JSON path to fetch the boolean value. STRING No Yes Examples EXAMPLE 1 json:getBool(json,'$.married') If the json is the format {'name' : 'John', 'married' : true} , the function returns true as there is a matching boolean at $.married . EXAMPLE 2 json:getBool(json,'$.name') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching boolean at $.name . EXAMPLE 3 json:getBool(json,'$.foo') If the json is the format {'name' : 'John', 'married' : true} , the function returns null as there is no matching element at $.foo .","title":"getBool (Function)"},{"location":"api/latest/#getdouble-function","text":"Function retrieves the 'double' value specified in the given path of the JSON element. Syntax DOUBLE json:getDouble( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing double value. STRING OBJECT No Yes path The JSON path to fetch the double value. STRING No Yes Examples EXAMPLE 1 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000.0 as there is a matching double at $.salary . EXAMPLE 2 json:getDouble(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getDouble(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching double at $.name .","title":"getDouble (Function)"},{"location":"api/latest/#getfloat-function","text":"Function retrieves the 'float' value specified in the given path of the JSON element. Syntax FLOAT json:getFloat( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing float value. STRING OBJECT No Yes path The JSON path to fetch the float value. STRING No Yes Examples EXAMPLE 1 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'salary' : 12000.0} , the function returns 12000 as there is a matching float at $.salary . EXAMPLE 2 json:getFloat(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getFloat(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching float at $.name .","title":"getFloat (Function)"},{"location":"api/latest/#getint-function","text":"Function retrieves the 'int' value specified in the given path of the JSON element. Syntax INT json:getInt( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing int value. STRING OBJECT No Yes path The JSON path to fetch the int value. STRING No Yes Examples EXAMPLE 1 json:getInt(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching int at $.age . EXAMPLE 2 json:getInt(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getInt(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching int at $.name .","title":"getInt (Function)"},{"location":"api/latest/#getlong-function","text":"Function retrieves the 'long' value specified in the given path of the JSON element. Syntax LONG json:getLong( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing long value. STRING OBJECT No Yes path The JSON path to fetch the long value. STRING No Yes Examples EXAMPLE 1 json:getLong(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching long at $.age . EXAMPLE 2 json:getLong(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getLong(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching long at $.name .","title":"getLong (Function)"},{"location":"api/latest/#getobject-function","text":"Function retrieves the object specified in the given path of the JSON element. Syntax OBJECT json:getObject( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing the object. STRING OBJECT No Yes path The JSON path to fetch the object. STRING No Yes Examples EXAMPLE 1 json:getObject(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as there is a matching object at $.address . EXAMPLE 2 json:getObject(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as there is a matching object at $.age . EXAMPLE 3 json:getObject(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary .","title":"getObject (Function)"},{"location":"api/latest/#getstring-function","text":"Function retrieves value specified in the given path of the JSON element as a string. Syntax STRING json:getString( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input containing value. STRING OBJECT No Yes path The JSON path to fetch the value. STRING No Yes Examples EXAMPLE 1 json:getString(json,'$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns John as there is a matching string at $.name . EXAMPLE 2 json:getString(json,'$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns null as there are no matching element at $.salary . EXAMPLE 3 json:getString(json,'$.age') If the json is the format {'name' : 'John', 'age' : 23} , the function returns 23 as a string as there is a matching element at $.age . EXAMPLE 4 json:getString(json,'$.address') If the json is the format {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns {'city' : 'NY', 'country' : 'USA'} as a string as there is a matching element at $.address .","title":"getString (Function)"},{"location":"api/latest/#isexists-function","text":"Function checks whether there is a JSON element present in the given path or not. Syntax BOOL json:isExists( STRING|OBJECT json, STRING path) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON input that needs to be searched for an elements. STRING OBJECT No Yes path The JSON path to check for the element. STRING No Yes Examples EXAMPLE 1 json:isExists(json, '$.name') If the json is the format {'name' : 'John', 'age' : 23} , the function returns true as there is an element in the given path. EXAMPLE 2 json:isExists(json, '$.salary') If the json is the format {'name' : 'John', 'age' : 23} , the function returns false as there is no element in the given path.","title":"isExists (Function)"},{"location":"api/latest/#setelement-function","text":"Function sets JSON element into a given JSON at the specific path. Syntax OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element) OBJECT json:setElement( STRING|OBJECT json, STRING path, STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT json.element, STRING key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The JSON to which a JSON element needs to be added/replaced. STRING OBJECT No Yes path The JSON path where the JSON element should be added/replaced. STRING No Yes json.element The JSON element being added. STRING BOOL DOUBLE FLOAT INT LONG OBJECT No Yes key The key to be used to refer the newly added element in the input JSON. Assumes the element is added to a JSON array, or the element selected by the JSON path will be updated. STRING Yes Yes Examples EXAMPLE 1 json:setElement(json, '$', {'country' : 'USA'} , 'address') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}} by adding 'address' element and returns the updated JSON. EXAMPLE 2 json:setElement(json, '$', 40, 'age') If the json is the format {'name' : 'John', 'married' : true} ,the function updates the json as {'name' : 'John', 'married' : true, 'age' : 40} by adding 'age' element and returns the updated JSON. EXAMPLE 3 json:setElement(json, '$', 45, 'age') If the json is the format {'name' : 'John', 'married' : true, 'age' : 40} , the function updates the json as {'name' : 'John', 'married' : true, 'age' : 45} by replacing 'age' element and returns the updated JSON. EXAMPLE 4 json:setElement(json, '$.items', 'book') If the json is the format {'name' : 'Stationary', 'items' : ['pen', 'pencil']} , the function updates the json as {'name' : 'John', 'items' : ['pen', 'pencil', 'book']} by adding 'book' in the items array and returns the updated JSON. EXAMPLE 5 json:setElement(json, '$.item', 'book') If the json is the format {'name' : 'Stationary', 'item' : 'pen'} , the function updates the json as {'name' : 'John', 'item' : 'book'} by replacing 'item' element and returns the updated JSON. EXAMPLE 6 json:setElement(json, '$.address', 'city', 'SF') If the json is the format {'name' : 'John', 'married' : true} ,the function will not update, but returns the original JSON as there are no valid path for $.address .","title":"setElement (Function)"},{"location":"api/latest/#toobject-function","text":"Function generate JSON object from the given JSON string. Syntax OBJECT json:toObject( STRING json) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON string that needs to be converted to a JSON object. STRING No Yes Examples EXAMPLE 1 json:toJson(json) This returns the JSON object corresponding to the given JSON string.","title":"toObject (Function)"},{"location":"api/latest/#tostring-function","text":"Function generates a JSON string corresponding to a given JSON object. Syntax STRING json:toString( STRING|OBJECT json) STRING json:toString( STRING|OBJECT json, BOOL allow.escape) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json A valid JSON object to generates a JSON string. STRING OBJECT No Yes allow.escape If this is set to true, quotes will be escaped in the resulting string. Otherwise quotes will not be escaped. false BOOL Yes Yes Examples EXAMPLE 1 json:toString(json) This returns the JSON string corresponding to a given JSON object. EXAMPLE 2 json:toString(json, true) Assume the json object has the field 'user' with value 'david'. With the allowEscape parameter set to true, this will return the string \"{\\\"user\\\":\\\"david\\\"}\" EXAMPLE 3 json:toString(json, false) Assume the json object has the field 'user' with value 'david'. With the allowEscape parameter set to false, this will return the string {\"user\":\"david\"}","title":"toString (Function)"},{"location":"api/latest/#tokenize-stream-processor","text":"Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events. Syntax json:tokenize( STRING|OBJECT json, STRING path) json:tokenize( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON string. If the 'path' selects a JSON array then the system returns each element in the array as a JSON string via a separate events. STRING Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"tokenize (Stream Processor)"},{"location":"api/latest/#tokenizeasobject-stream-processor","text":"Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events. Syntax json:tokenizeAsObject( STRING|OBJECT json, STRING path) json:tokenizeAsObject( STRING|OBJECT json, STRING path, BOOL fail.on.missing.attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic json The input JSON that needs to be tokenized. STRING OBJECT No Yes path The path of the set of elements that will be tokenized. STRING No Yes fail.on.missing.attribute If there are no element on the given path, when set to true the system will drop the event, and when set to false the system will pass 'null' value to the jsonElement output attribute. true BOOL Yes No Extra Return Attributes Name Description Possible Types jsonElement The JSON element retrieved based on the given path will be returned as a JSON object. If the 'path' selects a JSON array then the system returns each element in the array as a JSON object via a separate events. OBJECT Examples EXAMPLE 1 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as $.enrolledSubjects then for both the elements in the selected JSON array, it generates it generates events as ('$.enrolledSubjects', 'Mathematics') , and ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as $.name then it will only produce one event ('$.name', 'John') as the 'path' provided a single JSON element. EXAMPLE 2 define stream InputStream (json string, path string); @info(name = 'query1') from InputStream#json:tokenizeAsObject(json, path, true) select path, jsonElement insert into OutputStream; If the input 'json' is {name:'John', age:25} ,and the 'path' is passed as $.salary then the system will produce ('$.salary', null) , as the 'fail.on.missing.attribute' is true and there are no matching element for $.salary .","title":"tokenizeAsObject (Stream Processor)"}]}